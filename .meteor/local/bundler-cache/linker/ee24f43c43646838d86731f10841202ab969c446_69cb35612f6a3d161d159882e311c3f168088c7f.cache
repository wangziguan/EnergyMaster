[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar Mousetrap;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/mousetrap_mousetrap/packages/mousetrap_mousetrap.js                                                      //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/mousetrap:mousetrap/mousetrap.js                                                                  //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n/*global define:false */                                                                                      // 1\n/**                                                                                                           // 2\n * Copyright 2013 Craig Campbell                                                                              // 3\n *                                                                                                            // 4\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                            // 5\n * you may not use this file except in compliance with the License.                                           // 6\n * You may obtain a copy of the License at                                                                    // 7\n *                                                                                                            // 8\n * http://www.apache.org/licenses/LICENSE-2.0                                                                 // 9\n *                                                                                                            // 10\n * Unless required by applicable law or agreed to in writing, software                                        // 11\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                          // 12\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                   // 13\n * See the License for the specific language governing permissions and                                        // 14\n * limitations under the License.                                                                             // 15\n *                                                                                                            // 16\n * Mousetrap is a simple keyboard shortcut library for Javascript with                                        // 17\n * no external dependencies                                                                                   // 18\n *                                                                                                            // 19\n * @version 1.4.6                                                                                             // 20\n * @url craig.is/killing/mice                                                                                 // 21\n */                                                                                                           // 22\n(function(window, document, undefined) {                                                                      // 23\n                                                                                                              // 24\n    /**                                                                                                       // 25\n     * mapping of special keycodes to their corresponding keys                                                // 26\n     *                                                                                                        // 27\n     * everything in this dictionary cannot use keypress events                                               // 28\n     * so it has to be here to map to the correct keycodes for                                                // 29\n     * keyup/keydown events                                                                                   // 30\n     *                                                                                                        // 31\n     * @type {Object}                                                                                         // 32\n     */                                                                                                       // 33\n    var _MAP = {                                                                                              // 34\n            8: 'backspace',                                                                                   // 35\n            9: 'tab',                                                                                         // 36\n            13: 'enter',                                                                                      // 37\n            16: 'shift',                                                                                      // 38\n            17: 'ctrl',                                                                                       // 39\n            18: 'alt',                                                                                        // 40\n            20: 'capslock',                                                                                   // 41\n            27: 'esc',                                                                                        // 42\n            32: 'space',                                                                                      // 43\n            33: 'pageup',                                                                                     // 44\n            34: 'pagedown',                                                                                   // 45\n            35: 'end',                                                                                        // 46\n            36: 'home',                                                                                       // 47\n            37: 'left',                                                                                       // 48\n            38: 'up',                                                                                         // 49\n            39: 'right',                                                                                      // 50\n            40: 'down',                                                                                       // 51\n            45: 'ins',                                                                                        // 52\n            46: 'del',                                                                                        // 53\n            91: 'meta',                                                                                       // 54\n            93: 'meta',                                                                                       // 55\n            224: 'meta'                                                                                       // 56\n        },                                                                                                    // 57\n                                                                                                              // 58\n        /**                                                                                                   // 59\n         * mapping for special characters so they can support                                                 // 60\n         *                                                                                                    // 61\n         * this dictionary is only used incase you want to bind a                                             // 62\n         * keyup or keydown event to one of these keys                                                        // 63\n         *                                                                                                    // 64\n         * @type {Object}                                                                                     // 65\n         */                                                                                                   // 66\n        _KEYCODE_MAP = {                                                                                      // 67\n            106: '*',                                                                                         // 68\n            107: '+',                                                                                         // 69\n            109: '-',                                                                                         // 70\n            110: '.',                                                                                         // 71\n            111 : '/',                                                                                        // 72\n            186: ';',                                                                                         // 73\n            187: '=',                                                                                         // 74\n            188: ',',                                                                                         // 75\n            189: '-',                                                                                         // 76\n            190: '.',                                                                                         // 77\n            191: '/',                                                                                         // 78\n            192: '`',                                                                                         // 79\n            219: '[',                                                                                         // 80\n            220: '\\\\',                                                                                        // 81\n            221: ']',                                                                                         // 82\n            222: '\\''                                                                                         // 83\n        },                                                                                                    // 84\n                                                                                                              // 85\n        /**                                                                                                   // 86\n         * this is a mapping of keys that require shift on a US keypad                                        // 87\n         * back to the non shift equivelents                                                                  // 88\n         *                                                                                                    // 89\n         * this is so you can use keyup events with these keys                                                // 90\n         *                                                                                                    // 91\n         * note that this will only work reliably on US keyboards                                             // 92\n         *                                                                                                    // 93\n         * @type {Object}                                                                                     // 94\n         */                                                                                                   // 95\n        _SHIFT_MAP = {                                                                                        // 96\n            '~': '`',                                                                                         // 97\n            '!': '1',                                                                                         // 98\n            '@': '2',                                                                                         // 99\n            '#': '3',                                                                                         // 100\n            '$': '4',                                                                                         // 101\n            '%': '5',                                                                                         // 102\n            '^': '6',                                                                                         // 103\n            '&': '7',                                                                                         // 104\n            '*': '8',                                                                                         // 105\n            '(': '9',                                                                                         // 106\n            ')': '0',                                                                                         // 107\n            '_': '-',                                                                                         // 108\n            '+': '=',                                                                                         // 109\n            ':': ';',                                                                                         // 110\n            '\\\"': '\\'',                                                                                       // 111\n            '<': ',',                                                                                         // 112\n            '>': '.',                                                                                         // 113\n            '?': '/',                                                                                         // 114\n            '|': '\\\\'                                                                                         // 115\n        },                                                                                                    // 116\n                                                                                                              // 117\n        /**                                                                                                   // 118\n         * this is a list of special strings you can use to map                                               // 119\n         * to modifier keys when you specify your keyboard shortcuts                                          // 120\n         *                                                                                                    // 121\n         * @type {Object}                                                                                     // 122\n         */                                                                                                   // 123\n        _SPECIAL_ALIASES = {                                                                                  // 124\n            'option': 'alt',                                                                                  // 125\n            'command': 'meta',                                                                                // 126\n            'return': 'enter',                                                                                // 127\n            'escape': 'esc',                                                                                  // 128\n            'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'                          // 129\n        },                                                                                                    // 130\n                                                                                                              // 131\n        /**                                                                                                   // 132\n         * variable to store the flipped version of _MAP from above                                           // 133\n         * needed to check if we should use keypress or not when no action                                    // 134\n         * is specified                                                                                       // 135\n         *                                                                                                    // 136\n         * @type {Object|undefined}                                                                           // 137\n         */                                                                                                   // 138\n        _REVERSE_MAP,                                                                                         // 139\n                                                                                                              // 140\n        /**                                                                                                   // 141\n         * a list of all the callbacks setup via Mousetrap.bind()                                             // 142\n         *                                                                                                    // 143\n         * @type {Object}                                                                                     // 144\n         */                                                                                                   // 145\n        _callbacks = {},                                                                                      // 146\n                                                                                                              // 147\n        /**                                                                                                   // 148\n         * direct map of string combinations to callbacks used for trigger()                                  // 149\n         *                                                                                                    // 150\n         * @type {Object}                                                                                     // 151\n         */                                                                                                   // 152\n        _directMap = {},                                                                                      // 153\n                                                                                                              // 154\n        /**                                                                                                   // 155\n         * keeps track of what level each sequence is at since multiple                                       // 156\n         * sequences can start out with the same sequence                                                     // 157\n         *                                                                                                    // 158\n         * @type {Object}                                                                                     // 159\n         */                                                                                                   // 160\n        _sequenceLevels = {},                                                                                 // 161\n                                                                                                              // 162\n        /**                                                                                                   // 163\n         * variable to store the setTimeout call                                                              // 164\n         *                                                                                                    // 165\n         * @type {null|number}                                                                                // 166\n         */                                                                                                   // 167\n        _resetTimer,                                                                                          // 168\n                                                                                                              // 169\n        /**                                                                                                   // 170\n         * temporary state where we will ignore the next keyup                                                // 171\n         *                                                                                                    // 172\n         * @type {boolean|string}                                                                             // 173\n         */                                                                                                   // 174\n        _ignoreNextKeyup = false,                                                                             // 175\n                                                                                                              // 176\n        /**                                                                                                   // 177\n         * temporary state where we will ignore the next keypress                                             // 178\n         *                                                                                                    // 179\n         * @type {boolean}                                                                                    // 180\n         */                                                                                                   // 181\n        _ignoreNextKeypress = false,                                                                          // 182\n                                                                                                              // 183\n        /**                                                                                                   // 184\n         * are we currently inside of a sequence?                                                             // 185\n         * type of action (\"keyup\" or \"keydown\" or \"keypress\") or false                                       // 186\n         *                                                                                                    // 187\n         * @type {boolean|string}                                                                             // 188\n         */                                                                                                   // 189\n        _nextExpectedAction = false;                                                                          // 190\n                                                                                                              // 191\n    /**                                                                                                       // 192\n     * loop through the f keys, f1 to f19 and add them to the map                                             // 193\n     * programatically                                                                                        // 194\n     */                                                                                                       // 195\n    for (var i = 1; i < 20; ++i) {                                                                            // 196\n        _MAP[111 + i] = 'f' + i;                                                                              // 197\n    }                                                                                                         // 198\n                                                                                                              // 199\n    /**                                                                                                       // 200\n     * loop through to map numbers on the numeric keypad                                                      // 201\n     */                                                                                                       // 202\n    for (i = 0; i <= 9; ++i) {                                                                                // 203\n        _MAP[i + 96] = i;                                                                                     // 204\n    }                                                                                                         // 205\n                                                                                                              // 206\n    /**                                                                                                       // 207\n     * cross browser add event method                                                                         // 208\n     *                                                                                                        // 209\n     * @param {Element|HTMLDocument} object                                                                   // 210\n     * @param {string} type                                                                                   // 211\n     * @param {Function} callback                                                                             // 212\n     * @returns void                                                                                          // 213\n     */                                                                                                       // 214\n    function _addEvent(object, type, callback) {                                                              // 215\n        if (object.addEventListener) {                                                                        // 216\n            object.addEventListener(type, callback, false);                                                   // 217\n            return;                                                                                           // 218\n        }                                                                                                     // 219\n                                                                                                              // 220\n        object.attachEvent('on' + type, callback);                                                            // 221\n    }                                                                                                         // 222\n                                                                                                              // 223\n    /**                                                                                                       // 224\n     * takes the event and returns the key character                                                          // 225\n     *                                                                                                        // 226\n     * @param {Event} e                                                                                       // 227\n     * @return {string}                                                                                       // 228\n     */                                                                                                       // 229\n    function _characterFromEvent(e) {                                                                         // 230\n                                                                                                              // 231\n        // for keypress events we should return the character as is                                           // 232\n        if (e.type == 'keypress') {                                                                           // 233\n            var character = String.fromCharCode(e.which);                                                     // 234\n                                                                                                              // 235\n            // if the shift key is not pressed then it is safe to assume                                      // 236\n            // that we want the character to be lowercase.  this means if                                     // 237\n            // you accidentally have caps lock on then your key bindings                                      // 238\n            // will continue to work                                                                          // 239\n            //                                                                                                // 240\n            // the only side effect that might not be desired is if you                                       // 241\n            // bind something like 'A' cause you want to trigger an                                           // 242\n            // event when capital A is pressed caps lock will no longer                                       // 243\n            // trigger the event.  shift+a will though.                                                       // 244\n            if (!e.shiftKey) {                                                                                // 245\n                character = character.toLowerCase();                                                          // 246\n            }                                                                                                 // 247\n                                                                                                              // 248\n            return character;                                                                                 // 249\n        }                                                                                                     // 250\n                                                                                                              // 251\n        // for non keypress events the special maps are needed                                                // 252\n        if (_MAP[e.which]) {                                                                                  // 253\n            return _MAP[e.which];                                                                             // 254\n        }                                                                                                     // 255\n                                                                                                              // 256\n        if (_KEYCODE_MAP[e.which]) {                                                                          // 257\n            return _KEYCODE_MAP[e.which];                                                                     // 258\n        }                                                                                                     // 259\n                                                                                                              // 260\n        // if it is not in the special map                                                                    // 261\n                                                                                                              // 262\n        // with keydown and keyup events the character seems to always                                        // 263\n        // come in as an uppercase character whether you are pressing shift                                   // 264\n        // or not.  we should make sure it is always lowercase for comparisons                                // 265\n        return String.fromCharCode(e.which).toLowerCase();                                                    // 266\n    }                                                                                                         // 267\n                                                                                                              // 268\n    /**                                                                                                       // 269\n     * checks if two arrays are equal                                                                         // 270\n     *                                                                                                        // 271\n     * @param {Array} modifiers1                                                                              // 272\n     * @param {Array} modifiers2                                                                              // 273\n     * @returns {boolean}                                                                                     // 274\n     */                                                                                                       // 275\n    function _modifiersMatch(modifiers1, modifiers2) {                                                        // 276\n        return modifiers1.sort().join(',') === modifiers2.sort().join(',');                                   // 277\n    }                                                                                                         // 278\n                                                                                                              // 279\n    /**                                                                                                       // 280\n     * resets all sequence counters except for the ones passed in                                             // 281\n     *                                                                                                        // 282\n     * @param {Object} doNotReset                                                                             // 283\n     * @returns void                                                                                          // 284\n     */                                                                                                       // 285\n    function _resetSequences(doNotReset) {                                                                    // 286\n        doNotReset = doNotReset || {};                                                                        // 287\n                                                                                                              // 288\n        var activeSequences = false,                                                                          // 289\n            key;                                                                                              // 290\n                                                                                                              // 291\n        for (key in _sequenceLevels) {                                                                        // 292\n            if (doNotReset[key]) {                                                                            // 293\n                activeSequences = true;                                                                       // 294\n                continue;                                                                                     // 295\n            }                                                                                                 // 296\n            _sequenceLevels[key] = 0;                                                                         // 297\n        }                                                                                                     // 298\n                                                                                                              // 299\n        if (!activeSequences) {                                                                               // 300\n            _nextExpectedAction = false;                                                                      // 301\n        }                                                                                                     // 302\n    }                                                                                                         // 303\n                                                                                                              // 304\n    /**                                                                                                       // 305\n     * finds all callbacks that match based on the keycode, modifiers,                                        // 306\n     * and action                                                                                             // 307\n     *                                                                                                        // 308\n     * @param {string} character                                                                              // 309\n     * @param {Array} modifiers                                                                               // 310\n     * @param {Event|Object} e                                                                                // 311\n     * @param {string=} sequenceName - name of the sequence we are looking for                                // 312\n     * @param {string=} combination                                                                           // 313\n     * @param {number=} level                                                                                 // 314\n     * @returns {Array}                                                                                       // 315\n     */                                                                                                       // 316\n    function _getMatches(character, modifiers, e, sequenceName, combination, level) {                         // 317\n        var i,                                                                                                // 318\n            callback,                                                                                         // 319\n            matches = [],                                                                                     // 320\n            action = e.type;                                                                                  // 321\n                                                                                                              // 322\n        // if there are no events related to this keycode                                                     // 323\n        if (!_callbacks[character]) {                                                                         // 324\n            return [];                                                                                        // 325\n        }                                                                                                     // 326\n                                                                                                              // 327\n        // if a modifier key is coming up on its own we should allow it                                       // 328\n        if (action == 'keyup' && _isModifier(character)) {                                                    // 329\n            modifiers = [character];                                                                          // 330\n        }                                                                                                     // 331\n                                                                                                              // 332\n        // loop through all callbacks for the key that was pressed                                            // 333\n        // and see if any of them match                                                                       // 334\n        for (i = 0; i < _callbacks[character].length; ++i) {                                                  // 335\n            callback = _callbacks[character][i];                                                              // 336\n                                                                                                              // 337\n            // if a sequence name is not specified, but this is a sequence at                                 // 338\n            // the wrong level then move onto the next match                                                  // 339\n            if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {           // 340\n                continue;                                                                                     // 341\n            }                                                                                                 // 342\n                                                                                                              // 343\n            // if the action we are looking for doesn't match the action we got                               // 344\n            // then we should keep going                                                                      // 345\n            if (action != callback.action) {                                                                  // 346\n                continue;                                                                                     // 347\n            }                                                                                                 // 348\n                                                                                                              // 349\n            // if this is a keypress event and the meta key and control key                                   // 350\n            // are not pressed that means that we need to only look at the                                    // 351\n            // character, otherwise check the modifiers as well                                               // 352\n            //                                                                                                // 353\n            // chrome will not fire a keypress if meta or control is down                                     // 354\n            // safari will fire a keypress if meta or meta+shift is down                                      // 355\n            // firefox will fire a keypress if meta or control is down                                        // 356\n            if ((action == 'keypress' && !e.metaKey && !e.ctrlKey) || _modifiersMatch(modifiers, callback.modifiers)) {\n                                                                                                              // 358\n                // when you bind a combination or sequence a second time it                                   // 359\n                // should overwrite the first one.  if a sequenceName or                                      // 360\n                // combination is specified in this call it does just that                                    // 361\n                //                                                                                            // 362\n                // @todo make deleting its own method?                                                        // 363\n                var deleteCombo = !sequenceName && callback.combo == combination;                             // 364\n                var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level; // 365\n                if (deleteCombo || deleteSequence) {                                                          // 366\n                    _callbacks[character].splice(i, 1);                                                       // 367\n                }                                                                                             // 368\n                                                                                                              // 369\n                matches.push(callback);                                                                       // 370\n            }                                                                                                 // 371\n        }                                                                                                     // 372\n                                                                                                              // 373\n        return matches;                                                                                       // 374\n    }                                                                                                         // 375\n                                                                                                              // 376\n    /**                                                                                                       // 377\n     * takes a key event and figures out what the modifiers are                                               // 378\n     *                                                                                                        // 379\n     * @param {Event} e                                                                                       // 380\n     * @returns {Array}                                                                                       // 381\n     */                                                                                                       // 382\n    function _eventModifiers(e) {                                                                             // 383\n        var modifiers = [];                                                                                   // 384\n                                                                                                              // 385\n        if (e.shiftKey) {                                                                                     // 386\n            modifiers.push('shift');                                                                          // 387\n        }                                                                                                     // 388\n                                                                                                              // 389\n        if (e.altKey) {                                                                                       // 390\n            modifiers.push('alt');                                                                            // 391\n        }                                                                                                     // 392\n                                                                                                              // 393\n        if (e.ctrlKey) {                                                                                      // 394\n            modifiers.push('ctrl');                                                                           // 395\n        }                                                                                                     // 396\n                                                                                                              // 397\n        if (e.metaKey) {                                                                                      // 398\n            modifiers.push('meta');                                                                           // 399\n        }                                                                                                     // 400\n                                                                                                              // 401\n        return modifiers;                                                                                     // 402\n    }                                                                                                         // 403\n                                                                                                              // 404\n    /**                                                                                                       // 405\n     * prevents default for this event                                                                        // 406\n     *                                                                                                        // 407\n     * @param {Event} e                                                                                       // 408\n     * @returns void                                                                                          // 409\n     */                                                                                                       // 410\n    function _preventDefault(e) {                                                                             // 411\n        if (e.preventDefault) {                                                                               // 412\n            e.preventDefault();                                                                               // 413\n            return;                                                                                           // 414\n        }                                                                                                     // 415\n                                                                                                              // 416\n        e.returnValue = false;                                                                                // 417\n    }                                                                                                         // 418\n                                                                                                              // 419\n    /**                                                                                                       // 420\n     * stops propogation for this event                                                                       // 421\n     *                                                                                                        // 422\n     * @param {Event} e                                                                                       // 423\n     * @returns void                                                                                          // 424\n     */                                                                                                       // 425\n    function _stopPropagation(e) {                                                                            // 426\n        if (e.stopPropagation) {                                                                              // 427\n            e.stopPropagation();                                                                              // 428\n            return;                                                                                           // 429\n        }                                                                                                     // 430\n                                                                                                              // 431\n        e.cancelBubble = true;                                                                                // 432\n    }                                                                                                         // 433\n                                                                                                              // 434\n    /**                                                                                                       // 435\n     * actually calls the callback function                                                                   // 436\n     *                                                                                                        // 437\n     * if your callback function returns false this will use the jquery                                       // 438\n     * convention - prevent default and stop propogation on the event                                         // 439\n     *                                                                                                        // 440\n     * @param {Function} callback                                                                             // 441\n     * @param {Event} e                                                                                       // 442\n     * @returns void                                                                                          // 443\n     */                                                                                                       // 444\n    function _fireCallback(callback, e, combo, sequence) {                                                    // 445\n                                                                                                              // 446\n        // if this event should not happen stop here                                                          // 447\n        if (Mousetrap.stopCallback(e, e.target || e.srcElement, combo, sequence)) {                           // 448\n            return;                                                                                           // 449\n        }                                                                                                     // 450\n                                                                                                              // 451\n        if (callback(e, combo) === false) {                                                                   // 452\n            _preventDefault(e);                                                                               // 453\n            _stopPropagation(e);                                                                              // 454\n        }                                                                                                     // 455\n    }                                                                                                         // 456\n                                                                                                              // 457\n    /**                                                                                                       // 458\n     * handles a character key event                                                                          // 459\n     *                                                                                                        // 460\n     * @param {string} character                                                                              // 461\n     * @param {Array} modifiers                                                                               // 462\n     * @param {Event} e                                                                                       // 463\n     * @returns void                                                                                          // 464\n     */                                                                                                       // 465\n    function _handleKey(character, modifiers, e) {                                                            // 466\n        var callbacks = _getMatches(character, modifiers, e),                                                 // 467\n            i,                                                                                                // 468\n            doNotReset = {},                                                                                  // 469\n            maxLevel = 0,                                                                                     // 470\n            processedSequenceCallback = false;                                                                // 471\n                                                                                                              // 472\n        // Calculate the maxLevel for sequences so we can only execute the longest callback sequence          // 473\n        for (i = 0; i < callbacks.length; ++i) {                                                              // 474\n            if (callbacks[i].seq) {                                                                           // 475\n                maxLevel = Math.max(maxLevel, callbacks[i].level);                                            // 476\n            }                                                                                                 // 477\n        }                                                                                                     // 478\n                                                                                                              // 479\n        // loop through matching callbacks for this key event                                                 // 480\n        for (i = 0; i < callbacks.length; ++i) {                                                              // 481\n                                                                                                              // 482\n            // fire for all sequence callbacks                                                                // 483\n            // this is because if for example you have multiple sequences                                     // 484\n            // bound such as \"g i\" and \"g t\" they both need to fire the                                       // 485\n            // callback for matching g cause otherwise you can only ever                                      // 486\n            // match the first one                                                                            // 487\n            if (callbacks[i].seq) {                                                                           // 488\n                                                                                                              // 489\n                // only fire callbacks for the maxLevel to prevent                                            // 490\n                // subsequences from also firing                                                              // 491\n                //                                                                                            // 492\n                // for example 'a option b' should not cause 'option b' to fire                               // 493\n                // even though 'option b' is part of the other sequence                                       // 494\n                //                                                                                            // 495\n                // any sequences that do not match here will be discarded                                     // 496\n                // below by the _resetSequences call                                                          // 497\n                if (callbacks[i].level != maxLevel) {                                                         // 498\n                    continue;                                                                                 // 499\n                }                                                                                             // 500\n                                                                                                              // 501\n                processedSequenceCallback = true;                                                             // 502\n                                                                                                              // 503\n                // keep a list of which sequences were matches for later                                      // 504\n                doNotReset[callbacks[i].seq] = 1;                                                             // 505\n                _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);                // 506\n                continue;                                                                                     // 507\n            }                                                                                                 // 508\n                                                                                                              // 509\n            // if there were no sequence matches but we are still here                                        // 510\n            // that means this is a regular match so we should fire that                                      // 511\n            if (!processedSequenceCallback) {                                                                 // 512\n                _fireCallback(callbacks[i].callback, e, callbacks[i].combo);                                  // 513\n            }                                                                                                 // 514\n        }                                                                                                     // 515\n                                                                                                              // 516\n        // if the key you pressed matches the type of sequence without                                        // 517\n        // being a modifier (ie \"keyup\" or \"keypress\") then we should                                         // 518\n        // reset all sequences that were not matched by this event                                            // 519\n        //                                                                                                    // 520\n        // this is so, for example, if you have the sequence \"h a t\" and you                                  // 521\n        // type \"h e a r t\" it does not match.  in this case the \"e\" will                                     // 522\n        // cause the sequence to reset                                                                        // 523\n        //                                                                                                    // 524\n        // modifier keys are ignored because you can have a sequence                                          // 525\n        // that contains modifiers such as \"enter ctrl+space\" and in most                                     // 526\n        // cases the modifier key will be pressed before the next key                                         // 527\n        //                                                                                                    // 528\n        // also if you have a sequence such as \"ctrl+b a\" then pressing the                                   // 529\n        // \"b\" key will trigger a \"keypress\" and a \"keydown\"                                                  // 530\n        //                                                                                                    // 531\n        // the \"keydown\" is expected when there is a modifier, but the                                        // 532\n        // \"keypress\" ends up matching the _nextExpectedAction since it occurs                                // 533\n        // after and that causes the sequence to reset                                                        // 534\n        //                                                                                                    // 535\n        // we ignore keypresses in a sequence that directly follow a keydown                                  // 536\n        // for the same character                                                                             // 537\n        var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;                                 // 538\n        if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {                // 539\n            _resetSequences(doNotReset);                                                                      // 540\n        }                                                                                                     // 541\n                                                                                                              // 542\n        _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';                               // 543\n    }                                                                                                         // 544\n                                                                                                              // 545\n    /**                                                                                                       // 546\n     * handles a keydown event                                                                                // 547\n     *                                                                                                        // 548\n     * @param {Event} e                                                                                       // 549\n     * @returns void                                                                                          // 550\n     */                                                                                                       // 551\n    function _handleKeyEvent(e) {                                                                             // 552\n                                                                                                              // 553\n        // normalize e.which for key events                                                                   // 554\n        // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion     // 555\n        if (typeof e.which !== 'number') {                                                                    // 556\n            e.which = e.keyCode;                                                                              // 557\n        }                                                                                                     // 558\n                                                                                                              // 559\n        var character = _characterFromEvent(e);                                                               // 560\n                                                                                                              // 561\n        // no character found then stop                                                                       // 562\n        if (!character) {                                                                                     // 563\n            return;                                                                                           // 564\n        }                                                                                                     // 565\n                                                                                                              // 566\n        // need to use === for the character check because the character can be 0                             // 567\n        if (e.type == 'keyup' && _ignoreNextKeyup === character) {                                            // 568\n            _ignoreNextKeyup = false;                                                                         // 569\n            return;                                                                                           // 570\n        }                                                                                                     // 571\n                                                                                                              // 572\n        Mousetrap.handleKey(character, _eventModifiers(e), e);                                                // 573\n    }                                                                                                         // 574\n                                                                                                              // 575\n    /**                                                                                                       // 576\n     * determines if the keycode specified is a modifier key or not                                           // 577\n     *                                                                                                        // 578\n     * @param {string} key                                                                                    // 579\n     * @returns {boolean}                                                                                     // 580\n     */                                                                                                       // 581\n    function _isModifier(key) {                                                                               // 582\n        return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';                              // 583\n    }                                                                                                         // 584\n                                                                                                              // 585\n    /**                                                                                                       // 586\n     * called to set a 1 second timeout on the specified sequence                                             // 587\n     *                                                                                                        // 588\n     * this is so after each key press in the sequence you have 1 second                                      // 589\n     * to press the next key before you have to start over                                                    // 590\n     *                                                                                                        // 591\n     * @returns void                                                                                          // 592\n     */                                                                                                       // 593\n    function _resetSequenceTimer() {                                                                          // 594\n        clearTimeout(_resetTimer);                                                                            // 595\n        _resetTimer = setTimeout(_resetSequences, 1000);                                                      // 596\n    }                                                                                                         // 597\n                                                                                                              // 598\n    /**                                                                                                       // 599\n     * reverses the map lookup so that we can look for specific keys                                          // 600\n     * to see what can and can't use keypress                                                                 // 601\n     *                                                                                                        // 602\n     * @return {Object}                                                                                       // 603\n     */                                                                                                       // 604\n    function _getReverseMap() {                                                                               // 605\n        if (!_REVERSE_MAP) {                                                                                  // 606\n            _REVERSE_MAP = {};                                                                                // 607\n            for (var key in _MAP) {                                                                           // 608\n                                                                                                              // 609\n                // pull out the numeric keypad from here cause keypress should                                // 610\n                // be able to detect the keys from the character                                              // 611\n                if (key > 95 && key < 112) {                                                                  // 612\n                    continue;                                                                                 // 613\n                }                                                                                             // 614\n                                                                                                              // 615\n                if (_MAP.hasOwnProperty(key)) {                                                               // 616\n                    _REVERSE_MAP[_MAP[key]] = key;                                                            // 617\n                }                                                                                             // 618\n            }                                                                                                 // 619\n        }                                                                                                     // 620\n        return _REVERSE_MAP;                                                                                  // 621\n    }                                                                                                         // 622\n                                                                                                              // 623\n    /**                                                                                                       // 624\n     * picks the best action based on the key combination                                                     // 625\n     *                                                                                                        // 626\n     * @param {string} key - character for key                                                                // 627\n     * @param {Array} modifiers                                                                               // 628\n     * @param {string=} action passed in                                                                      // 629\n     */                                                                                                       // 630\n    function _pickBestAction(key, modifiers, action) {                                                        // 631\n                                                                                                              // 632\n        // if no action was picked in we should try to pick the one                                           // 633\n        // that we think would work best for this key                                                         // 634\n        if (!action) {                                                                                        // 635\n            action = _getReverseMap()[key] ? 'keydown' : 'keypress';                                          // 636\n        }                                                                                                     // 637\n                                                                                                              // 638\n        // modifier keys don't work as expected with keypress,                                                // 639\n        // switch to keydown                                                                                  // 640\n        if (action == 'keypress' && modifiers.length) {                                                       // 641\n            action = 'keydown';                                                                               // 642\n        }                                                                                                     // 643\n                                                                                                              // 644\n        return action;                                                                                        // 645\n    }                                                                                                         // 646\n                                                                                                              // 647\n    /**                                                                                                       // 648\n     * binds a key sequence to an event                                                                       // 649\n     *                                                                                                        // 650\n     * @param {string} combo - combo specified in bind call                                                   // 651\n     * @param {Array} keys                                                                                    // 652\n     * @param {Function} callback                                                                             // 653\n     * @param {string=} action                                                                                // 654\n     * @returns void                                                                                          // 655\n     */                                                                                                       // 656\n    function _bindSequence(combo, keys, callback, action) {                                                   // 657\n                                                                                                              // 658\n        // start off by adding a sequence level record for this combination                                   // 659\n        // and setting the level to 0                                                                         // 660\n        _sequenceLevels[combo] = 0;                                                                           // 661\n                                                                                                              // 662\n        /**                                                                                                   // 663\n         * callback to increase the sequence level for this sequence and reset                                // 664\n         * all other sequences that were active                                                               // 665\n         *                                                                                                    // 666\n         * @param {string} nextAction                                                                         // 667\n         * @returns {Function}                                                                                // 668\n         */                                                                                                   // 669\n        function _increaseSequence(nextAction) {                                                              // 670\n            return function() {                                                                               // 671\n                _nextExpectedAction = nextAction;                                                             // 672\n                ++_sequenceLevels[combo];                                                                     // 673\n                _resetSequenceTimer();                                                                        // 674\n            };                                                                                                // 675\n        }                                                                                                     // 676\n                                                                                                              // 677\n        /**                                                                                                   // 678\n         * wraps the specified callback inside of another function in order                                   // 679\n         * to reset all sequence counters as soon as this sequence is done                                    // 680\n         *                                                                                                    // 681\n         * @param {Event} e                                                                                   // 682\n         * @returns void                                                                                      // 683\n         */                                                                                                   // 684\n        function _callbackAndReset(e) {                                                                       // 685\n            _fireCallback(callback, e, combo);                                                                // 686\n                                                                                                              // 687\n            // we should ignore the next key up if the action is key down                                     // 688\n            // or keypress.  this is so if you finish a sequence and                                          // 689\n            // release the key the final key will not trigger a keyup                                         // 690\n            if (action !== 'keyup') {                                                                         // 691\n                _ignoreNextKeyup = _characterFromEvent(e);                                                    // 692\n            }                                                                                                 // 693\n                                                                                                              // 694\n            // weird race condition if a sequence ends with the key                                           // 695\n            // another sequence begins with                                                                   // 696\n            setTimeout(_resetSequences, 10);                                                                  // 697\n        }                                                                                                     // 698\n                                                                                                              // 699\n        // loop through keys one at a time and bind the appropriate callback                                  // 700\n        // function.  for any key leading up to the final one it should                                       // 701\n        // increase the sequence. after the final, it should reset all sequences                              // 702\n        //                                                                                                    // 703\n        // if an action is specified in the original bind call then that will                                 // 704\n        // be used throughout.  otherwise we will pass the action that the                                    // 705\n        // next key in the sequence should match.  this allows a sequence                                     // 706\n        // to mix and match keypress and keydown events depending on which                                    // 707\n        // ones are better suited to the key provided                                                         // 708\n        for (var i = 0; i < keys.length; ++i) {                                                               // 709\n            var isFinal = i + 1 === keys.length;                                                              // 710\n            var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);\n            _bindSingle(keys[i], wrappedCallback, action, combo, i);                                          // 712\n        }                                                                                                     // 713\n    }                                                                                                         // 714\n                                                                                                              // 715\n    /**                                                                                                       // 716\n     * Converts from a string key combination to an array                                                     // 717\n     *                                                                                                        // 718\n     * @param  {string} combination like \"command+shift+l\"                                                    // 719\n     * @return {Array}                                                                                        // 720\n     */                                                                                                       // 721\n    function _keysFromString(combination) {                                                                   // 722\n        if (combination === '+') {                                                                            // 723\n            return ['+'];                                                                                     // 724\n        }                                                                                                     // 725\n                                                                                                              // 726\n        return combination.split('+');                                                                        // 727\n    }                                                                                                         // 728\n                                                                                                              // 729\n    /**                                                                                                       // 730\n     * Gets info for a specific key combination                                                               // 731\n     *                                                                                                        // 732\n     * @param  {string} combination key combination (\"command+s\" or \"a\" or \"*\")                               // 733\n     * @param  {string=} action                                                                               // 734\n     * @returns {Object}                                                                                      // 735\n     */                                                                                                       // 736\n    function _getKeyInfo(combination, action) {                                                               // 737\n        var keys,                                                                                             // 738\n            key,                                                                                              // 739\n            i,                                                                                                // 740\n            modifiers = [];                                                                                   // 741\n                                                                                                              // 742\n        // take the keys from this pattern and figure out what the actual                                     // 743\n        // pattern is all about                                                                               // 744\n        keys = _keysFromString(combination);                                                                  // 745\n                                                                                                              // 746\n        for (i = 0; i < keys.length; ++i) {                                                                   // 747\n            key = keys[i];                                                                                    // 748\n                                                                                                              // 749\n            // normalize key names                                                                            // 750\n            if (_SPECIAL_ALIASES[key]) {                                                                      // 751\n                key = _SPECIAL_ALIASES[key];                                                                  // 752\n            }                                                                                                 // 753\n                                                                                                              // 754\n            // if this is not a keypress event then we should                                                 // 755\n            // be smart about using shift keys                                                                // 756\n            // this will only work for US keyboards however                                                   // 757\n            if (action && action != 'keypress' && _SHIFT_MAP[key]) {                                          // 758\n                key = _SHIFT_MAP[key];                                                                        // 759\n                modifiers.push('shift');                                                                      // 760\n            }                                                                                                 // 761\n                                                                                                              // 762\n            // if this key is a modifier then add it to the list of modifiers                                 // 763\n            if (_isModifier(key)) {                                                                           // 764\n                modifiers.push(key);                                                                          // 765\n            }                                                                                                 // 766\n        }                                                                                                     // 767\n                                                                                                              // 768\n        // depending on what the key combination is                                                           // 769\n        // we will try to pick the best event for it                                                          // 770\n        action = _pickBestAction(key, modifiers, action);                                                     // 771\n                                                                                                              // 772\n        return {                                                                                              // 773\n            key: key,                                                                                         // 774\n            modifiers: modifiers,                                                                             // 775\n            action: action                                                                                    // 776\n        };                                                                                                    // 777\n    }                                                                                                         // 778\n                                                                                                              // 779\n    /**                                                                                                       // 780\n     * binds a single keyboard combination                                                                    // 781\n     *                                                                                                        // 782\n     * @param {string} combination                                                                            // 783\n     * @param {Function} callback                                                                             // 784\n     * @param {string=} action                                                                                // 785\n     * @param {string=} sequenceName - name of sequence if part of sequence                                   // 786\n     * @param {number=} level - what part of the sequence the command is                                      // 787\n     * @returns void                                                                                          // 788\n     */                                                                                                       // 789\n    function _bindSingle(combination, callback, action, sequenceName, level) {                                // 790\n                                                                                                              // 791\n        // store a direct mapped reference for use with Mousetrap.trigger                                     // 792\n        _directMap[combination + ':' + action] = callback;                                                    // 793\n                                                                                                              // 794\n        // make sure multiple spaces in a row become a single space                                           // 795\n        combination = combination.replace(/\\s+/g, ' ');                                                       // 796\n                                                                                                              // 797\n        var sequence = combination.split(' '),                                                                // 798\n            info;                                                                                             // 799\n                                                                                                              // 800\n        // if this pattern is a sequence of keys then run through this method                                 // 801\n        // to reprocess each pattern one key at a time                                                        // 802\n        if (sequence.length > 1) {                                                                            // 803\n            _bindSequence(combination, sequence, callback, action);                                           // 804\n            return;                                                                                           // 805\n        }                                                                                                     // 806\n                                                                                                              // 807\n        info = _getKeyInfo(combination, action);                                                              // 808\n                                                                                                              // 809\n        // make sure to initialize array if this is the first time                                            // 810\n        // a callback is added for this key                                                                   // 811\n        _callbacks[info.key] = _callbacks[info.key] || [];                                                    // 812\n                                                                                                              // 813\n        // remove an existing match if there is one                                                           // 814\n        _getMatches(info.key, info.modifiers, {type: info.action}, sequenceName, combination, level);         // 815\n                                                                                                              // 816\n        // add this call back to the array                                                                    // 817\n        // if it is a sequence put it at the beginning                                                        // 818\n        // if not put it at the end                                                                           // 819\n        //                                                                                                    // 820\n        // this is important because the way these are processed expects                                      // 821\n        // the sequence ones to come first                                                                    // 822\n        _callbacks[info.key][sequenceName ? 'unshift' : 'push']({                                             // 823\n            callback: callback,                                                                               // 824\n            modifiers: info.modifiers,                                                                        // 825\n            action: info.action,                                                                              // 826\n            seq: sequenceName,                                                                                // 827\n            level: level,                                                                                     // 828\n            combo: combination                                                                                // 829\n        });                                                                                                   // 830\n    }                                                                                                         // 831\n                                                                                                              // 832\n    /**                                                                                                       // 833\n     * binds multiple combinations to the same callback                                                       // 834\n     *                                                                                                        // 835\n     * @param {Array} combinations                                                                            // 836\n     * @param {Function} callback                                                                             // 837\n     * @param {string|undefined} action                                                                       // 838\n     * @returns void                                                                                          // 839\n     */                                                                                                       // 840\n    function _bindMultiple(combinations, callback, action) {                                                  // 841\n        for (var i = 0; i < combinations.length; ++i) {                                                       // 842\n            _bindSingle(combinations[i], callback, action);                                                   // 843\n        }                                                                                                     // 844\n    }                                                                                                         // 845\n                                                                                                              // 846\n    // start!                                                                                                 // 847\n    _addEvent(document, 'keypress', _handleKeyEvent);                                                         // 848\n    _addEvent(document, 'keydown', _handleKeyEvent);                                                          // 849\n    _addEvent(document, 'keyup', _handleKeyEvent);                                                            // 850\n                                                                                                              // 851\n    var Mousetrap = {                                                                                         // 852\n                                                                                                              // 853\n        /**                                                                                                   // 854\n         * binds an event to mousetrap                                                                        // 855\n         *                                                                                                    // 856\n         * can be a single key, a combination of keys separated with +,                                       // 857\n         * an array of keys, or a sequence of keys separated by spaces                                        // 858\n         *                                                                                                    // 859\n         * be sure to list the modifier keys first to make sure that the                                      // 860\n         * correct key ends up getting bound (the last key in the pattern)                                    // 861\n         *                                                                                                    // 862\n         * @param {string|Array} keys                                                                         // 863\n         * @param {Function} callback                                                                         // 864\n         * @param {string=} action - 'keypress', 'keydown', or 'keyup'                                        // 865\n         * @returns void                                                                                      // 866\n         */                                                                                                   // 867\n        bind: function(keys, callback, action) {                                                              // 868\n            keys = keys instanceof Array ? keys : [keys];                                                     // 869\n            _bindMultiple(keys, callback, action);                                                            // 870\n            return this;                                                                                      // 871\n        },                                                                                                    // 872\n                                                                                                              // 873\n        /**                                                                                                   // 874\n         * unbinds an event to mousetrap                                                                      // 875\n         *                                                                                                    // 876\n         * the unbinding sets the callback function of the specified key combo                                // 877\n         * to an empty function and deletes the corresponding key in the                                      // 878\n         * _directMap dict.                                                                                   // 879\n         *                                                                                                    // 880\n         * TODO: actually remove this from the _callbacks dictionary instead                                  // 881\n         * of binding an empty function                                                                       // 882\n         *                                                                                                    // 883\n         * the keycombo+action has to be exactly the same as                                                  // 884\n         * it was defined in the bind method                                                                  // 885\n         *                                                                                                    // 886\n         * @param {string|Array} keys                                                                         // 887\n         * @param {string} action                                                                             // 888\n         * @returns void                                                                                      // 889\n         */                                                                                                   // 890\n        unbind: function(keys, action) {                                                                      // 891\n            return Mousetrap.bind(keys, function() {}, action);                                               // 892\n        },                                                                                                    // 893\n                                                                                                              // 894\n        /**                                                                                                   // 895\n         * triggers an event that has already been bound                                                      // 896\n         *                                                                                                    // 897\n         * @param {string} keys                                                                               // 898\n         * @param {string=} action                                                                            // 899\n         * @returns void                                                                                      // 900\n         */                                                                                                   // 901\n        trigger: function(keys, action) {                                                                     // 902\n            if (_directMap[keys + ':' + action]) {                                                            // 903\n                _directMap[keys + ':' + action]({}, keys);                                                    // 904\n            }                                                                                                 // 905\n            return this;                                                                                      // 906\n        },                                                                                                    // 907\n                                                                                                              // 908\n        /**                                                                                                   // 909\n         * resets the library back to its initial state.  this is useful                                      // 910\n         * if you want to clear out the current keyboard shortcuts and bind                                   // 911\n         * new ones - for example if you switch to another page                                               // 912\n         *                                                                                                    // 913\n         * @returns void                                                                                      // 914\n         */                                                                                                   // 915\n        reset: function() {                                                                                   // 916\n            _callbacks = {};                                                                                  // 917\n            _directMap = {};                                                                                  // 918\n            return this;                                                                                      // 919\n        },                                                                                                    // 920\n                                                                                                              // 921\n       /**                                                                                                    // 922\n        * should we stop this event before firing off callbacks                                               // 923\n        *                                                                                                     // 924\n        * @param {Event} e                                                                                    // 925\n        * @param {Element} element                                                                            // 926\n        * @return {boolean}                                                                                   // 927\n        */                                                                                                    // 928\n        stopCallback: function(e, element) {                                                                  // 929\n                                                                                                              // 930\n            // if the element has the class \"mousetrap\" then no need to stop                                  // 931\n            if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {                                // 932\n                return false;                                                                                 // 933\n            }                                                                                                 // 934\n                                                                                                              // 935\n            // stop for input, select, and textarea                                                           // 936\n            return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;\n        },                                                                                                    // 938\n                                                                                                              // 939\n        /**                                                                                                   // 940\n         * exposes _handleKey publicly so it can be overwritten by extensions                                 // 941\n         */                                                                                                   // 942\n        handleKey: _handleKey                                                                                 // 943\n    };                                                                                                        // 944\n                                                                                                              // 945\n    // expose mousetrap to the global object                                                                  // 946\n    window.Mousetrap = Mousetrap;                                                                             // 947\n                                                                                                              // 948\n    // expose mousetrap as an AMD module                                                                      // 949\n    if (typeof define === 'function' && define.amd) {                                                         // 950\n        define(Mousetrap);                                                                                    // 951\n    }                                                                                                         // 952\n}) (window, document);                                                                                        // 953\n                                                                                                              // 954\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/mousetrap:mousetrap/meteor/export.js                                                              //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// expose Mousetrap to Meteor.js                                                                              // 1\nif (typeof Package !== 'undefined') {                                                                         // 2\n  /*global Mousetrap:true*/  // Meteor.js creates a file-scope global for exporting. This comment prevents a potential JSHint warning.\n  Mousetrap = window.Mousetrap;                                                                               // 4\n  delete window.Mousetrap;                                                                                    // 5\n}                                                                                                             // 6\n                                                                                                              // 7\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"mousetrap:mousetrap\", {\n  Mousetrap: Mousetrap\n});\n\n})();\n","servePath":"/packages/mousetrap_mousetrap.js"}]