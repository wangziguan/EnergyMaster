[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Template = Package['templating-runtime'].Template;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar HTML = Package.htmljs.HTML;\nvar Spacebars = Package.spacebars.Spacebars;\n\n/* Package-scope variables */\nvar Hooks;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"aldeed:template-extension\":{\"lib\":{\"hooks.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/aldeed_template-extension/lib/hooks.js                                                                  //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nHooks = {\n  global: {\n    created: [],\n    rendered: [],\n    destroyed: []\n  },\n  master: {\n    created: function () {\n      Hooks.runGlobal('created', this, arguments);\n    },\n    rendered: function () {\n      Hooks.runGlobal('rendered', this, arguments);\n    },\n    destroyed: function () {\n      Hooks.runGlobal('destroyed', this, arguments);\n    }\n  }\n};\n\nHooks.addGlobal = template => {\n  // For each hookType, define the hooks for this template.\n  // Since we might call this multiple times from startup code\n  // and other functions, make sure we do it only once.\n  // Doing it twice would create an infinite loop of self-calling\n  // hooks.\n  if (!template._hasTemplateExtensionMasterHooks) {\n    template.onCreated(Hooks.master.created);\n    template.onRendered(Hooks.master.rendered);\n    template.onDestroyed(Hooks.master.destroyed);\n    template._hasTemplateExtensionMasterHooks = true;\n  }\n};\n\nHooks.runGlobal = (type, template, args) => {\n  for (var _iterator = Hooks.global[type], _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    let hook = _ref;\n    hook.apply(template, args);\n  }\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-for-each.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/aldeed_template-extension/lib/template-for-each.js                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nTemplate.forEach = callback => {\n  // for some reason we get the \"body\" template twice when looping, so\n  // we track that and only call the callback once.\n  var alreadyDidBody = false;\n\n  for (var t in Template) {\n    if (Template.hasOwnProperty(t)) {\n      var tmpl = Template[t];\n\n      if (Blaze.isTemplate(tmpl)) {\n        let name = tmpl.viewName;\n\n        if (name === \"body\") {\n          if (!alreadyDidBody) {\n            alreadyDidBody = true;\n            callback(tmpl);\n          }\n        } else if (name !== 'Template.__dynamic' && name !== 'Template.__dynamicWithDataContext') {\n          callback(tmpl);\n        }\n      }\n    }\n  }\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-hooks.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/aldeed_template-extension/lib/template-hooks.js                                                         //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nTemplate.prototype.hooks = function (hooks) {\n  if (!hooks || typeof hooks !== \"object\") {\n    throw new Error(\"hooks argument must be an object with created, rendered, and/or destroyed properties, each set to a function\");\n  }\n\n  if (typeof hooks.created === 'function') this.onCreated(hooks.created);\n  if (typeof hooks.rendered === 'function') this.onRendered(hooks.rendered);\n  if (typeof hooks.destroyed === 'function') this.onDestroyed(hooks.destroyed);\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-global-hooks.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/aldeed_template-extension/lib/template-global-hooks.js                                                  //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n// Setup for multiple hooks support\n// We assume that no other code will be directly defining\n// a hook once the client has started.\nMeteor.startup(() => {\n  Template.forEach(template => {\n    Hooks.addGlobal(template);\n  });\n});\n\nTemplate.onCreated = hook => {\n  Hooks.global.created.push(hook);\n};\n\nTemplate.onRendered = hook => {\n  Hooks.global.rendered.push(hook);\n};\n\nTemplate.onDestroyed = hook => {\n  Hooks.global.destroyed.push(hook);\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-for-each-instance.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/aldeed_template-extension/lib/template-for-each-instance.js                                             //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nTemplate._renderedInstances = [];\nTemplate.onRendered(function () {\n  Template._renderedInstances.push(this);\n});\nTemplate.onDestroyed(function () {\n  var i = Template._renderedInstances.indexOf(this);\n\n  if (i > -1) Template._renderedInstances.splice(i, 1);\n});\n\nTemplate.forEachCurrentlyRenderedInstance = func => {\n  Template._renderedInstances.forEach(func);\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-inherits-events-from.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/aldeed_template-extension/lib/template-inherits-events-from.js                                          //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nTemplate.prototype.inheritsEventsFrom = function inheritsEventsFrom(otherTemplate) {\n  var self = this;\n  self.__eventMaps = self.__eventMaps || [];\n\n  function inheritEvents(template) {\n    // String template names can be provided and template object is looked up\n    if (typeof template === 'string') template = Template[template];\n    if (!template) return;\n    self.__eventMaps = self.__eventMaps.concat(template.__eventMaps);\n  } // Accept an array as otherTemplate argument\n\n\n  if (_.isArray(otherTemplate)) {\n    _.each(otherTemplate, inheritEvents);\n  } else {\n    //otherTemplate is a string\n    inheritEvents(otherTemplate);\n  }\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-inherits-helpers-from.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/aldeed_template-extension/lib/template-inherits-helpers-from.js                                         //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nTemplate.prototype.inheritsHelpersFrom = function inheritsHelpersFrom(otherTemplate) {\n  var self = this;\n\n  function inheritHelpers(template) {\n    // String template names can be provided and template object is looked up\n    if (typeof template === 'string') template = Template[template];\n    if (!template) return;\n    let inheritedHelpers = {};\n\n    _.each(template.__helpers, (helper, name) => {\n      if (name.charAt(0) === \" \") inheritedHelpers[name.slice(1)] = helper;\n    });\n\n    self.helpers(inheritedHelpers);\n  } // Accept an array as otherTemplate argument\n\n\n  if (_.isArray(otherTemplate)) {\n    _.each(otherTemplate, inheritHelpers);\n  } else {\n    //otherTemplate is a string\n    inheritHelpers(otherTemplate);\n  }\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-inherits-hooks-from.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/aldeed_template-extension/lib/template-inherits-hooks-from.js                                           //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nTemplate.prototype.inheritsHooksFrom = function inheritsHooksFrom(otherTemplate) {\n  var self = this;\n\n  function inheritHooks(template) {\n    // String template names can be provided and template object is looked up\n    if (typeof template === 'string') template = Template[template];\n    if (!template) return; // For this to work properly, need to ensure that we've defined\n    // the global hook hook for the other template already.\n\n    Hooks.addGlobal(template);\n\n    for (var _iterator = template._callbacks.created, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      let hook = _ref;\n      // Don't copy the master hook because every template already has it\n      if (hook === Hooks.master.created) continue;\n      self.onCreated(hook);\n    }\n\n    for (var _iterator2 = template._callbacks.rendered, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      let hook = _ref2;\n      // Don't copy the master hook because every template already has it\n      if (hook === Hooks.master.rendered) continue;\n      self.onRendered(hook);\n    }\n\n    for (var _iterator3 = template._callbacks.destroyed, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n      var _ref3;\n\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n\n      let hook = _ref3;\n      // Don't copy the master hook because every template already has it\n      if (hook === Hooks.master.destroyed) continue;\n      self.onDestroyed(hook);\n    }\n  } // Accept an array as otherTemplate argument\n\n\n  if (_.isArray(otherTemplate)) {\n    _.each(otherTemplate, inheritHooks);\n  } else {\n    //otherTemplate is a string\n    inheritHooks(otherTemplate);\n  }\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-register-helpers.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/aldeed_template-extension/lib/template-register-helpers.js                                              //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nTemplate.registerHelpers = helpers => {\n  if (!helpers) return;\n\n  for (let name in helpers) {\n    if (helpers.hasOwnProperty(name)) {\n      Template.registerHelper(name, helpers[name]);\n    }\n  }\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-replaces.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/aldeed_template-extension/lib/template-replaces.js                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nTemplate.prototype.replaces = function replaces(otherTemplate) {\n  var self = this;\n\n  function replaceRender(template) {\n    // String template names can be provided and template object is looked up\n    if (typeof template === 'string') template = Template[template];\n    if (!template) return;\n    template.renderFunction = self.renderFunction;\n  } // Accept an array as otherTemplate argument\n\n\n  if (_.isArray(otherTemplate)) {\n    _.each(otherTemplate, replaceRender);\n  } else {\n    replaceRender(otherTemplate);\n  }\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-clear-event-maps.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/aldeed_template-extension/lib/template-clear-event-maps.js                                              //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nTemplate.prototype.clearEventMaps = function clearEventMaps() {\n  this.__eventMaps = [];\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-copy-as.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/aldeed_template-extension/lib/template-copy-as.js                                                       //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nTemplate.prototype.copyAs = function copyAs(newTemplateName) {\n  var self = this;\n\n  function createNewTemplate(templateName) {\n    var newTemplate = Template[templateName] = new Template(\"Template.\".concat(templateName), self.renderFunction);\n    newTemplate.inheritsHelpersFrom(self);\n    newTemplate.inheritsEventsFrom(self);\n    newTemplate.inheritsHooksFrom(self);\n    return newTemplate;\n  } // Check if newTemplateName is an array\n\n\n  if (_.isArray(newTemplateName)) {\n    let result = [];\n\n    for (var _iterator = newTemplateName, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      let name = _ref;\n      result.push(createNewTemplate(name));\n    }\n\n    return result;\n  } else {\n    //newTemplateName is a string\n    return createNewTemplate(newTemplateName);\n  }\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-instance-parent.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/aldeed_template-extension/lib/template-instance-parent.js                                               //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n// Access parent template instance. \"height\" is the number of levels beyond the\n// current template instance to look. By default block helper template instances\n// are skipped, but if \"includeBlockHelpers\" is set to true, they are not.\n// See https://github.com/meteor/meteor/issues/3071\nBlaze.TemplateInstance.prototype.parent = function parent(height, includeBlockHelpers) {\n  // If height is null or undefined, we default to 1, the first parent.\n  if (height == null) height = 1;\n  var i = 0;\n  var template = this;\n\n  while (i < height && template) {\n    var view = parentView(template.view, includeBlockHelpers); // We skip contentBlock views which are injected by Meteor when using\n    // block helpers (in addition to block helper view). This matches more\n    // the visual structure of templates and not the internal implementation.\n\n    while (view && (!view.template || view.name === '(contentBlock)' || view.name === '(elseBlock)')) {\n      view = parentView(view, includeBlockHelpers);\n    }\n\n    if (!view) return null; // Body view has template field, but not templateInstance,\n    // which more or less signals that we reached the top.\n\n    template = typeof view.templateInstance === 'function' ? view.templateInstance() : null;\n    i++;\n  }\n\n  return template;\n};\n\nfunction parentView(view, includeBlockHelpers) {\n  if (includeBlockHelpers) return view.originalParentView || view.parentView;\n  return view.parentView;\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-instance-get.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/aldeed_template-extension/lib/template-instance-get.js                                                  //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n// Allow easy access to a template instance field when you do not know exactly\n// on which instance (this, or parent, or parent's parent, ...) a field is defined.\n// This allows easy restructuring of templates in HTML, moving things to included\n// templates without having to change everywhere in the code instance levels.\n// It also allows different structures of templates, when once template is included\n// at one level, and some other time at another. Levels do not matter anymore, just\n// that the field exists somewhere.\nBlaze.TemplateInstance.prototype.get = function get(fieldName) {\n  var template = this;\n\n  while (template) {\n    if (fieldName in template) return template[fieldName];\n    template = template.parent(1, true);\n  }\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-parent-data-function.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/aldeed_template-extension/lib/template-parent-data-function.js                                          //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n// Allow to specify a function to test parent data for at various\n// levels, instead of specifying a fixed number of levels to traverse.\nvar originalParentData = Blaze._parentData;\n\nBlaze._parentData = function (height, _functionWrapped) {\n  // If height is not a function, simply call original implementation.\n  if (typeof height !== 'function') return originalParentData(height, _functionWrapped);\n  var theWith = Blaze.getView('with');\n\n  var test = () => {\n    return height(theWith.dataVar.get());\n  };\n\n  while (theWith) {\n    if (Tracker.nonreactive(test)) break;\n    theWith = Blaze.getView(theWith, 'with');\n  } // _functionWrapped is internal and will not be\n  // specified with non numeric height, so we ignore it.\n\n\n  if (!theWith) return null; // This registers a Tracker dependency.\n\n  return theWith.dataVar.get();\n};\n\nTemplate.parentData = Blaze._parentData;\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/hooks.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-for-each.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-hooks.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-global-hooks.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-for-each-instance.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-inherits-events-from.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-inherits-helpers-from.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-inherits-hooks-from.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-register-helpers.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-replaces.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-clear-event-maps.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-copy-as.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-instance-parent.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-instance-get.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-parent-data-function.js\");\n\n/* Exports */\nPackage._define(\"aldeed:template-extension\");\n\n})();\n","servePath":"/packages/aldeed_template-extension.js","sourceMap":{"version":3,"sources":["packages/aldeed:template-extension/lib/hooks.js","packages/aldeed:template-extension/lib/template-for-each.js","packages/aldeed:template-extension/lib/template-hooks.js","packages/aldeed:template-extension/lib/template-global-hooks.js","packages/aldeed:template-extension/lib/template-for-each-instance.js","packages/aldeed:template-extension/lib/template-inherits-events-from.js","packages/aldeed:template-extension/lib/template-inherits-helpers-from.js","packages/aldeed:template-extension/lib/template-inherits-hooks-from.js","packages/aldeed:template-extension/lib/template-register-helpers.js","packages/aldeed:template-extension/lib/template-replaces.js","packages/aldeed:template-extension/lib/template-clear-event-maps.js","packages/aldeed:template-extension/lib/template-copy-as.js","packages/aldeed:template-extension/lib/template-instance-parent.js","packages/aldeed:template-extension/lib/template-instance-get.js","packages/aldeed:template-extension/lib/template-parent-data-function.js"],"names":["Hooks","global","created","rendered","destroyed","master","runGlobal","arguments","addGlobal","template","_hasTemplateExtensionMasterHooks","onCreated","onRendered","onDestroyed","type","args","hook","apply","Template","forEach","callback","alreadyDidBody","t","hasOwnProperty","tmpl","Blaze","isTemplate","name","viewName","prototype","hooks","Error","Meteor","startup","push","_renderedInstances","i","indexOf","splice","forEachCurrentlyRenderedInstance","func","inheritsEventsFrom","otherTemplate","self","__eventMaps","inheritEvents","concat","_","isArray","each","inheritsHelpersFrom","inheritHelpers","inheritedHelpers","__helpers","helper","charAt","slice","helpers","inheritsHooksFrom","inheritHooks","_callbacks","registerHelpers","registerHelper","replaces","replaceRender","renderFunction","clearEventMaps","copyAs","newTemplateName","createNewTemplate","templateName","newTemplate","result","TemplateInstance","parent","height","includeBlockHelpers","view","parentView","templateInstance","originalParentView","get","fieldName","originalParentData","_parentData","_functionWrapped","theWith","getView","test","dataVar","Tracker","nonreactive","parentData"],"mappings":"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","file":"/packages/aldeed_template-extension.js","sourcesContent":["Hooks = {\n  global: {\n    created: [],\n    rendered: [],\n    destroyed: []\n  },\n  master: {\n    created: function () {\n      Hooks.runGlobal('created', this, arguments);\n    },\n    rendered: function () {\n      Hooks.runGlobal('rendered', this, arguments);\n    },\n    destroyed: function () {\n      Hooks.runGlobal('destroyed', this, arguments);\n    }\n  }\n};\n\nHooks.addGlobal = (template) => {\n  // For each hookType, define the hooks for this template.\n  // Since we might call this multiple times from startup code\n  // and other functions, make sure we do it only once.\n  // Doing it twice would create an infinite loop of self-calling\n  // hooks.\n  if (!template._hasTemplateExtensionMasterHooks) {\n    template.onCreated(Hooks.master.created);\n    template.onRendered(Hooks.master.rendered);\n    template.onDestroyed(Hooks.master.destroyed);\n    \n    template._hasTemplateExtensionMasterHooks = true;\n  }\n};\n\nHooks.runGlobal = (type, template, args) => {\n  for (let hook of Hooks.global[type]) {\n    hook.apply(template, args);\n  }\n};\n","Template.forEach = (callback) => {\n  // for some reason we get the \"body\" template twice when looping, so\n  // we track that and only call the callback once.\n  var alreadyDidBody = false;\n  for (var t in Template) {\n    if (Template.hasOwnProperty(t)) {\n      var tmpl = Template[t];\n      if (Blaze.isTemplate(tmpl)) {\n        let name = tmpl.viewName;\n        if (name === \"body\") {\n          if (!alreadyDidBody) {\n            alreadyDidBody = true;\n            callback(tmpl);\n          }\n        } else if (name !== 'Template.__dynamic' && name !== 'Template.__dynamicWithDataContext') {\n          callback(tmpl);\n        }\n      }\n    }\n  }\n};\n","Template.prototype.hooks = function (hooks) {\n  if (!hooks || typeof hooks !== \"object\") {\n    throw new Error(\"hooks argument must be an object with created, rendered, and/or destroyed properties, each set to a function\");\n  }\n  \n  if (typeof hooks.created === 'function') this.onCreated(hooks.created);\n  if (typeof hooks.rendered === 'function') this.onRendered(hooks.rendered);\n  if (typeof hooks.destroyed === 'function') this.onDestroyed(hooks.destroyed);\n};\n","// Setup for multiple hooks support\n// We assume that no other code will be directly defining\n// a hook once the client has started.\nMeteor.startup(() => {\n  Template.forEach((template) => {\n    Hooks.addGlobal(template);\n  });\n});\n\nTemplate.onCreated = (hook) => {\n  Hooks.global.created.push(hook);\n};\n\nTemplate.onRendered = (hook) => {\n  Hooks.global.rendered.push(hook);\n};\n\nTemplate.onDestroyed = (hook) => {\n  Hooks.global.destroyed.push(hook);\n};\n","Template._renderedInstances = [];\n\nTemplate.onRendered(function () {\n  Template._renderedInstances.push(this);\n});\n\nTemplate.onDestroyed(function () {\n  var i = Template._renderedInstances.indexOf(this);\n  if (i > -1) Template._renderedInstances.splice(i, 1);\n});\n\nTemplate.forEachCurrentlyRenderedInstance = (func) => {\n  Template._renderedInstances.forEach(func);\n};\n","Template.prototype.inheritsEventsFrom = function inheritsEventsFrom(otherTemplate) {\n  var self = this;\n  \n  self.__eventMaps = self.__eventMaps || [];\n\n  function inheritEvents(template) {\n    // String template names can be provided and template object is looked up\n    if (typeof template === 'string') template = Template[template];\n    if (!template) return;\n    \n    self.__eventMaps = self.__eventMaps.concat(template.__eventMaps);\n  }\n\n  // Accept an array as otherTemplate argument\n  if (_.isArray(otherTemplate)) {\n    _.each(otherTemplate, inheritEvents);\n  } else { //otherTemplate is a string\n    inheritEvents(otherTemplate);\n  }\n};\n","Template.prototype.inheritsHelpersFrom = function inheritsHelpersFrom(otherTemplate) {\n  var self = this;\n  \n  function inheritHelpers(template) {\n    // String template names can be provided and template object is looked up\n    if (typeof template === 'string') template = Template[template];\n    if (!template) return;\n    \n    let inheritedHelpers = {};\n    _.each(template.__helpers, (helper, name) => {\n      if (name.charAt(0) === \" \") inheritedHelpers[name.slice(1)] = helper;\n    });\n\n    self.helpers(inheritedHelpers);\n  }\n\n  // Accept an array as otherTemplate argument\n  if (_.isArray(otherTemplate)) {\n    _.each(otherTemplate, inheritHelpers);\n  } else { //otherTemplate is a string\n    inheritHelpers(otherTemplate);\n  }\n};\n","Template.prototype.inheritsHooksFrom = function inheritsHooksFrom(otherTemplate) {\n  var self = this;\n  \n  function inheritHooks(template) {\n    // String template names can be provided and template object is looked up\n    if (typeof template === 'string') template = Template[template];\n    if (!template) return;\n    \n    // For this to work properly, need to ensure that we've defined\n    // the global hook hook for the other template already.\n    Hooks.addGlobal(template);\n    \n    for (let hook of template._callbacks.created) {\n      // Don't copy the master hook because every template already has it\n      if (hook === Hooks.master.created) continue;\n      self.onCreated(hook);\n    }\n    \n    for (let hook of template._callbacks.rendered) {\n      // Don't copy the master hook because every template already has it\n      if (hook === Hooks.master.rendered) continue;\n      self.onRendered(hook);\n    }\n    \n    for (let hook of template._callbacks.destroyed) {\n      // Don't copy the master hook because every template already has it\n      if (hook === Hooks.master.destroyed) continue;\n      self.onDestroyed(hook);\n    }\n  }\n\n  // Accept an array as otherTemplate argument\n  if (_.isArray(otherTemplate)) {\n    _.each(otherTemplate, inheritHooks);\n  } else { //otherTemplate is a string\n    inheritHooks(otherTemplate);\n  }\n};\n","Template.registerHelpers = (helpers) => {\n  if (!helpers) return;\n\n  for (let name in helpers) {\n    if (helpers.hasOwnProperty(name)) {\n      Template.registerHelper(name, helpers[name]);\n    }\n  }\n};\n","Template.prototype.replaces = function replaces(otherTemplate) {\n  var self = this;\n\n  function replaceRender(template) {\n    // String template names can be provided and template object is looked up\n    if (typeof template === 'string') template = Template[template];\n    if (!template) return;\n\n    template.renderFunction = self.renderFunction;\n  }\n\n  // Accept an array as otherTemplate argument\n  if (_.isArray(otherTemplate)) {\n    _.each(otherTemplate, replaceRender);\n  } else {\n    replaceRender(otherTemplate);\n  }\n};\n","Template.prototype.clearEventMaps = function clearEventMaps() {\n  this.__eventMaps = [];\n};\n","Template.prototype.copyAs = function copyAs(newTemplateName) {\n  var self = this;\n\n  function createNewTemplate(templateName) {\n    var newTemplate =\n    Template[templateName] = new Template(`Template.${templateName}`, self.renderFunction);\n\n    newTemplate.inheritsHelpersFrom(self);\n    newTemplate.inheritsEventsFrom(self);\n    newTemplate.inheritsHooksFrom(self);\n\n    return newTemplate;\n  }\n\n  // Check if newTemplateName is an array\n  if (_.isArray(newTemplateName)) {\n    let result = [];\n    for (let name of newTemplateName) {\n      result.push(createNewTemplate(name));\n    }\n    return result;\n  } else { //newTemplateName is a string\n    return createNewTemplate(newTemplateName);\n  }\n};\n","// Access parent template instance. \"height\" is the number of levels beyond the\n// current template instance to look. By default block helper template instances\n// are skipped, but if \"includeBlockHelpers\" is set to true, they are not.\n// See https://github.com/meteor/meteor/issues/3071\nBlaze.TemplateInstance.prototype.parent = function parent(height, includeBlockHelpers) {\n  // If height is null or undefined, we default to 1, the first parent.\n  if (height == null) height = 1;\n\n  var i = 0;\n  var template = this;\n  while (i < height && template) {\n    var view = parentView(template.view, includeBlockHelpers);\n    // We skip contentBlock views which are injected by Meteor when using\n    // block helpers (in addition to block helper view). This matches more\n    // the visual structure of templates and not the internal implementation.\n    while (view && (!view.template || view.name === '(contentBlock)' || view.name === '(elseBlock)')) {\n      view = parentView(view, includeBlockHelpers);\n    }\n    if (!view) return null;\n    // Body view has template field, but not templateInstance,\n    // which more or less signals that we reached the top.\n    template = typeof view.templateInstance === 'function' ? view.templateInstance() : null;\n    i++;\n  }\n  return template;\n};\n\nfunction parentView(view, includeBlockHelpers) {\n  if (includeBlockHelpers) return view.originalParentView || view.parentView;\n  return view.parentView;\n}\n","// Allow easy access to a template instance field when you do not know exactly\n// on which instance (this, or parent, or parent's parent, ...) a field is defined.\n// This allows easy restructuring of templates in HTML, moving things to included\n// templates without having to change everywhere in the code instance levels.\n// It also allows different structures of templates, when once template is included\n// at one level, and some other time at another. Levels do not matter anymore, just\n// that the field exists somewhere.\nBlaze.TemplateInstance.prototype.get = function get(fieldName) {\n  var template = this;\n\n  while (template) {\n    if (fieldName in template) return template[fieldName];\n    template = template.parent(1, true);\n  }\n};\n","// Allow to specify a function to test parent data for at various\n// levels, instead of specifying a fixed number of levels to traverse.\nvar originalParentData = Blaze._parentData;\nBlaze._parentData = function (height, _functionWrapped) {\n  // If height is not a function, simply call original implementation.\n  if (typeof height !== 'function') return originalParentData(height, _functionWrapped);\n\n  var theWith = Blaze.getView('with');\n  var test = () => { return height(theWith.dataVar.get()); };\n  while (theWith) {\n    if (Tracker.nonreactive(test)) break;\n    theWith = Blaze.getView(theWith, 'with');\n  }\n\n  // _functionWrapped is internal and will not be\n  // specified with non numeric height, so we ignore it.\n  if (!theWith) return null;\n  // This registers a Tracker dependency.\n  return theWith.dataVar.get();\n};\n\nTemplate.parentData = Blaze._parentData;\n"]}}]