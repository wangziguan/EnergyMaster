[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar __coffeescriptShare, ActiveRoute;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/zimme_active-route/lib/activeroute.coffee.js                                                           //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar checkParams, checkRouteOrPath, checkRouterPackages, errorMessages, fr, ir, test;             \n\nfr = ir = null;\n\ncheckRouteOrPath = function(arg) {\n  var error;\n  try {\n    return check(arg, Match.OneOf(RegExp, String));\n  } catch (_error) {\n    error = _error;\n    throw new Error(errorMessages.invalidRouteNameArgument);\n  }\n};\n\ncheckParams = function(arg) {\n  var error;\n  try {\n    return check(arg, Object);\n  } catch (_error) {\n    error = _error;\n    throw new Error(errorMessages.invalidRouteParamsArgument);\n  }\n};\n\ncheckRouterPackages = function() {\n  var ref, ref1;\n  fr = (ref = (ref1 = Package['kadira:flow-router']) != null ? ref1 : Package['meteorhacks:flow-router']) != null ? ref : Package['kadira:flow-router-ssr'];\n  ir = Package['iron:router'];\n  if (!(ir || fr)) {\n    throw new Error(errorMessages.noSupportedRouter);\n  }\n};\n\nerrorMessages = {\n  noSupportedRouter: 'No supported router installed. Please install ' + 'iron:router or meteorhacks:flow-router.',\n  invalidRouteNameArgument: 'Invalid argument, must be String or RegExp.',\n  invalidRouteParamsArgument: 'Invalid arguemnt, must be Object.'\n};\n\nshare.config = new ReactiveDict('activeRouteConfig');\n\nshare.config.setDefault({\n  activeClass: 'active',\n  caseSensitive: true,\n  disabledClass: 'disabled'\n});\n\ntest = function(value, pattern) {\n  var result;\n  if (!value) {\n    return false;\n  }\n  if (Match.test(pattern, RegExp)) {\n    result = value.search(pattern);\n    result = result > -1;\n  } else if (Match.test(pattern, String)) {\n    if (share.config.equals('caseSensitive', false)) {\n      value = value.toLowerCase();\n      pattern = pattern.toLowerCase();\n    }\n    result = value === pattern;\n  }\n  return result != null ? result : result = false;\n};\n\nActiveRoute = {\n  config: function() {\n    return this.configure.apply(this, arguments);\n  },\n  configure: function(options) {\n    if (Meteor.isServer) {\n      return;\n    }\n    share.config.set(options);\n  },\n  name: function(routeName, routeParams) {\n    var controller, currentPath, currentRouteName, path, ref, ref1;\n    if (routeParams == null) {\n      routeParams = {};\n    }\n    checkRouterPackages();\n    if (Meteor.isServer && !Package['kadira:flow-router-ssr']) {\n      return;\n    }\n    checkRouteOrPath(routeName);\n    checkParams(routeParams);\n    if (ir) {\n      if (!_.isEmpty(routeParams) && Match.test(routeName, String)) {\n        controller = ir.Router.current();\n        if (controller != null ? controller.route : void 0) {\n          currentPath = controller != null ? controller.location.get().path : void 0;\n        }\n        path = ir.Router.path(routeName, routeParams);\n      } else {\n        currentRouteName = (ref = ir.Router.current()) != null ? (ref1 = ref.route) != null ? typeof ref1.getName === \"function\" ? ref1.getName() : void 0 : void 0 : void 0;\n      }\n    }\n    if (fr) {\n      if (!_.isEmpty(routeParams) && Match.test(routeName, String)) {\n        fr.FlowRouter.watchPathChange();\n        if (currentPath == null) {\n          currentPath = fr.FlowRouter.current().path;\n        }\n        if (path == null) {\n          path = fr.FlowRouter.path(routeName, routeParams);\n        }\n      } else {\n        if (currentRouteName == null) {\n          currentRouteName = fr.FlowRouter.getRouteName();\n        }\n      }\n    }\n    return test(currentPath || currentRouteName, path || routeName);\n  },\n  path: function(path) {\n    var controller, currentPath;\n    checkRouterPackages();\n    if (Meteor.isServer) {\n      return;\n    }\n    checkRouteOrPath(path);\n    if (ir) {\n      controller = ir.Router.current();\n      if (controller != null ? controller.route : void 0) {\n        currentPath = controller != null ? controller.location.get().path : void 0;\n      }\n    }\n    if (fr) {\n      fr.FlowRouter.watchPathChange();\n      if (currentPath == null) {\n        currentPath = fr.FlowRouter.current().path;\n      }\n    }\n    return test(currentPath, path);\n  }\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/zimme_active-route/client/helpers.coffee.js                                                            //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar Spacebars, Template, func, helpers, isActive, name,\n  hasProp = {}.hasOwnProperty;\n\nif (!(Package.templating && Package.spacebars)) {\n  return;\n}\n\nTemplate = Package.templating.Template;\n\nSpacebars = Package.spacebars.Spacebars;\n\nisActive = function(type, inverse) {\n  var helperName;\n  if (inverse == null) {\n    inverse = false;\n  }\n  helperName = 'is';\n  if (inverse) {\n    helperName += 'Not';\n  }\n  helperName += \"Active\" + type;\n  return function(options, attributes) {\n    var className, isPath, name, path, pattern, ref, regex, result, t;\n    if (options == null) {\n      options = {};\n    }\n    if (attributes == null) {\n      attributes = {};\n    }\n    if (Match.test(options, Spacebars.kw)) {\n      options = options.hash;\n    }\n    if (Match.test(attributes, Spacebars.kw)) {\n      attributes = attributes.hash;\n    }\n    if (Match.test(options, String)) {\n      if (share.config.equals('regex', true)) {\n        options = {\n          regex: options\n        };\n      } else if (type === 'Path') {\n        options = {\n          path: options\n        };\n      } else {\n        options = {\n          name: options\n        };\n      }\n    }\n    options = _.defaults(attributes, options);\n    pattern = Match.ObjectIncluding({\n      \"class\": Match.Optional(String),\n      className: Match.Optional(String),\n      regex: Match.Optional(Match.OneOf(RegExp, String)),\n      name: Match.Optional(String),\n      path: Match.Optional(String)\n    });\n    check(options, pattern);\n    regex = options.regex, name = options.name, path = options.path;\n    className = (ref = options[\"class\"]) != null ? ref : options.className;\n    if (type === 'Path') {\n      name = null;\n    } else {\n      path = null;\n    }\n    if (!(regex || name || path)) {\n      t = type === 'Route' ? 'name' : type;\n      t = t.toLowerCase();\n      console.error((\"Invalid argument, \" + helperName + \" takes \\\"\" + t + \"\\\", \") + (t + \"=\\\"\" + t + \"\\\" or regex=\\\"regex\\\"\"));\n      return false;\n    }\n    if (Match.test(regex, String)) {\n      if (share.config.equals('caseSensitive', false)) {\n        regex = new RegExp(regex, 'i');\n      } else {\n        regex = new RegExp(regex);\n      }\n    }\n    if (regex == null) {\n      regex = name || path;\n    }\n    if (inverse) {\n      if (className == null) {\n        className = share.config.get('disabledClass');\n      }\n    } else {\n      if (className == null) {\n        className = share.config.get('activeClass');\n      }\n    }\n    if (type === 'Path') {\n      isPath = true;\n    }\n    if (isPath) {\n      result = ActiveRoute.path(regex);\n    } else {\n      options = _.defaults(attributes, attributes.data);\n      result = ActiveRoute.name(regex, _.omit(options, ['class', 'className', 'data', 'regex', 'name', 'path']));\n    }\n    if (inverse) {\n      result = !result;\n    }\n    if (result) {\n      return className;\n    } else {\n      return false;\n    }\n  };\n};\n\nhelpers = {\n  isActiveRoute: isActive('Route'),\n  isActivePath: isActive('Path'),\n  isNotActiveRoute: isActive('Route', true),\n  isNotActivePath: isActive('Path', true)\n};\n\nfor (name in helpers) {\n  if (!hasProp.call(helpers, name)) continue;\n  func = helpers[name];\n  Template.registerHelper(name, func);\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"zimme:active-route\", {\n  ActiveRoute: ActiveRoute\n});\n\n})();\n","servePath":"/packages/zimme_active-route.js","sourceMap":{"version":3,"sources":["/packages/zimme_active-route/lib/activeroute.coffee","/packages/zimme_active-route/client/helpers.coffee"],"names":[],"mappings":"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","file":"/packages/zimme_active-route.js","sourcesContent":["fr = ir = null\n\ncheckRouteOrPath = (arg) ->\n  try\n    check arg, Match.OneOf RegExp, String\n  catch error\n    throw new Error errorMessages.invalidRouteNameArgument\n\ncheckParams = (arg) ->\n  try\n    check arg, Object\n  catch error\n    throw new Error errorMessages.invalidRouteParamsArgument\n\ncheckRouterPackages = ->\n  fr = Package['kadira:flow-router'] ? Package['meteorhacks:flow-router'] ? Package['kadira:flow-router-ssr']\n  ir = Package['iron:router']\n  throw new Error errorMessages.noSupportedRouter unless ir or fr\n\nerrorMessages =\n  noSupportedRouter:\n    'No supported router installed. Please install ' +\n    'iron:router or meteorhacks:flow-router.'\n\n  invalidRouteNameArgument: 'Invalid argument, must be String or RegExp.'\n  invalidRouteParamsArgument: 'Invalid arguemnt, must be Object.'\n\nshare.config = new ReactiveDict 'activeRouteConfig'\nshare.config.setDefault\n  activeClass: 'active'\n  caseSensitive: true\n  disabledClass: 'disabled'\n\ntest = (value, pattern) ->\n  return false unless value\n\n  if Match.test pattern, RegExp\n    result = value.search pattern\n    result = result > -1\n\n  else if Match.test pattern, String\n    if share.config.equals 'caseSensitive', false\n      value = value.toLowerCase()\n      pattern = pattern.toLowerCase()\n\n    result = value is pattern\n\n  result ?= false\n\nActiveRoute =\n\n  config: ->\n    @configure.apply @, arguments\n\n  configure: (options) ->\n    return if Meteor.isServer\n\n    share.config.set options\n    return\n\n  name: (routeName, routeParams = {}) ->\n    checkRouterPackages()\n\n    return if (Meteor.isServer && !Package['kadira:flow-router-ssr'])\n\n    checkRouteOrPath routeName\n    checkParams routeParams\n\n    if ir\n      if not _.isEmpty(routeParams) and Match.test routeName, String\n        controller = ir.Router.current()\n        currentPath = controller?.location.get().path if controller?.route\n        path = ir.Router.path routeName, routeParams\n\n      else\n        currentRouteName = ir.Router.current()?.route?.getName?()\n\n    if fr\n      if not _.isEmpty(routeParams) and Match.test routeName, String\n        fr.FlowRouter.watchPathChange()\n        currentPath ?= fr.FlowRouter.current().path\n        path ?= fr.FlowRouter.path routeName, routeParams\n\n      else\n        currentRouteName ?= fr.FlowRouter.getRouteName()\n\n    test currentPath or currentRouteName, path or routeName\n\n  path: (path) ->\n    checkRouterPackages()\n\n    return if Meteor.isServer\n\n    checkRouteOrPath path\n\n    if ir\n      controller = ir.Router.current()\n      currentPath = controller?.location.get().path if controller?.route\n\n    if fr\n      fr.FlowRouter.watchPathChange()\n      currentPath ?= fr.FlowRouter.current().path\n\n    test currentPath, path\n","return unless Package.templating and Package.spacebars\n\nTemplate = Package.templating.Template\nSpacebars = Package.spacebars.Spacebars\n\nisActive = (type, inverse = false) ->\n  helperName = 'is'\n  helperName += 'Not' if inverse\n  helperName += \"Active#{type}\"\n\n  (options = {}, attributes = {}) ->\n    if Match.test options, Spacebars.kw\n      options = options.hash\n\n    if Match.test attributes, Spacebars.kw\n      attributes = attributes.hash\n\n    if Match.test options, String\n      if share.config.equals 'regex', true\n        options =\n          regex: options\n\n      else if type is 'Path'\n        options =\n          path: options\n\n      else\n        options =\n          name: options\n\n    options = _.defaults attributes, options\n\n    pattern = Match.ObjectIncluding\n      class: Match.Optional String\n      className: Match.Optional String\n      regex: Match.Optional Match.OneOf RegExp, String\n      name: Match.Optional String\n      path: Match.Optional String\n\n    check options, pattern\n\n    {regex, name, path} = options\n\n    className = options.class ? options.className\n\n    if type is 'Path'\n      name = null\n\n    else\n      path = null\n\n    unless regex or name or path\n      t = if type is 'Route' then 'name' else type\n      t = t.toLowerCase()\n      console.error \"Invalid argument, #{helperName} takes \\\"#{t}\\\", \" +\n        \"#{t}=\\\"#{t}\\\" or regex=\\\"regex\\\"\"\n      return false\n\n    if Match.test regex, String\n      if share.config.equals 'caseSensitive', false\n        regex = new RegExp regex, 'i'\n\n      else\n        regex = new RegExp regex\n\n    regex ?= name or path\n\n    if inverse\n      className ?= share.config.get 'disabledClass'\n    else\n      className ?= share.config.get 'activeClass'\n\n    isPath = true if type is 'Path'\n\n    if isPath\n      result = ActiveRoute.path regex\n\n    else\n      options = _.defaults attributes, attributes.data\n      result = ActiveRoute.name regex, _.omit options, [\n        'class', 'className', 'data'\n        'regex', 'name', 'path'\n      ]\n\n    result = not result if inverse\n\n    if result then className else false\n\nhelpers =\n  isActiveRoute: isActive 'Route'\n\n  isActivePath: isActive 'Path'\n\n  isNotActiveRoute: isActive 'Route', true\n\n  isNotActivePath: isActive 'Path', true\n\nTemplate.registerHelper name, func for own name, func of helpers\n"]}}]