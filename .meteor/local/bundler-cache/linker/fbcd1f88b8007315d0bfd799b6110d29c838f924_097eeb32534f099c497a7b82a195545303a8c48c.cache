[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Collection2 = Package['aldeed:collection2-core'].Collection2;\nvar _ = Package.underscore._;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nvar MongoObject = Package['aldeed:simple-schema'].MongoObject;\nvar Mongo = Package.mongo.Mongo;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"aldeed:schema-index\":{\"lib\":{\"indexing.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/aldeed_schema-index/lib/indexing.js                                                                     //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions({\n  index: Match.Optional(Match.OneOf(Number, String, Boolean)),\n  unique: Match.Optional(Boolean),\n  sparse: Match.Optional(Boolean)\n}); // Define validation error messages (legacy)\n\nif (!SimpleSchema.version || SimpleSchema.version < 2) {\n  SimpleSchema.messages({\n    notUnique: '[label] must be unique'\n  });\n}\n\nif (Meteor.isServer) {\n  Collection2.on('schema.attached', function (collection, ss) {\n    // Define validation error messages\n    if (ss.version >= 2) {\n      ss.messageBox.messages({\n        notUnique: '{{label}} must be unique'\n      });\n    }\n\n    function ensureIndex(index, indexName, unique, sparse) {\n      Meteor.startup(function () {\n        collection._collection._ensureIndex(index, {\n          background: true,\n          name: indexName,\n          unique: unique,\n          sparse: sparse\n        });\n      });\n    }\n\n    function dropIndex(indexName) {\n      Meteor.startup(function () {\n        try {\n          collection._collection._dropIndex(indexName);\n        } catch (err) {// no index with that name, which is what we want\n        }\n      });\n    }\n\n    const propName = ss.version === 2 ? 'mergedSchema' : 'schema'; // Loop over fields definitions and ensure collection indexes (server side only)\n\n    _.each(ss[propName](), function (definition, fieldName) {\n      if ('index' in definition || definition.unique === true) {\n        var index = {},\n            indexValue; // If they specified `unique: true` but not `index`,\n        // we assume `index: 1` to set up the unique index in mongo\n\n        if ('index' in definition) {\n          indexValue = definition.index;\n          if (indexValue === true) indexValue = 1;\n        } else {\n          indexValue = 1;\n        }\n\n        var indexName = 'c2_' + fieldName; // In the index object, we want object array keys without the \".$\" piece\n\n        var idxFieldName = fieldName.replace(/\\.\\$\\./g, \".\");\n        index[idxFieldName] = indexValue;\n        var unique = !!definition.unique && (indexValue === 1 || indexValue === -1);\n        var sparse = definition.sparse || false; // If unique and optional, force sparse to prevent errors\n\n        if (!sparse && unique && definition.optional) sparse = true;\n\n        if (indexValue === false) {\n          dropIndex(indexName);\n        } else {\n          ensureIndex(index, indexName, unique, sparse);\n        }\n      }\n    });\n  });\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nrequire(\"/node_modules/meteor/aldeed:schema-index/lib/indexing.js\");\n\n/* Exports */\nPackage._define(\"aldeed:schema-index\");\n\n})();\n","servePath":"/packages/aldeed_schema-index.js","sourceMap":{"version":3,"sources":["packages/aldeed:schema-index/lib/indexing.js"],"names":["SimpleSchema","extendOptions","index","Match","Optional","OneOf","Number","String","Boolean","unique","sparse","version","messages","notUnique","Meteor","isServer","Collection2","on","collection","ss","messageBox","ensureIndex","indexName","startup","_collection","_ensureIndex","background","name","dropIndex","_dropIndex","err","propName","_","each","definition","fieldName","indexValue","idxFieldName","replace","optional"],"mappings":"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","file":"/packages/aldeed_schema-index.js","sourcesContent":["// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions({\n  index: Match.Optional(Match.OneOf(Number, String, Boolean)),\n  unique: Match.Optional(Boolean),\n  sparse: Match.Optional(Boolean),\n});\n\n// Define validation error messages (legacy)\nif (!SimpleSchema.version || SimpleSchema.version < 2) {\n  SimpleSchema.messages({\n    notUnique: '[label] must be unique',\n  });\n}\n\nif (Meteor.isServer) {\n  Collection2.on('schema.attached', function (collection, ss) {\n    // Define validation error messages\n    if (ss.version >= 2) {\n      ss.messageBox.messages({\n        notUnique: '{{label}} must be unique',\n      });\n    }\n\n    function ensureIndex(index, indexName, unique, sparse) {\n      Meteor.startup(function () {\n        collection._collection._ensureIndex(index, {\n          background: true,\n          name: indexName,\n          unique: unique,\n          sparse: sparse\n        });\n      });\n    }\n\n    function dropIndex(indexName) {\n      Meteor.startup(function () {\n        try {\n          collection._collection._dropIndex(indexName);\n        } catch (err) {\n          // no index with that name, which is what we want\n        }\n      });\n    }\n\n    const propName = ss.version === 2 ? 'mergedSchema' : 'schema';\n\n    // Loop over fields definitions and ensure collection indexes (server side only)\n    _.each(ss[propName](), function(definition, fieldName) {\n      if ('index' in definition || definition.unique === true) {\n        var index = {}, indexValue;\n        // If they specified `unique: true` but not `index`,\n        // we assume `index: 1` to set up the unique index in mongo\n        if ('index' in definition) {\n          indexValue = definition.index;\n          if (indexValue === true) indexValue = 1;\n        } else {\n          indexValue = 1;\n        }\n        var indexName = 'c2_' + fieldName;\n        // In the index object, we want object array keys without the \".$\" piece\n        var idxFieldName = fieldName.replace(/\\.\\$\\./g, \".\");\n        index[idxFieldName] = indexValue;\n        var unique = !!definition.unique && (indexValue === 1 || indexValue === -1);\n        var sparse = definition.sparse || false;\n\n        // If unique and optional, force sparse to prevent errors\n        if (!sparse && unique && definition.optional) sparse = true;\n\n        if (indexValue === false) {\n          dropIndex(indexName);\n        } else {\n          ensureIndex(index, indexName, unique, sparse);\n        }\n      }\n    });\n  });\n}"]}}]