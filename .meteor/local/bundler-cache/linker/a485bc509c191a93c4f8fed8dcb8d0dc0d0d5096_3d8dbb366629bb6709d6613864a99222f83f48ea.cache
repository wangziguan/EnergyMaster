[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar _ = Package.underscore._;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar Tabular;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"aldeed:tabular\":{\"server\":{\"main.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/aldeed_tabular/server/main.js                                                                          //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet check, Match;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 1);\n\nlet _;\n\nmodule.link(\"meteor/underscore\", {\n  _(v) {\n    _ = v;\n  }\n\n}, 2);\nlet Tabular;\nmodule.link(\"../common/Tabular\", {\n  default(v) {\n    Tabular = v;\n  }\n\n}, 3);\n\n/*\n * These are the two publications used by TabularTable.\n *\n * The genericPub one can be overridden by supplying a `pub`\n * property with a different publication name. This publication\n * is given only the list of ids and requested fields. You may\n * want to override it if you need to publish documents from\n * related collections along with the table collection documents.\n *\n * The getInfo one runs first and handles all the complex logic\n * required by this package, so that you don't have to duplicate\n * this logic when overriding the genericPub function.\n *\n * Having two publications also allows fine-grained control of\n * reactivity on the client.\n */\nMeteor.publish('tabular_genericPub', function (tableName, ids, fields) {\n  check(tableName, String);\n  check(ids, Array);\n  check(fields, Match.Optional(Object));\n  const table = Tabular.tablesByName[tableName];\n\n  if (!table) {\n    // We throw an error in the other pub, so no need to throw one here\n    this.ready();\n    return;\n  } // Check security. We call this in both publications.\n\n\n  if (typeof table.allow === 'function' && !table.allow(this.userId, fields)) {\n    this.ready();\n    return;\n  } // Check security for fields. We call this only in this publication\n\n\n  if (typeof table.allowFields === 'function' && !table.allowFields(this.userId, fields)) {\n    this.ready();\n    return;\n  }\n\n  return table.collection.find({\n    _id: {\n      $in: ids\n    }\n  }, {\n    fields: fields\n  });\n});\nMeteor.publish('tabular_getInfo', function (tableName, selector, sort, skip, limit) {\n  check(tableName, String);\n  check(selector, Match.Optional(Match.OneOf(Object, null)));\n  check(sort, Match.Optional(Match.OneOf(Array, null)));\n  check(skip, Number);\n  check(limit, Match.Optional(Match.OneOf(Number, null)));\n  const table = Tabular.tablesByName[tableName];\n\n  if (!table) {\n    throw new Error(`No TabularTable defined with the name \"${tableName}\". Make sure you are defining your TabularTable in common code.`);\n  } // Check security. We call this in both publications.\n  // Even though we're only publishing _ids and counts\n  // from this function, with sensitive data, there is\n  // a chance someone could do a query and learn something\n  // just based on whether a result is found or not.\n\n\n  if (typeof table.allow === 'function' && !table.allow(this.userId)) {\n    this.ready();\n    return;\n  }\n\n  selector = selector || {}; // Allow the user to modify the selector before we use it\n\n  if (typeof table.changeSelector === 'function') {\n    selector = table.changeSelector(selector, this.userId);\n  } // Apply the server side selector specified in the tabular\n  // table constructor. Both must be met, so we join\n  // them using $and, allowing both selectors to have\n  // the same keys.\n\n\n  if (typeof table.selector === 'function') {\n    const tableSelector = table.selector(this.userId);\n\n    if (_.isEmpty(selector)) {\n      selector = tableSelector;\n    } else {\n      selector = {\n        $and: [tableSelector, selector]\n      };\n    }\n  }\n\n  const findOptions = {\n    skip: skip,\n    fields: {\n      _id: 1\n    }\n  }; // `limit` may be `null`\n\n  if (limit > 0) {\n    findOptions.limit = limit;\n  } // `sort` may be `null`\n\n\n  if (_.isArray(sort)) {\n    findOptions.sort = sort;\n  }\n\n  const filteredCursor = table.collection.find(selector, findOptions);\n  let filteredRecordIds = filteredCursor.map(doc => doc._id); // If we are not going to count for real, in order to improve performance, then we will fake\n  // the count to ensure the Next button is always available.\n\n  const fakeCount = filteredRecordIds.length + skip + 1;\n  const countCursor = table.collection.find(selector, {\n    fields: {\n      _id: 1\n    }\n  });\n  let recordReady = false;\n\n  let updateRecords = () => {\n    let currentCount;\n\n    if (!table.skipCount) {\n      if (typeof table.alternativeCount === 'function') {\n        currentCount = table.alternativeCount(selector);\n      } else {\n        currentCount = countCursor.count();\n      }\n    } // From https://datatables.net/manual/server-side\n    // recordsTotal: Total records, before filtering (i.e. the total number of records in the database)\n    // recordsFiltered: Total records, after filtering (i.e. the total number of records after filtering has been applied - not just the number of records being returned for this page of data).\n\n\n    const record = {\n      ids: filteredRecordIds,\n      // count() will give us the updated total count\n      // every time. It does not take the find options\n      // limit into account.\n      recordsTotal: table.skipCount ? fakeCount : currentCount,\n      recordsFiltered: table.skipCount ? fakeCount : currentCount\n    };\n\n    if (recordReady) {\n      //console.log('changed', tableName, record);\n      this.changed('tabular_records', tableName, record);\n    } else {\n      //console.log('added', tableName, record);\n      this.added('tabular_records', tableName, record);\n      recordReady = true;\n    }\n  };\n\n  if (table.throttleRefresh) {\n    // Why Meteor.bindEnvironment? See https://github.com/aldeed/meteor-tabular/issues/278#issuecomment-217318112\n    updateRecords = _.throttle(Meteor.bindEnvironment(updateRecords), table.throttleRefresh);\n  }\n\n  updateRecords();\n  this.ready(); // Handle docs being added or removed from the result set.\n\n  let initializing = true;\n  const handle = filteredCursor.observeChanges({\n    added: function (id) {\n      if (initializing) return; //console.log('ADDED');\n\n      filteredRecordIds.push(id);\n      updateRecords();\n    },\n    removed: function (id) {\n      //console.log('REMOVED');\n      // _.findWhere is used to support Mongo ObjectIDs\n      filteredRecordIds = _.without(filteredRecordIds, _.findWhere(filteredRecordIds, id));\n      updateRecords();\n    }\n  });\n  initializing = false; // It is too inefficient to use an observe without any limits to track count perfectly\n  // accurately when, for example, the selector is {} and there are a million documents.\n  // Instead we will update the count every 10 seconds, in addition to whenever the limited\n  // result set changes.\n\n  const interval = Meteor.setInterval(updateRecords, 10000); // Stop observing the cursors when client unsubs.\n  // Stopping a subscription automatically takes\n  // care of sending the client any removed messages.\n\n  this.onStop(() => {\n    Meteor.clearInterval(interval);\n    handle.stop();\n  });\n});\nmodule.exportDefault(Tabular);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"common\":{\"Tabular.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/aldeed_tabular/common/Tabular.js                                                                       //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nconst Tabular = {};\nTabular.tablesByName = {};\nTabular.Table = class {\n  constructor(options) {\n    if (!options) throw new Error('Tabular.Table options argument is required');\n    if (!options.name) throw new Error('Tabular.Table options must specify name');\n    if (!options.columns) throw new Error('Tabular.Table options must specify columns');\n\n    if (!(options.collection instanceof Mongo.Collection || options.collection instanceof Mongo.constructor // Fix: error if `collection: Meteor.users`\n    )) {\n      throw new Error('Tabular.Table options must specify collection');\n    }\n\n    this.name = options.name;\n    this.collection = options.collection;\n    this.pub = options.pub || 'tabular_genericPub'; // By default we use core `Meteor.subscribe`, but you can pass\n    // a subscription manager like `sub: new SubsManager({cacheLimit: 20, expireIn: 3})`\n\n    this.sub = options.sub || Meteor;\n    this.onUnload = options.onUnload;\n    this.allow = options.allow;\n    this.allowFields = options.allowFields;\n    this.changeSelector = options.changeSelector;\n    this.throttleRefresh = options.throttleRefresh;\n    this.alternativeCount = options.alternativeCount;\n    this.skipCount = options.skipCount;\n\n    if (_.isArray(options.extraFields)) {\n      const fields = {};\n\n      _.each(options.extraFields, fieldName => {\n        fields[fieldName] = 1;\n      });\n\n      this.extraFields = fields;\n    }\n\n    this.selector = options.selector;\n    this.options = _.omit(options, 'collection', 'pub', 'sub', 'onUnload', 'allow', 'allowFields', 'changeSelector', 'throttleRefresh', 'extraFields', 'alternativeCount', 'skipCount', 'name', 'selector');\n    Tabular.tablesByName[this.name] = this;\n  }\n\n};\nmodule.exportDefault(Tabular);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/aldeed:tabular/server/main.js\");\n\n/* Exports */\nPackage._define(\"aldeed:tabular\", exports, {\n  Tabular: Tabular\n});\n\n})();\n","servePath":"/packages/aldeed_tabular.js","sourceMap":{"version":3,"sources":["packages/aldeed:tabular/server/main.js","packages/aldeed:tabular/common/Tabular.js"],"names":["Meteor","module","link","v","check","Match","_","Tabular","default","publish","tableName","ids","fields","String","Array","Optional","Object","table","tablesByName","ready","allow","userId","allowFields","collection","find","_id","$in","selector","sort","skip","limit","OneOf","Number","Error","changeSelector","tableSelector","isEmpty","$and","findOptions","isArray","filteredCursor","filteredRecordIds","map","doc","fakeCount","length","countCursor","recordReady","updateRecords","currentCount","skipCount","alternativeCount","count","record","recordsTotal","recordsFiltered","changed","added","throttleRefresh","throttle","bindEnvironment","initializing","handle","observeChanges","id","push","removed","without","findWhere","interval","setInterval","onStop","clearInterval","stop","exportDefault","Mongo","Table","constructor","options","name","columns","Collection","pub","sub","onUnload","extraFields","each","fieldName","omit"],"mappings":"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","file":"/packages/aldeed_tabular.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { check, Match } from 'meteor/check';\nimport { _ } from 'meteor/underscore';\nimport Tabular from '../common/Tabular';\n\n/*\n * These are the two publications used by TabularTable.\n *\n * The genericPub one can be overridden by supplying a `pub`\n * property with a different publication name. This publication\n * is given only the list of ids and requested fields. You may\n * want to override it if you need to publish documents from\n * related collections along with the table collection documents.\n *\n * The getInfo one runs first and handles all the complex logic\n * required by this package, so that you don't have to duplicate\n * this logic when overriding the genericPub function.\n *\n * Having two publications also allows fine-grained control of\n * reactivity on the client.\n */\n\nMeteor.publish('tabular_genericPub', function (tableName, ids, fields) {\n  check(tableName, String);\n  check(ids, Array);\n  check(fields, Match.Optional(Object));\n\n  const table = Tabular.tablesByName[tableName];\n  if (!table) {\n    // We throw an error in the other pub, so no need to throw one here\n    this.ready();\n    return;\n  }\n\n  // Check security. We call this in both publications.\n  if (typeof table.allow === 'function' && !table.allow(this.userId, fields)) {\n    this.ready();\n    return;\n  }\n\n  // Check security for fields. We call this only in this publication\n  if (typeof table.allowFields === 'function' && !table.allowFields(this.userId, fields)) {\n    this.ready();\n    return;\n  }\n\n  return table.collection.find({_id: {$in: ids}}, {fields: fields});\n});\n\nMeteor.publish('tabular_getInfo', function (tableName, selector, sort, skip, limit) {\n  check(tableName, String);\n  check(selector, Match.Optional(Match.OneOf(Object, null)));\n  check(sort, Match.Optional(Match.OneOf(Array, null)));\n  check(skip, Number);\n  check(limit, Match.Optional(Match.OneOf(Number, null)));\n\n  const table = Tabular.tablesByName[tableName];\n  if (!table) {\n    throw new Error(`No TabularTable defined with the name \"${tableName}\". Make sure you are defining your TabularTable in common code.`);\n  }\n\n  // Check security. We call this in both publications.\n  // Even though we're only publishing _ids and counts\n  // from this function, with sensitive data, there is\n  // a chance someone could do a query and learn something\n  // just based on whether a result is found or not.\n  if (typeof table.allow === 'function' && !table.allow(this.userId)) {\n    this.ready();\n    return;\n  }\n\n  selector = selector || {};\n\n  // Allow the user to modify the selector before we use it\n  if (typeof table.changeSelector === 'function') {\n    selector = table.changeSelector(selector, this.userId);\n  }\n\n  // Apply the server side selector specified in the tabular\n  // table constructor. Both must be met, so we join\n  // them using $and, allowing both selectors to have\n  // the same keys.\n  if (typeof table.selector === 'function') {\n    const tableSelector = table.selector(this.userId);\n    if (_.isEmpty(selector)) {\n      selector = tableSelector;\n    } else {\n      selector = {$and: [tableSelector, selector]};\n    }\n  }\n\n  const findOptions = {\n    skip: skip,\n    fields: {_id: 1}\n  };\n\n  // `limit` may be `null`\n  if (limit > 0) {\n    findOptions.limit = limit;\n  }\n\n  // `sort` may be `null`\n  if (_.isArray(sort)) {\n    findOptions.sort = sort;\n  }\n\n  const filteredCursor = table.collection.find(selector, findOptions);\n\n  let filteredRecordIds = filteredCursor.map(doc => doc._id);\n\n  // If we are not going to count for real, in order to improve performance, then we will fake\n  // the count to ensure the Next button is always available.\n  const fakeCount = filteredRecordIds.length + skip + 1;\n\n  const countCursor = table.collection.find(selector, {fields: {_id: 1}});\n\n  let recordReady = false;\n  let updateRecords = () => {\n    let currentCount;\n    if (!table.skipCount) {\n      if (typeof table.alternativeCount === 'function') {\n        currentCount = table.alternativeCount(selector);\n      } else {\n        currentCount = countCursor.count();\n      }\n    }\n\n    // From https://datatables.net/manual/server-side\n    // recordsTotal: Total records, before filtering (i.e. the total number of records in the database)\n    // recordsFiltered: Total records, after filtering (i.e. the total number of records after filtering has been applied - not just the number of records being returned for this page of data).\n\n    const record = {\n      ids: filteredRecordIds,\n      // count() will give us the updated total count\n      // every time. It does not take the find options\n      // limit into account.\n      recordsTotal: table.skipCount ? fakeCount : currentCount,\n      recordsFiltered: table.skipCount ? fakeCount : currentCount\n    };\n\n    if (recordReady) {\n      //console.log('changed', tableName, record);\n      this.changed('tabular_records', tableName, record);\n    } else {\n      //console.log('added', tableName, record);\n      this.added('tabular_records', tableName, record);\n      recordReady = true;\n    }\n  }\n\n  if (table.throttleRefresh) {\n    // Why Meteor.bindEnvironment? See https://github.com/aldeed/meteor-tabular/issues/278#issuecomment-217318112\n    updateRecords = _.throttle(Meteor.bindEnvironment(updateRecords), table.throttleRefresh);\n  }\n\n  updateRecords();\n\n  this.ready();\n\n  // Handle docs being added or removed from the result set.\n  let initializing = true;\n  const handle = filteredCursor.observeChanges({\n    added: function (id) {\n      if (initializing) return;\n\n      //console.log('ADDED');\n      filteredRecordIds.push(id);\n      updateRecords();\n    },\n    removed: function (id) {\n      //console.log('REMOVED');\n      // _.findWhere is used to support Mongo ObjectIDs\n      filteredRecordIds = _.without(filteredRecordIds, _.findWhere(filteredRecordIds, id));\n      updateRecords();\n    }\n  });\n  initializing = false;\n\n  // It is too inefficient to use an observe without any limits to track count perfectly\n  // accurately when, for example, the selector is {} and there are a million documents.\n  // Instead we will update the count every 10 seconds, in addition to whenever the limited\n  // result set changes.\n  const interval = Meteor.setInterval(updateRecords, 10000);\n\n  // Stop observing the cursors when client unsubs.\n  // Stopping a subscription automatically takes\n  // care of sending the client any removed messages.\n  this.onStop(() => {\n    Meteor.clearInterval(interval);\n    handle.stop();\n  });\n});\n\nexport default Tabular;\n","import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\n\nconst Tabular = {};\n\nTabular.tablesByName = {};\n\nTabular.Table = class {\n  constructor(options) {\n    if (!options) throw new Error('Tabular.Table options argument is required');\n    if (!options.name) throw new Error('Tabular.Table options must specify name');\n    if (!options.columns) throw new Error('Tabular.Table options must specify columns');\n    if (!(options.collection instanceof Mongo.Collection\n      || options.collection instanceof Mongo.constructor // Fix: error if `collection: Meteor.users`\n    )) {\n      throw new Error('Tabular.Table options must specify collection');\n    }\n\n    this.name = options.name;\n    this.collection = options.collection;\n\n    this.pub = options.pub || 'tabular_genericPub';\n\n    // By default we use core `Meteor.subscribe`, but you can pass\n    // a subscription manager like `sub: new SubsManager({cacheLimit: 20, expireIn: 3})`\n    this.sub = options.sub || Meteor;\n\n    this.onUnload = options.onUnload;\n    this.allow = options.allow;\n    this.allowFields = options.allowFields;\n    this.changeSelector = options.changeSelector;\n    this.throttleRefresh = options.throttleRefresh;\n    this.alternativeCount = options.alternativeCount;\n    this.skipCount = options.skipCount;\n\n    if (_.isArray(options.extraFields)) {\n      const fields = {};\n      _.each(options.extraFields, fieldName => {\n        fields[fieldName] = 1;\n      });\n      this.extraFields = fields;\n    }\n\n    this.selector = options.selector;\n\n    this.options = _.omit(\n      options,\n      'collection',\n      'pub',\n      'sub',\n      'onUnload',\n      'allow',\n      'allowFields',\n      'changeSelector',\n      'throttleRefresh',\n      'extraFields',\n      'alternativeCount',\n      'skipCount',\n      'name',\n      'selector'\n    );\n\n    Tabular.tablesByName[this.name] = this;\n  }\n}\n\nexport default Tabular;\n"]}}]