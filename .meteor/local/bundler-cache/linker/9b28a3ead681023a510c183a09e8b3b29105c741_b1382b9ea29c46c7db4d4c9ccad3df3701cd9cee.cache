[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Router = Package['iron:router'].Router;\nvar RouteController = Package['iron:router'].RouteController;\nvar _ = Package.underscore._;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Roles = Package['alanning:roles'].Roles;\nvar Helpers = Package['raix:handlebar-helpers'].Helpers;\nvar moment = Package['momentjs:moment'].moment;\nvar Tabular = Package['aldeed:tabular'].Tabular;\nvar ActiveRoute = Package['zimme:active-route'].ActiveRoute;\nvar Email = Package.email.Email;\nvar EmailInternals = Package.email.EmailInternals;\nvar Iron = Package['iron:core'].Iron;\nvar SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nvar MongoObject = Package['aldeed:simple-schema'].MongoObject;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\n\n/* Package-scope variables */\nvar __coffeescriptShare, AdminDashboard;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/wangziguan_admin/lib/both/AdminDashboard.coffee.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n                   \n\nAdminDashboard = {\n  schemas: {},\n  sidebarItems: [],\n  collectionItems: [],\n  alertSuccess: function(message) {\n    return Session.set('adminSuccess', message);\n  },\n  alertFailure: function(message) {\n    return Session.set('adminError', message);\n  },\n  checkAdmin: function() {\n    if (!Roles.userIsInRole(Meteor.userId(), ['admin'])) {\n      Meteor.call('adminCheckAdmin');\n      if (typeof (typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.nonAdminRedirectRoute : void 0) === \"string\") {\n        Router.go(AdminConfig.nonAdminRedirectRoute);\n      }\n    }\n    if (typeof this.next === 'function') {\n      return this.next();\n    }\n  },\n  adminRoutes: ['adminDashboard', 'adminDashboardUsersNew', 'adminDashboardUsersEdit', 'adminDashboardView', 'adminDashboardNew', 'adminDashboardEdit'],\n  collectionLabel: function(collection) {\n    var ref;\n    if (collection === 'Users') {\n      return 'Users';\n    } else if ((collection != null) && typeof ((ref = AdminConfig.collections[collection]) != null ? ref.label : void 0) === 'string') {\n      return AdminConfig.collections[collection].label;\n    } else {\n      return Session.get('admin_collection_name');\n    }\n  },\n  addSidebarItem: function(title, url, options) {\n    var item;\n    item = {\n      title: title\n    };\n    if (_.isObject(url) && typeof options === 'undefined') {\n      item.options = url;\n    } else {\n      item.url = url;\n      item.options = options;\n    }\n    return this.sidebarItems.push(item);\n  },\n  extendSidebarItem: function(title, urls) {\n    var existing;\n    if (_.isObject(urls)) {\n      urls = [urls];\n    }\n    existing = _.find(this.sidebarItems, function(item) {\n      return item.title === title;\n    });\n    if (existing) {\n      return existing.options.urls = _.union(existing.options.urls, urls);\n    }\n  },\n  addCollectionItem: function(fn) {\n    return this.collectionItems.push(fn);\n  },\n  path: function(s) {\n    var path;\n    path = '/admin';\n    if (typeof s === 'string' && s.length > 0) {\n      path += (s[0] === '/' ? '' : '/') + s;\n    }\n    return path;\n  }\n};\n\nAdminDashboard.schemas.newUser = new SimpleSchema({\n  email: {\n    type: String,\n    label: \"Email address\"\n  },\n  password: {\n    type: String,\n    label: 'Password'\n  },\n  sendPassword: {\n    type: Boolean,\n    label: 'Send this user their password by email',\n    optional: true\n  }\n});\n\nAdminDashboard.schemas.sendResetPasswordEmail = new SimpleSchema({\n  _id: {\n    type: String\n  }\n});\n\nAdminDashboard.schemas.changePassword = new SimpleSchema({\n  _id: {\n    type: String\n  },\n  password: {\n    type: String\n  }\n});\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/wangziguan_admin/lib/both/router.coffee.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nthis.AdminController = RouteController.extend({\n  layoutTemplate: 'AdminLayout',\n  waitOn: function() {\n    return [Meteor.subscribe('adminUsers'), Meteor.subscribe('adminUser'), Meteor.subscribe('adminCollectionsCount')];\n  },\n  onBeforeAction: function() {\n    Session.set('adminSuccess', null);\n    Session.set('adminError', null);\n    Session.set('admin_title', '');\n    Session.set('admin_subtitle', '');\n    Session.set('admin_collection_page', null);\n    Session.set('admin_collection_name', null);\n    Session.set('admin_id', null);\n    Session.set('admin_doc', null);\n    if (!Roles.userIsInRole(Meteor.userId(), ['admin'])) {\n      Meteor.call('adminCheckAdmin');\n      if (typeof (typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.nonAdminRedirectRoute : void 0) === 'string') {\n        Router.go(AdminConfig.nonAdminRedirectRoute);\n      }\n    }\n    return this.next();\n  }\n});\n\nRouter.route(\"adminDashboard\", {\n  path: \"/admin\",\n  template: \"AdminDashboard\",\n  controller: \"AdminController\",\n  action: function() {\n    return this.render();\n  },\n  onAfterAction: function() {\n    Session.set('admin_title', '总览');\n    Session.set('admin_collection_name', '');\n    return Session.set('admin_collection_page', '');\n  }\n});\n\nRouter.route(\"adminDashboardUsersView\", {\n  path: \"/admin/Users\",\n  template: \"AdminDashboardView\",\n  controller: \"AdminController\",\n  action: function() {\n    return this.render();\n  },\n  data: function() {\n    return {\n      admin_table: AdminTables.Users\n    };\n  },\n  onAfterAction: function() {\n    Session.set('admin_title', '账号管理');\n    Session.set('admin_subtitle', '');\n    return Session.set('admin_collection_name', 'Users');\n  }\n});\n\nRouter.route(\"adminDashboardUsersNew\", {\n  path: \"/admin/Users/new\",\n  template: \"AdminDashboardUsersNew\",\n  controller: 'AdminController',\n  action: function() {\n    return this.render();\n  },\n  onAfterAction: function() {\n    Session.set('admin_title', '账号管理');\n    Session.set('admin_subtitle', '创建新用户');\n    Session.set('admin_collection_page', '');\n    return Session.set('admin_collection_name', 'Users');\n  }\n});\n\nRouter.route(\"adminDashboardUsersEdit\", {\n  path: \"/admin/Users/:_id/edit\",\n  template: \"AdminDashboardUsersEdit\",\n  controller: \"AdminController\",\n  data: function() {\n    return {\n      user: Meteor.users.find(this.params._id).fetch(),\n      roles: Roles.getRolesForUser(this.params._id),\n      otherRoles: _.difference(_.map(Meteor.roles.find().fetch(), function(role) {\n        return role.name;\n      }), Roles.getRolesForUser(this.params._id))\n    };\n  },\n  action: function() {\n    return this.render();\n  },\n  onAfterAction: function() {\n    Session.set('admin_title', '账号管理');\n    Session.set('admin_subtitle', '编辑用户 ' + this.params._id);\n    Session.set('admin_collection_page', '');\n    Session.set('admin_collection_name', 'Users');\n    Session.set('admin_id', this.params._id);\n    return Session.set('admin_doc', Meteor.users.findOne({\n      _id: this.params._id\n    }));\n  }\n});\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/wangziguan_admin/lib/both/utils.coffee.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nthis.adminCollectionObject = function(collection) {\n  if (typeof AdminConfig.collections[collection] !== 'undefined' && typeof AdminConfig.collections[collection].collectionObject !== 'undefined') {\n    return AdminConfig.collections[collection].collectionObject;\n  } else {\n    return lookup(collection);\n  }\n};\n\nthis.adminCallback = function(name, args, callback) {\n  var ref1, ref2, stop;\n  stop = false;\n  if (typeof (typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? (ref1 = AdminConfig.callbacks) != null ? ref1[name] : void 0 : void 0) === 'function') {\n    stop = (ref2 = AdminConfig.callbacks)[name].apply(ref2, args) === false;\n  }\n  if (typeof callback === 'function') {\n    if (!stop) {\n      return callback.apply(null, args);\n    }\n  }\n};\n\nthis.lookup = function(obj, root, required) {\n  var arr, ref;\n  if (required == null) {\n    required = true;\n  }\n  if (typeof root === 'undefined') {\n    root = Meteor.isServer ? global : window;\n  }\n  if (typeof obj === 'string') {\n    ref = root;\n    arr = obj.split('.');\n    while (arr.length && (ref = ref[arr.shift()])) {\n      continue;\n    }\n    if (!ref && required) {\n      throw new Error(obj + ' is not in the ' + root.toString());\n    } else {\n      return ref;\n    }\n  }\n  return obj;\n};\n\nthis.parseID = function(id) {\n  if (typeof id === 'string') {\n    if (id.indexOf(\"ObjectID\") > -1) {\n      return new Mongo.ObjectID(id.slice(id.indexOf('\"') + 1, id.lastIndexOf('\"')));\n    } else {\n      return id;\n    }\n  } else {\n    return id;\n  }\n};\n\nthis.parseIDs = function(ids) {\n  return _.map(ids, function(id) {\n    return parseID(id);\n  });\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/wangziguan_admin/lib/both/startup.coffee.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar adminCreateRouteEdit, adminCreateRouteEditOptions, adminCreateRouteNew, adminCreateRouteNewOptions, adminCreateRouteView, adminCreateRouteViewOptions, adminCreateRoutes, adminCreateTables, adminDelButton, adminEditButton, adminEditDelButtons, adminPublishTables, adminTablePubName, adminTablesDom, defaultColumns;\n\nthis.AdminTables = {};\n\nadminTablesDom = '<\"box\"<\"box-header\"<\"box-toolbar\"<\"pull-left\"<lf>><\"pull-right\"p>>><\"box-body\"t>><r>';\n\nadminEditButton = {\n  data: '_id',\n  title: 'Edit',\n  createdCell: function(node, cellData, rowData) {\n    return $(node).html(Blaze.toHTMLWithData(Template.adminEditBtn, {\n      _id: cellData\n    }));\n  },\n  width: '40px',\n  orderable: false\n};\n\nadminDelButton = {\n  data: '_id',\n  title: 'Delete',\n  createdCell: function(node, cellData, rowData) {\n    return $(node).html(Blaze.toHTMLWithData(Template.adminDeleteBtn, {\n      _id: cellData\n    }));\n  },\n  width: '40px',\n  orderable: false\n};\n\nadminEditDelButtons = [adminEditButton, adminDelButton];\n\ndefaultColumns = function() {\n  return [\n    {\n      data: '_id',\n      title: 'ID'\n    }\n  ];\n};\n\nadminTablePubName = function(collection) {\n  return \"admin_tabular_\" + collection;\n};\n\nadminCreateTables = function(collections) {\n  return _.each(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0, function(collection, name) {\n    var columns;\n    _.defaults(collection, {\n      showEditColumn: true,\n      showDelColumn: true,\n      showInSideBar: true\n    });\n    columns = _.map(collection.tableColumns, function(column) {\n      var createdCell;\n      if (column.template) {\n        createdCell = function(node, cellData, rowData) {\n          $(node).html('');\n          return Blaze.renderWithData(Template[column.template], {\n            value: cellData,\n            doc: rowData\n          }, node);\n        };\n      }\n      return {\n        data: column.name,\n        title: column.label,\n        createdCell: createdCell\n      };\n    });\n    if (columns.length === 0) {\n      columns = defaultColumns();\n    }\n    if (collection.showEditColumn) {\n      columns.push(adminEditButton);\n    }\n    if (collection.showDelColumn) {\n      columns.push(adminDelButton);\n    }\n    return AdminTables[name] = new Tabular.Table({\n      name: name,\n      collection: adminCollectionObject(name),\n      pub: collection.children && adminTablePubName(name),\n      sub: collection.sub,\n      columns: columns,\n      extraFields: collection.extraFields,\n      dom: adminTablesDom,\n      selector: collection.selector || function() {\n        return {};\n      }\n    });\n  });\n};\n\nadminCreateRoutes = function(collections) {\n  _.each(collections, adminCreateRouteView);\n  _.each(collections, adminCreateRouteNew);\n  return _.each(collections, adminCreateRouteEdit);\n};\n\nadminCreateRouteView = function(collection, collectionName) {\n  return Router.route(\"adminDashboard\" + collectionName + \"View\", adminCreateRouteViewOptions(collection, collectionName));\n};\n\nadminCreateRouteViewOptions = function(collection, collectionName) {\n  var options, ref;\n  options = {\n    path: \"/admin/\" + collectionName,\n    template: \"AdminDashboardViewWrapper\",\n    controller: \"AdminController\",\n    data: function() {\n      return {\n        admin_table: AdminTables[collectionName]\n      };\n    },\n    action: function() {\n      return this.render();\n    },\n    onAfterAction: function() {\n      var ref, ref1;\n      Session.set('admin_title', collectionName);\n      Session.set('admin_subtitle', 'View');\n      Session.set('admin_collection_name', collectionName);\n      return (ref = collection.routes) != null ? (ref1 = ref.view) != null ? ref1.onAfterAction : void 0 : void 0;\n    }\n  };\n  return _.defaults(options, (ref = collection.routes) != null ? ref.view : void 0);\n};\n\nadminCreateRouteNew = function(collection, collectionName) {\n  return Router.route(\"adminDashboard\" + collectionName + \"New\", adminCreateRouteNewOptions(collection, collectionName));\n};\n\nadminCreateRouteNewOptions = function(collection, collectionName) {\n  var options, ref;\n  options = {\n    path: \"/admin/\" + collectionName + \"/new\",\n    template: \"AdminDashboardNew\",\n    controller: \"AdminController\",\n    action: function() {\n      return this.render();\n    },\n    onAfterAction: function() {\n      var ref, ref1;\n      Session.set('admin_title', AdminDashboard.collectionLabel(collectionName));\n      Session.set('admin_subtitle', 'Create new');\n      Session.set('admin_collection_page', 'new');\n      Session.set('admin_collection_name', collectionName);\n      return (ref = collection.routes) != null ? (ref1 = ref[\"new\"]) != null ? ref1.onAfterAction : void 0 : void 0;\n    },\n    data: function() {\n      return {\n        admin_collection: adminCollectionObject(collectionName)\n      };\n    }\n  };\n  return _.defaults(options, (ref = collection.routes) != null ? ref[\"new\"] : void 0);\n};\n\nadminCreateRouteEdit = function(collection, collectionName) {\n  return Router.route(\"adminDashboard\" + collectionName + \"Edit\", adminCreateRouteEditOptions(collection, collectionName));\n};\n\nadminCreateRouteEditOptions = function(collection, collectionName) {\n  var options, ref;\n  options = {\n    path: \"/admin/\" + collectionName + \"/:_id/edit\",\n    template: \"AdminDashboardEdit\",\n    controller: \"AdminController\",\n    waitOn: function() {\n      var ref, ref1;\n      Meteor.subscribe('adminCollectionDoc', collectionName, parseID(this.params._id));\n      return (ref = collection.routes) != null ? (ref1 = ref.edit) != null ? ref1.waitOn : void 0 : void 0;\n    },\n    action: function() {\n      return this.render();\n    },\n    onAfterAction: function() {\n      var ref, ref1;\n      Session.set('admin_title', AdminDashboard.collectionLabel(collectionName));\n      Session.set('admin_subtitle', 'Edit ' + this.params._id);\n      Session.set('admin_collection_page', 'edit');\n      Session.set('admin_collection_name', collectionName);\n      Session.set('admin_id', parseID(this.params._id));\n      Session.set('admin_doc', adminCollectionObject(collectionName).findOne({\n        _id: parseID(this.params._id)\n      }));\n      return (ref = collection.routes) != null ? (ref1 = ref.edit) != null ? ref1.onAfterAction : void 0 : void 0;\n    },\n    data: function() {\n      return {\n        admin_collection: adminCollectionObject(collectionName)\n      };\n    }\n  };\n  return _.defaults(options, (ref = collection.routes) != null ? ref.edit : void 0);\n};\n\nadminPublishTables = function(collections) {\n  return _.each(collections, function(collection, name) {\n    if (!collection.children) {\n      return void 0;\n    }\n    return Meteor.publishComposite(adminTablePubName(name), function(tableName, ids, fields) {\n      var extraFields;\n      check(tableName, String);\n      check(ids, Array);\n      check(fields, Match.Optional(Object));\n      extraFields = _.reduce(collection.extraFields, function(fields, name) {\n        fields[name] = 1;\n        return fields;\n      }, {});\n      _.extend(fields, extraFields);\n      this.unblock();\n      return {\n        find: function() {\n          this.unblock();\n          return adminCollectionObject(name).find({\n            _id: {\n              $in: ids\n            }\n          }, {\n            fields: fields\n          });\n        },\n        children: collection.children\n      };\n    });\n  });\n};\n\nMeteor.startup(function() {\n  adminCreateTables(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0);\n  adminCreateRoutes(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0);\n  if (Meteor.isServer) {\n    adminPublishTables(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0);\n  }\n  if (AdminTables.Users) {\n    return void 0;\n  }\n  return AdminTables.Users = new Tabular.Table({\n    changeSelector: function(selector, userId) {\n      var $or;\n      $or = selector['$or'];\n      $or && (selector['$or'] = _.map($or, function(exp) {\n        var ref;\n        if (((ref = exp.emails) != null ? ref['$regex'] : void 0) != null) {\n          return {\n            emails: {\n              $elemMatch: {\n                address: exp.emails\n              }\n            }\n          };\n        } else {\n          return exp;\n        }\n      }));\n      return selector;\n    },\n    name: 'Users',\n    collection: Meteor.users,\n    columns: _.union([\n      {\n        data: '_id',\n        title: 'Admin',\n        createdCell: function(node, cellData, rowData) {\n          return $(node).html(Blaze.toHTMLWithData(Template.adminUsersIsAdmin, {\n            _id: cellData\n          }));\n        },\n        width: '40px'\n      }, {\n        data: 'emails',\n        title: 'Email',\n        render: function(value) {\n          return value[0].address;\n        },\n        searchable: true\n      }, {\n        data: 'emails',\n        title: 'Mail',\n        createdCell: function(node, cellData, rowData) {\n          return $(node).html(Blaze.toHTMLWithData(Template.adminUsersMailBtn, {\n            emails: cellData\n          }));\n        },\n        width: '40px'\n      }, {\n        data: 'createdAt',\n        title: 'Joined'\n      }\n    ], adminEditDelButtons),\n    dom: adminTablesDom\n  });\n});\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/wangziguan_admin/lib/both/collections.coffee.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nthis.AdminCollectionsCount = new Mongo.Collection('adminCollectionsCount');\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/wangziguan_admin/lib/server/publish.coffee.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nMeteor.publishComposite('adminCollectionDoc', function(collection, id) {\n  var ref, ref1;\n  check(collection, String);\n  check(id, Match.OneOf(String, Mongo.ObjectID));\n  if (Roles.userIsInRole(this.userId, ['admin'])) {\n    return {\n      find: function() {\n        return adminCollectionObject(collection).find(id);\n      },\n      children: (typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? (ref = AdminConfig.collections) != null ? (ref1 = ref[collection]) != null ? ref1.children : void 0 : void 0 : void 0) || []\n    };\n  } else {\n    return this.ready();\n  }\n});\n\nMeteor.publish('adminUsers', function() {\n  if (Roles.userIsInRole(this.userId, ['admin'])) {\n    return Meteor.users.find();\n  } else {\n    return this.ready();\n  }\n});\n\nMeteor.publish('adminUser', function() {\n  return Meteor.users.find(this.userId);\n});\n\nMeteor.publish('adminCollectionsCount', function() {\n  var handles, self;\n  handles = [];\n  self = this;\n  _.each(AdminTables, function(table, name) {\n    var count, id, ready, selector;\n    id = new Mongo.ObjectID;\n    count = 0;\n    table = AdminTables[name];\n    ready = false;\n    selector = table.selector ? table.selector(self.userId) : {};\n    handles.push(table.collection.find().observeChanges({\n      added: function() {\n        count += 1;\n        return ready && self.changed('adminCollectionsCount', id, {\n          count: count\n        });\n      },\n      removed: function() {\n        count -= 1;\n        return ready && self.changed('adminCollectionsCount', id, {\n          count: count\n        });\n      }\n    }));\n    ready = true;\n    return self.added('adminCollectionsCount', id, {\n      collection: name,\n      count: count\n    });\n  });\n  self.onStop(function() {\n    return _.each(handles, function(handle) {\n      return handle.stop();\n    });\n  });\n  return self.ready();\n});\n\nMeteor.publish(null, function() {\n  return Meteor.roles.find({});\n});\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/wangziguan_admin/lib/server/methods.coffee.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nMeteor.methods({\n  adminInsertDoc: function(doc, collection) {\n    var result;\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      this.unblock();\n      result = adminCollectionObject(collection).insert(doc);\n      return result;\n    }\n  },\n  adminUpdateDoc: function(modifier, collection, _id) {\n    var result;\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      this.unblock();\n      result = adminCollectionObject(collection).update({\n        _id: _id\n      }, modifier);\n      return result;\n    }\n  },\n  adminRemoveDoc: function(collection, _id) {\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      if (collection === 'Users') {\n        return Meteor.users.remove({\n          _id: _id\n        });\n      } else {\n        return adminCollectionObject(collection).remove({\n          _id: _id\n        });\n      }\n    }\n  },\n  adminNewUser: function(doc) {\n    var emails;\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      emails = doc.email.split(',');\n      return _.each(emails, function(email) {\n        var _id, user;\n        user = {};\n        user.email = email;\n        user.password = doc.password;\n        _id = Accounts.createUser(user);\n        if (doc.sendPassword && (AdminConfig.fromEmail != null)) {\n          Email.send({\n            to: user.email,\n            from: AdminConfig.fromEmail,\n            subject: 'Your account has been created',\n            html: 'You\\'ve just had an account created for ' + Meteor.absoluteUrl() + ' with password ' + doc.password\n          });\n        }\n        if (!doc.sendPassword) {\n          return Accounts.sendEnrollmentEmail(_id);\n        }\n      });\n    }\n  },\n  adminUpdateUser: function(modifier, _id) {\n    var result;\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      this.unblock();\n      result = Meteor.users.update({\n        _id: _id\n      }, modifier);\n      return result;\n    }\n  },\n  adminSendResetPasswordEmail: function(doc) {\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      console.log('Changing password for user ' + doc._id);\n      return Accounts.sendResetPasswordEmail(doc._id);\n    }\n  },\n  adminChangePassword: function(doc) {\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      console.log('Changing password for user ' + doc._id);\n      Accounts.setPassword(doc._id, doc.password);\n      return {\n        label: 'Email user their new password'\n      };\n    }\n  },\n  adminCheckAdmin: function() {\n    var adminEmails, email, user;\n    check(arguments, [Match.Any]);\n    user = Meteor.users.findOne({\n      _id: this.userId\n    });\n    if (this.userId && !Roles.userIsInRole(this.userId, ['admin']) && (user.emails.length > 0)) {\n      email = user.emails[0].address;\n      if (typeof Meteor.settings.adminEmails !== 'undefined') {\n        adminEmails = Meteor.settings.adminEmails;\n        if (adminEmails.indexOf(email) > -1) {\n          console.log('Adding admin user: ' + email);\n          return Roles.addUsersToRoles(this.userId, ['admin'], Roles.GLOBAL_GROUP);\n        }\n      } else if (typeof AdminConfig !== 'undefined' && typeof AdminConfig.adminEmails === 'object') {\n        adminEmails = AdminConfig.adminEmails;\n        if (adminEmails.indexOf(email) > -1) {\n          console.log('Adding admin user: ' + email);\n          return Roles.addUsersToRoles(this.userId, ['admin'], Roles.GLOBAL_GROUP);\n        }\n      } else if (this.userId === Meteor.users.findOne({}, {\n        sort: {\n          createdAt: 1\n        }\n      })._id) {\n        console.log('Making first user admin: ' + email);\n        return Roles.addUsersToRoles(this.userId, ['admin']);\n      }\n    }\n  },\n  adminAddUserToRole: function(_id, role) {\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      return Roles.addUsersToRoles(_id, role, Roles.GLOBAL_GROUP);\n    }\n  },\n  adminRemoveUserToRole: function(_id, role) {\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      return Roles.removeUsersFromRoles(_id, role, Roles.GLOBAL_GROUP);\n    }\n  },\n  adminSetCollectionSort: function(collection, _sort) {\n    check(arguments, [Match.Any]);\n    return global.AdminPages[collection].set({\n      sort: _sort\n    });\n  }\n});\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"wangziguan:admin\", {\n  AdminDashboard: AdminDashboard\n});\n\n})();\n","servePath":"/packages/wangziguan_admin.js","sourceMap":{"version":3,"sources":["/packages/wangziguan_admin/lib/both/AdminDashboard.coffee","/packages/wangziguan_admin/lib/both/router.coffee","/packages/wangziguan_admin/lib/both/utils.coffee","/packages/wangziguan_admin/lib/both/startup.coffee","/packages/wangziguan_admin/lib/both/collections.coffee","/packages/wangziguan_admin/lib/server/publish.coffee","/packages/wangziguan_admin/lib/server/methods.coffee"],"names":[],"mappings":"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","file":"/packages/wangziguan_admin.js","sourcesContent":["AdminDashboard =\n\tschemas: {}\n\tsidebarItems: []\n\tcollectionItems: []\n\talertSuccess: (message)->\n\t\tSession.set 'adminSuccess', message\n\talertFailure: (message)->\n\t\tSession.set 'adminError', message\n\n\tcheckAdmin: ->\n\t\tif not Roles.userIsInRole Meteor.userId(), ['admin']\n\t\t\tMeteor.call 'adminCheckAdmin'\n\t\t\tif (typeof AdminConfig?.nonAdminRedirectRoute == \"string\")\n\t\t\t  Router.go AdminConfig.nonAdminRedirectRoute\n\t\tif typeof @.next == 'function'\n\t\t\t@next()\n\tadminRoutes: ['adminDashboard','adminDashboardUsersNew','adminDashboardUsersEdit','adminDashboardView','adminDashboardNew','adminDashboardEdit']\n\tcollectionLabel: (collection)->\n\t\tif collection == 'Users'\n\t\t\t'Users'\n\t\telse if collection? and typeof AdminConfig.collections[collection]?.label == 'string'\n\t\t\tAdminConfig.collections[collection].label\n\t\telse Session.get 'admin_collection_name'\n\n\taddSidebarItem: (title, url, options) ->\n\t\titem = title: title\n\t\tif _.isObject(url) and typeof options == 'undefined'\n\t\t\titem.options = url\n\t\telse\n\t\t\titem.url = url\n\t\t\titem.options = options\n\n\t\t@sidebarItems.push item\n\n\textendSidebarItem: (title, urls) ->\n\t\tif _.isObject(urls) then urls = [urls]\n\n\t\texisting = _.find @sidebarItems, (item) -> item.title == title\n\t\tif existing\n\t\t\texisting.options.urls = _.union existing.options.urls, urls\n\n\taddCollectionItem: (fn) ->\n\t\t@collectionItems.push fn\n\n\tpath: (s) ->\n\t\tpath = '/admin'\n\t\tif typeof s == 'string' and s.length > 0\n\t\t\tpath += (if s[0] == '/' then '' else '/') + s\n\t\tpath\n\n\nAdminDashboard.schemas.newUser = new SimpleSchema\n\temail: \n\t\ttype: String\n\t\tlabel: \"Email address\"\n\tpassword:\n\t\ttype: String\n\t\tlabel: 'Password'\n\tsendPassword:\n\t\ttype: Boolean\n\t\tlabel: 'Send this user their password by email'\n\t\toptional: true\n\nAdminDashboard.schemas.sendResetPasswordEmail = new SimpleSchema\n\t_id:\n\t\ttype: String\n\nAdminDashboard.schemas.changePassword = new SimpleSchema\n\t_id:\n\t\ttype: String\n\tpassword:\n\t\ttype: String\n","@AdminController = RouteController.extend\n\tlayoutTemplate: 'AdminLayout'\n\twaitOn: ->\n\t\t[\n\t\t\tMeteor.subscribe 'adminUsers'\n\t\t\tMeteor.subscribe 'adminUser'\n\t\t\tMeteor.subscribe 'adminCollectionsCount'\n\t\t]\n\tonBeforeAction: ->\n\t\tSession.set 'adminSuccess', null\n\t\tSession.set 'adminError', null\n\n\t\tSession.set 'admin_title', ''\n\t\tSession.set 'admin_subtitle', ''\n\t\tSession.set 'admin_collection_page', null\n\t\tSession.set 'admin_collection_name', null\n\t\tSession.set 'admin_id', null\n\t\tSession.set 'admin_doc', null\n\n\t\tif not Roles.userIsInRole Meteor.userId(), ['admin']\n\t\t\tMeteor.call 'adminCheckAdmin'\n\t\t\tif typeof AdminConfig?.nonAdminRedirectRoute == 'string'\n\t\t\t\tRouter.go AdminConfig.nonAdminRedirectRoute\n\n\t\t@next()\n\n\nRouter.route \"adminDashboard\",\n\tpath: \"/admin\"\n\ttemplate: \"AdminDashboard\"\n\tcontroller: \"AdminController\"\n\taction: ->\n\t\t@render()\n\tonAfterAction: ->\n\t\tSession.set 'admin_title', '总览'\n\t\tSession.set 'admin_collection_name', ''\n\t\tSession.set 'admin_collection_page', ''\n\nRouter.route \"adminDashboardUsersView\",\n\tpath: \"/admin/Users\"\n\ttemplate: \"AdminDashboardView\"\n\tcontroller: \"AdminController\"\n\taction: ->\n\t\t@render()\n\tdata: ->\n\t\tadmin_table: AdminTables.Users\n\tonAfterAction: ->\n\t\tSession.set 'admin_title', '账号管理'\n\t\tSession.set 'admin_subtitle', ''\n\t\tSession.set 'admin_collection_name', 'Users'\n\nRouter.route \"adminDashboardUsersNew\",\n\tpath: \"/admin/Users/new\"\n\ttemplate: \"AdminDashboardUsersNew\"\n\tcontroller: 'AdminController'\n\taction: ->\n\t\t@render()\n\tonAfterAction: ->\n\t\tSession.set 'admin_title', '账号管理'\n\t\tSession.set 'admin_subtitle', '创建新用户'\n\t\tSession.set 'admin_collection_page', ''\n\t\tSession.set 'admin_collection_name', 'Users'\n\nRouter.route \"adminDashboardUsersEdit\",\n\tpath: \"/admin/Users/:_id/edit\"\n\ttemplate: \"AdminDashboardUsersEdit\"\n\tcontroller: \"AdminController\"\n\tdata: ->\n\t\tuser: Meteor.users.find(@params._id).fetch()\n\t\troles: Roles.getRolesForUser @params._id\n\t\totherRoles: _.difference _.map(Meteor.roles.find().fetch(), (role) -> role.name), Roles.getRolesForUser(@params._id)\n\taction: ->\n\t\t@render()\n\tonAfterAction: ->\n\t\tSession.set 'admin_title', '账号管理'\n\t\tSession.set 'admin_subtitle', '编辑用户 ' + @params._id\n\t\tSession.set 'admin_collection_page', ''\n\t\tSession.set 'admin_collection_name', 'Users'\n\t\tSession.set 'admin_id', @params._id\n\t\tSession.set 'admin_doc', Meteor.users.findOne({_id:@params._id})\n","@adminCollectionObject = (collection) ->\n\tif typeof AdminConfig.collections[collection] != 'undefined' and typeof AdminConfig.collections[collection].collectionObject != 'undefined'\n\t\tAdminConfig.collections[collection].collectionObject\n\telse\n\t\tlookup collection\n\n@adminCallback = (name, args, callback) ->\n\tstop = false\n\tif typeof AdminConfig?.callbacks?[name] == 'function'\n\t\tstop = AdminConfig.callbacks[name](args...) is false\n\tif typeof callback == 'function'\n\t\tcallback args... unless stop\n\n@lookup = (obj, root, required=true) ->\n\tif typeof root == 'undefined'\n\t\troot = if Meteor.isServer then global else window\n\tif typeof obj == 'string'\n\t\tref = root\n\t\tarr = obj.split '.'\n\t\tcontinue while arr.length and (ref = ref[arr.shift()])\n\t\tif not ref and required\n\t\t\tthrow new Error(obj + ' is not in the ' + root.toString())\n\t\telse\n\t\t\treturn ref\n\treturn obj\n\t\n@parseID = (id) ->\n\tif typeof id == 'string'\n\t\tif(id.indexOf(\"ObjectID\") > -1)\n\t\t\treturn new Mongo.ObjectID(id.slice(id.indexOf('\"') + 1,id.lastIndexOf('\"')))\n\t\telse\n\t\t\treturn id\n\telse\n\t\treturn id\n\n@parseIDs = (ids) ->\n    return _.map ids, (id) ->\n        parseID id\n","@AdminTables = {}\n\nadminTablesDom = '<\"box\"<\"box-header\"<\"box-toolbar\"<\"pull-left\"<lf>><\"pull-right\"p>>><\"box-body\"t>><r>'\n\nadminEditButton = {\n\tdata: '_id'\n\ttitle: 'Edit'\n\tcreatedCell: (node, cellData, rowData) ->\n\t\t$(node).html(Blaze.toHTMLWithData Template.adminEditBtn, {_id: cellData})\n\twidth: '40px'\n\torderable: false\n}\nadminDelButton = {\n\tdata: '_id'\n\ttitle: 'Delete'\n\tcreatedCell: (node, cellData, rowData) ->\n\t\t$(node).html(Blaze.toHTMLWithData Template.adminDeleteBtn, {_id: cellData})\n\twidth: '40px'\n\torderable: false\n}\n\nadminEditDelButtons = [\n\tadminEditButton,\n\tadminDelButton\n]\n\ndefaultColumns = () -> [\n  data: '_id',\n  title: 'ID'\n]\n\nadminTablePubName = (collection) ->\n\t\"admin_tabular_#{collection}\"\n\nadminCreateTables = (collections) ->\n\t_.each AdminConfig?.collections, (collection, name) ->\n\t\t_.defaults collection, {\n\t\t\tshowEditColumn: true\n\t\t\tshowDelColumn: true\n\t\t\tshowInSideBar: true\n\t\t}\n\n\t\tcolumns = _.map collection.tableColumns, (column) ->\n\t\t\tif column.template\n\t\t\t\tcreatedCell = (node, cellData, rowData) ->\n\t\t\t\t\t$(node).html ''\n\t\t\t\t\tBlaze.renderWithData(Template[column.template], {value: cellData, doc: rowData}, node)\n\n\t\t\tdata: column.name\n\t\t\ttitle: column.label\n\t\t\tcreatedCell: createdCell\n\n\t\tif columns.length == 0\n\t\t\tcolumns = defaultColumns()\n\n\t\tif collection.showEditColumn\n\t\t\tcolumns.push(adminEditButton)\n\t\tif collection.showDelColumn\n\t\t\tcolumns.push(adminDelButton)\n\n\t\tAdminTables[name] = new Tabular.Table\n\t\t\tname: name\n\t\t\tcollection: adminCollectionObject(name)\n\t\t\tpub: collection.children and adminTablePubName(name)\n\t\t\tsub: collection.sub\n\t\t\tcolumns: columns\n\t\t\textraFields: collection.extraFields\n\t\t\tdom: adminTablesDom\n\t\t\tselector: collection.selector || ->\n\t\t\t\treturn {}\n\nadminCreateRoutes = (collections) ->\n\t_.each collections, adminCreateRouteView\n\t_.each collections,\tadminCreateRouteNew\n\t_.each collections, adminCreateRouteEdit\n\nadminCreateRouteView = (collection, collectionName) ->\n\tRouter.route \"adminDashboard#{collectionName}View\",\n\t\tadminCreateRouteViewOptions collection, collectionName\n\nadminCreateRouteViewOptions = (collection, collectionName) ->\n\toptions =\n\t\tpath: \"/admin/#{collectionName}\"\n\t\ttemplate: \"AdminDashboardViewWrapper\"\n\t\tcontroller: \"AdminController\"\n\t\tdata: ->\n  \t\tadmin_table: AdminTables[collectionName]\n\t\taction: ->\n\t\t\t@render()\n\t\tonAfterAction: ->\n\t\t\tSession.set 'admin_title', collectionName\n\t\t\tSession.set 'admin_subtitle', 'View'\n\t\t\tSession.set 'admin_collection_name', collectionName\n\t\t\tcollection.routes?.view?.onAfterAction\n\t_.defaults options, collection.routes?.view\n\nadminCreateRouteNew = (collection, collectionName) ->\n\tRouter.route \"adminDashboard#{collectionName}New\",\n\t\tadminCreateRouteNewOptions collection, collectionName\n\nadminCreateRouteNewOptions = (collection, collectionName) ->\n\toptions =\n\t\tpath: \"/admin/#{collectionName}/new\"\n\t\ttemplate: \"AdminDashboardNew\"\n\t\tcontroller: \"AdminController\"\n\t\taction: ->\n\t\t\t@render()\n\t\tonAfterAction: ->\n\t\t\tSession.set 'admin_title', AdminDashboard.collectionLabel collectionName\n\t\t\tSession.set 'admin_subtitle', 'Create new'\n\t\t\tSession.set 'admin_collection_page', 'new'\n\t\t\tSession.set 'admin_collection_name', collectionName\n\t\t\tcollection.routes?.new?.onAfterAction\n\t\tdata: ->\n\t\t\tadmin_collection: adminCollectionObject collectionName\n\t_.defaults options, collection.routes?.new\n\nadminCreateRouteEdit = (collection, collectionName) ->\n\tRouter.route \"adminDashboard#{collectionName}Edit\",\n\t\tadminCreateRouteEditOptions collection, collectionName\n\nadminCreateRouteEditOptions = (collection, collectionName) ->\n\toptions =\n\t\tpath: \"/admin/#{collectionName}/:_id/edit\"\n\t\ttemplate: \"AdminDashboardEdit\"\n\t\tcontroller: \"AdminController\"\n\t\twaitOn: ->\n\t\t\tMeteor.subscribe 'adminCollectionDoc', collectionName, parseID(@params._id)\n\t\t\tcollection.routes?.edit?.waitOn\n\t\taction: ->\n\t\t\t@render()\n\t\tonAfterAction: ->\n\t\t\tSession.set 'admin_title', AdminDashboard.collectionLabel collectionName\n\t\t\tSession.set 'admin_subtitle', 'Edit ' + @params._id\n\t\t\tSession.set 'admin_collection_page', 'edit'\n\t\t\tSession.set 'admin_collection_name', collectionName\n\t\t\tSession.set 'admin_id', parseID(@params._id)\n\t\t\tSession.set 'admin_doc', adminCollectionObject(collectionName).findOne _id : parseID(@params._id)\n\t\t\tcollection.routes?.edit?.onAfterAction\n\t\tdata: ->\n\t\t\tadmin_collection: adminCollectionObject collectionName\n\t_.defaults options, collection.routes?.edit\n\nadminPublishTables = (collections) ->\n\t_.each collections, (collection, name) ->\n\t\tif not collection.children then return undefined\n\t\tMeteor.publishComposite adminTablePubName(name), (tableName, ids, fields) ->\n\t\t\tcheck tableName, String\n\t\t\tcheck ids, Array\n\t\t\tcheck fields, Match.Optional Object\n\n\t\t\textraFields = _.reduce collection.extraFields, (fields, name) ->\n\t\t\t\tfields[name] = 1\n\t\t\t\tfields\n\t\t\t, {}\n\t\t\t_.extend fields, extraFields\n\n\t\t\t@unblock()\n\n\t\t\tfind: ->\n\t\t\t\t@unblock()\n\t\t\t\tadminCollectionObject(name).find {_id: {$in: ids}}, {fields: fields}\n\t\t\tchildren: collection.children\n\nMeteor.startup ->\n\tadminCreateTables AdminConfig?.collections\n\tadminCreateRoutes AdminConfig?.collections\n\tadminPublishTables AdminConfig?.collections if Meteor.isServer\n\n\tif AdminTables.Users then return undefined\n\n\tAdminTables.Users = new Tabular.Table\n\t\t# Modify selector to allow search by email\n\t\tchangeSelector: (selector, userId) ->\n\t\t\t$or = selector['$or']\n\t\t\t$or and selector['$or'] = _.map $or, (exp) ->\n\t\t\t\tif exp.emails?['$regex']?\n\t\t\t\t\temails: $elemMatch: address: exp.emails\n\t\t\t\telse\n\t\t\t\t\texp\n\t\t\tselector\n\n\t\tname: 'Users'\n\t\tcollection: Meteor.users\n\t\tcolumns: _.union [\n\t\t\t{\n\t\t\t\tdata: '_id'\n\t\t\t\ttitle: 'Admin'\n\t\t\t\t# TODO: use `tmpl`\n\t\t\t\tcreatedCell: (node, cellData, rowData) ->\n\t\t\t\t\t$(node).html(Blaze.toHTMLWithData Template.adminUsersIsAdmin, {_id: cellData})\n\t\t\t\twidth: '40px'\n\t\t\t}\n\t\t\t{\n\t\t\t\tdata: 'emails'\n\t\t\t\ttitle: 'Email'\n\t\t\t\trender: (value) ->\n\t\t\t\t\tvalue[0].address\n\t\t\t\tsearchable: true\n\t\t\t}\n\t\t\t{\n\t\t\t\tdata: 'emails'\n\t\t\t\ttitle: 'Mail'\n\t\t\t\t# TODO: use `tmpl`\n\t\t\t\tcreatedCell: (node, cellData, rowData) ->\n\t\t\t\t\t$(node).html(Blaze.toHTMLWithData Template.adminUsersMailBtn, {emails: cellData})\n\t\t\t\twidth: '40px'\n\t\t\t}\n\t\t\t{ data: 'createdAt', title: 'Joined' }\n\t\t], adminEditDelButtons\n\t\tdom: adminTablesDom\n","@AdminCollectionsCount = new Mongo.Collection 'adminCollectionsCount'","Meteor.publishComposite 'adminCollectionDoc', (collection, id) ->\n\tcheck collection, String\n\tcheck id, Match.OneOf(String, Mongo.ObjectID)\n\tif Roles.userIsInRole this.userId, ['admin']\n\t\tfind: ->\n\t\t\tadminCollectionObject(collection).find(id)\n\t\tchildren: AdminConfig?.collections?[collection]?.children or []\n\telse\n\t\t@ready()\n\nMeteor.publish 'adminUsers', ->\n\tif Roles.userIsInRole @userId, ['admin']\n\t\tMeteor.users.find()\n\telse\n\t\t@ready()\n\nMeteor.publish 'adminUser', ->\n\tMeteor.users.find @userId\n\nMeteor.publish 'adminCollectionsCount', ->\n\thandles = []\n\tself = @\n\n\t_.each AdminTables, (table, name) ->\n\t\tid = new Mongo.ObjectID\n\t\tcount = 0\n\t\ttable = AdminTables[name]\n\t\tready = false\n\t\tselector = if table.selector then table.selector(self.userId) else {}\n\t\thandles.push table.collection.find().observeChanges\n\t\t\tadded: ->\n\t\t\t\tcount += 1\n\t\t\t\tready and self.changed 'adminCollectionsCount', id, {count: count}\n\t\t\tremoved: ->\n\t\t\t\tcount -= 1\n\t\t\t\tready and self.changed 'adminCollectionsCount', id, {count: count}\n\t\tready = true\n\n\t\tself.added 'adminCollectionsCount', id, {collection: name, count: count}\n\n\tself.onStop ->\n\t\t_.each handles, (handle) -> handle.stop()\n\tself.ready()\n\nMeteor.publish null, ->\n\tMeteor.roles.find({})\n","Meteor.methods\n\tadminInsertDoc: (doc,collection)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tthis.unblock()\n\t\t\tresult = adminCollectionObject(collection).insert doc\n\t\t\t\t\n\t\t\treturn result\n\n\tadminUpdateDoc: (modifier,collection,_id)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tthis.unblock()\n\t\t\tresult = adminCollectionObject(collection).update {_id:_id},modifier\n\t\t\treturn result\n\n\tadminRemoveDoc: (collection,_id)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tif collection == 'Users'\n\t\t\t\tMeteor.users.remove {_id:_id}\n\t\t\telse\n\t\t\t\t# global[collection].remove {_id:_id}\n\t\t\t\tadminCollectionObject(collection).remove {_id: _id}\n\n\n\tadminNewUser: (doc) ->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\temails = doc.email.split(',')\n\t\t\t_.each emails, (email)->\n\t\t\t\tuser = {}\n\t\t\t\tuser.email = email\n\t\t\t\tuser.password = doc.password\n\n\t\t\t\t_id = Accounts.createUser user\n\n\t\t\t\tif doc.sendPassword and AdminConfig.fromEmail?\n\t\t\t\t\tEmail.send\n\t\t\t\t\t\tto: user.email\n\t\t\t\t\t\tfrom: AdminConfig.fromEmail\n\t\t\t\t\t\tsubject: 'Your account has been created'\n\t\t\t\t\t\thtml: 'You\\'ve just had an account created for ' + Meteor.absoluteUrl() + ' with password ' + doc.password\n\n\t\t\t\tif not doc.sendPassword\n\t\t\t\t\tAccounts.sendEnrollmentEmail _id\n\n\tadminUpdateUser: (modifier,_id)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tthis.unblock()\n\t\t\tresult = Meteor.users.update {_id:_id}, modifier\n\t\t\treturn result\n\n\tadminSendResetPasswordEmail: (doc)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tconsole.log 'Changing password for user ' + doc._id\n\t\t\tAccounts.sendResetPasswordEmail(doc._id)\n\n\tadminChangePassword: (doc)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tconsole.log 'Changing password for user ' + doc._id\n\t\t\tAccounts.setPassword(doc._id, doc.password)\n\t\t\tlabel: 'Email user their new password'\n\n\tadminCheckAdmin: ->\n\t\tcheck arguments, [Match.Any]\n\t\tuser = Meteor.users.findOne(_id:this.userId)\n\t\tif this.userId and !Roles.userIsInRole(this.userId, ['admin']) and (user.emails.length > 0)\n\t\t\temail = user.emails[0].address\n\t\t\tif typeof Meteor.settings.adminEmails != 'undefined'\n\t\t\t\tadminEmails = Meteor.settings.adminEmails\n\t\t\t\tif adminEmails.indexOf(email) > -1\n\t\t\t\t\tconsole.log 'Adding admin user: ' + email\n\t\t\t\t\tRoles.addUsersToRoles this.userId, ['admin'], Roles.GLOBAL_GROUP\n\t\t\telse if typeof AdminConfig != 'undefined' and typeof AdminConfig.adminEmails == 'object'\n\t\t\t\tadminEmails = AdminConfig.adminEmails\n\t\t\t\tif adminEmails.indexOf(email) > -1\n\t\t\t\t\tconsole.log 'Adding admin user: ' + email\n\t\t\t\t\tRoles.addUsersToRoles this.userId, ['admin'], Roles.GLOBAL_GROUP\n\t\t\telse if this.userId == Meteor.users.findOne({},{sort:{createdAt:1}})._id\n\t\t\t\tconsole.log 'Making first user admin: ' + email\n\t\t\t\tRoles.addUsersToRoles this.userId, ['admin']\n\n\tadminAddUserToRole: (_id,role)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tRoles.addUsersToRoles _id, role, Roles.GLOBAL_GROUP\n\n\tadminRemoveUserToRole: (_id,role)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tRoles.removeUsersFromRoles _id, role, Roles.GLOBAL_GROUP\n\n\tadminSetCollectionSort: (collection, _sort) ->\n\t\tcheck arguments, [Match.Any]\n\t\tglobal.AdminPages[collection].set\n\t\t\tsort: _sort\n"]}}]