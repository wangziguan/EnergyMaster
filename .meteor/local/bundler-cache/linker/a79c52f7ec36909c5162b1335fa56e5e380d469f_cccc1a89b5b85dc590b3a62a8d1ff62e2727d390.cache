[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar mqtt;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                               //\n// packages/perak_mqtt-collection/lib/mqtt.js                                                    //\n//                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                 //\nmqtt = Npm.require('mqtt');\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                               //\n// packages/perak_mqtt-collection/lib/mqtt_collection.js                                         //\n//                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                 //\nvar Fiber = Npm.require(\"fibers\");\n\nvar Mongo = Package.mongo.Mongo;\n\nMongo.Collection.prototype.mqttConnect = function(uri, topics, options, mqttOptions) {\n\tvar self = this;\n\tthis.mqttDisconnect();\n\n\tthis.options = options || {};\n\tthis.mqttOptions = mqttOptions || {};\n\n\tthis._mqttClient = mqtt.connect(uri,self.mqttOptions);\n\n\tthis._mqttClient.on(\"connect\", function() {\n\t\tself.mqttSubscribe(topics);\n\t});\n\n\tthis._mqttClient.on(\"message\", function(topic, message) {\n\t\tvar msg = message.toString();\n\t\tif(!self.options.raw) {\n\t\t\ttry {\n\t\t\t\tmsg = JSON.parse(msg);\n\t\t\t} catch(e) {\n\t\t\t}\n\t\t}\n\n\t\tFiber(function() {\n\n\t\t\tif(self.options.insert) {\n\t\t\t\tself.insert({\n\t\t\t\t\ttopic: topic,\n\t\t\t\t\tmessage: msg\n\t\t\t\t}, function(e, r) {\n\t\t\t\t\tif(e) {\n\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(self.options.insertLimit) {\n\t\t\t\t\t\t\tvar insertLimit = parseInt(self.options.insertLimit);\n\t\t\t\t\t\t\tif(!isNaN(insertLimit)) {\n\t\t\t\t\t\t\t\twhile(self.find({ topic: topic }).count() > insertLimit) {\n\t\t\t\t\t\t\t\t\tvar removeId = self.findOne({ topic: topic }, { sort: [[\"createdAt\", \"asc\"]] });\n\t\t\t\t\t\t\t\t\tif(removeId) {\n\t\t\t\t\t\t\t\t\t\tself.remove({ _id: removeId._id });\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tself.upsert(\n\t\t\t\t{\n\t\t\t\t\ttopic: topic\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$set: {\n\t\t\t\t\t\ttopic: topic,\n\t\t\t\t\t\tmessage: msg\n\t\t\t\t\t}\n\t\t\t\t}, \n\t\t\t\t{\n\t\t\t\t},\n\t\t\t\tfunction(e, r) {\n\t\t\t\t\tif(e) console.log(e);\n\t\t\t\t});\n\t\t\t}\n\t\t}).run();\n\t});\n\n\tvar init = true;\n\tthis.find().observeChanges({\n\t\tadded: function(id, doc) {\n\t\t\tif(!init) {\n\t\t\t\tif(doc && doc.topic && doc.message && doc.broadcast && self._mqttClient) {\n\t\t\t\t\tvar msg = typeof doc.message === 'object' ? JSON.stringify(doc.message) : doc.message + \"\";\n\t\t\t\t\tself.remove({ _id: id });\n\t\t\t\t\tself._mqttClient.publish(doc.topic, msg);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\tinit = false;\n};\n\nMongo.Collection.prototype.mqttDisconnect = function() {\n\tif(this._mqttClient) this._mqttClient.end();\n\tthis._mqttClient = null;\n};\n\nMongo.Collection.prototype.mqttSubscribe = function(topics) {\n\tvar self = this;\n\tif(!this._mqttClient) return;\n\tif(!topics) return;\n\n\tif(typeof topics == \"string\" || topics instanceof String) {\n\t\tthis._mqttClient.subscribe(topics);\n\t} else if(_.isArray(topics)) {\n\t\t_.each(topics, function(topic) {\n\t\t\tself._mqttClient.subscribe(topic);\n\t\t});\n\t}\n};\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"perak:mqtt-collection\", {\n  mqtt: mqtt\n});\n\n})();\n","servePath":"/packages/perak_mqtt-collection.js"}]