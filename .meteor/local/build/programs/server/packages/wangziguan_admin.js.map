{"version":3,"sources":["meteor://💻app/packages/wangziguan_admin/lib/both/AdminDashboard.coffee","meteor://💻app/lib/both/AdminDashboard.coffee","meteor://💻app/packages/wangziguan_admin/lib/both/router.coffee","meteor://💻app/lib/both/router.coffee","meteor://💻app/packages/wangziguan_admin/lib/both/utils.coffee","meteor://💻app/lib/both/utils.coffee","meteor://💻app/packages/wangziguan_admin/lib/both/startup.coffee","meteor://💻app/lib/both/startup.coffee","meteor://💻app/packages/wangziguan_admin/lib/both/collections.coffee","meteor://💻app/packages/wangziguan_admin/lib/server/publish.coffee","meteor://💻app/lib/server/publish.coffee","meteor://💻app/packages/wangziguan_admin/lib/server/methods.coffee","meteor://💻app/lib/server/methods.coffee"],"names":["SimpleSchema","module","link","default","v","AdminDashboard","schemas","sidebarItems","collectionItems","alertSuccess","message","Session","set","alertFailure","checkAdmin","Roles","userIsInRole","Meteor","userId","call","AdminConfig","nonAdminRedirectRoute","Router","go","next","adminRoutes","collectionLabel","collection","ref","collections","label","get","addSidebarItem","title","url","options","item","_","isObject","push","extendSidebarItem","urls","existing","find","union","addCollectionItem","fn","path","s","length","newUser","email","type","String","password","sendPassword","Boolean","optional","sendResetPasswordEmail","_id","changePassword","AdminController","RouteController","extend","layoutTemplate","waitOn","subscribe","onBeforeAction","route","template","controller","action","render","onAfterAction","data","admin_table","AdminTables","Users","user","users","params","fetch","roles","getRolesForUser","otherRoles","difference","map","role","name","findOne","adminCollectionObject","collectionObject","lookup","adminCallback","args","callback","ref1","stop","callbacks","obj","root","required","arr","isServer","global","window","split","shift","Error","toString","parseID","id","indexOf","Mongo","ObjectID","slice","lastIndexOf","parseIDs","ids","adminCreateRouteEdit","adminCreateRouteEditOptions","adminCreateRouteNew","adminCreateRouteNewOptions","adminCreateRouteView","adminCreateRouteViewOptions","adminCreateRoutes","adminCreateTables","adminDelButton","adminEditButton","adminEditDelButtons","adminPublishTables","adminTablePubName","adminTablesDom","defaultColumns","createdCell","node","cellData","rowData","$","html","Blaze","toHTMLWithData","Template","adminEditBtn","width","orderable","adminDeleteBtn","each","columns","defaults","showEditColumn","showDelColumn","showInSideBar","tableColumns","column","renderWithData","value","doc","Tabular","Table","pub","children","sub","extraFields","dom","selector","collectionName","routes","view","new","admin_collection","edit","publishComposite","tableName","fields","check","Array","Match","Optional","Object","reduce","unblock","$in","startup","changeSelector","$or","exp","emails","$elemMatch","address","adminUsersIsAdmin","searchable","adminUsersMailBtn","AdminCollectionsCount","Collection","OneOf","ready","publish","handles","self","table","count","observeChanges","added","changed","removed","onStop","handle","methods","adminInsertDoc","result","arguments","Any","insert","adminUpdateDoc","modifier","update","adminRemoveDoc","remove","adminNewUser","Accounts","createUser","fromEmail","Email","send","to","from","subject","absoluteUrl","sendEnrollmentEmail","adminUpdateUser","adminSendResetPasswordEmail","console","log","adminChangePassword","setPassword","adminCheckAdmin","adminEmails","settings","addUsersToRoles","GLOBAL_GROUP","sort","createdAt","adminAddUserToRole","adminRemoveUserToRole","removeUsersFromRoles","adminSetCollectionSort","_sort","AdminPages"],"mappings":"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","file":"/packages/wangziguan_admin.js","sourcesContent":["import SimpleSchema from 'simpl-schema';\n\nAdminDashboard =\n\tschemas: {}\n\tsidebarItems: []\n\tcollectionItems: []\n\talertSuccess: (message)->\n\t\tSession.set 'adminSuccess', message\n\talertFailure: (message)->\n\t\tSession.set 'adminError', message\n\n\tcheckAdmin: ->\n\t\tif not Roles.userIsInRole Meteor.userId(), ['admin']\n\t\t\tMeteor.call 'adminCheckAdmin'\n\t\t\tif (typeof AdminConfig?.nonAdminRedirectRoute == \"string\")\n\t\t\t\tRouter.go AdminConfig.nonAdminRedirectRoute\n\t\tif typeof @.next == 'function'\n\t\t\t@next()\n\tadminRoutes: ['adminDashboard','adminDashboardUsersNew','adminDashboardUsersEdit','adminDashboardView','adminDashboardNew','adminDashboardEdit']\n\tcollectionLabel: (collection)->\n\t\tif collection == 'Users'\n\t\t\t'Users'\n\t\telse if collection? and typeof AdminConfig.collections[collection]?.label == 'string'\n\t\t\tAdminConfig.collections[collection].label\n\t\telse Session.get 'admin_collection_name'\n\n\taddSidebarItem: (title, url, options) ->\n\t\titem = title: title\n\t\tif _.isObject(url) and typeof options == 'undefined'\n\t\t\titem.options = url\n\t\telse\n\t\t\titem.url = url\n\t\t\titem.options = options\n\n\t\t@sidebarItems.push item\n\n\textendSidebarItem: (title, urls) ->\n\t\tif _.isObject(urls) then urls = [urls]\n\n\t\texisting = _.find @sidebarItems, (item) -> item.title == title\n\t\tif existing\n\t\t\texisting.options.urls = _.union existing.options.urls, urls\n\n\taddCollectionItem: (fn) ->\n\t\t@collectionItems.push fn\n\n\tpath: (s) ->\n\t\tpath = '/admin'\n\t\tif typeof s == 'string' and s.length > 0\n\t\t\tpath += (if s[0] == '/' then '' else '/') + s\n\t\tpath\n\n\nAdminDashboard.schemas.newUser = new SimpleSchema\n\temail: \n\t\ttype: String\n\t\tlabel: \"Email address\"\n\tpassword:\n\t\ttype: String\n\t\tlabel: 'Password'\n\tsendPassword:\n\t\ttype: Boolean\n\t\tlabel: 'Send this user their password by email'\n\t\toptional: true\n\nAdminDashboard.schemas.sendResetPasswordEmail = new SimpleSchema\n\t_id:\n\t\ttype: String\n\nAdminDashboard.schemas.changePassword = new SimpleSchema\n\t_id:\n\t\ttype: String\n\tpassword:\n\t\ttype: String\n","                   \n\nimport SimpleSchema from 'simpl-schema';\n\nAdminDashboard = {\n  schemas: {},\n  sidebarItems: [],\n  collectionItems: [],\n  alertSuccess: function(message) {\n    return Session.set('adminSuccess', message);\n  },\n  alertFailure: function(message) {\n    return Session.set('adminError', message);\n  },\n  checkAdmin: function() {\n    if (!Roles.userIsInRole(Meteor.userId(), ['admin'])) {\n      Meteor.call('adminCheckAdmin');\n      if (typeof (typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.nonAdminRedirectRoute : void 0) === \"string\") {\n        Router.go(AdminConfig.nonAdminRedirectRoute);\n      }\n    }\n    if (typeof this.next === 'function') {\n      return this.next();\n    }\n  },\n  adminRoutes: ['adminDashboard', 'adminDashboardUsersNew', 'adminDashboardUsersEdit', 'adminDashboardView', 'adminDashboardNew', 'adminDashboardEdit'],\n  collectionLabel: function(collection) {\n    var ref;\n    if (collection === 'Users') {\n      return 'Users';\n    } else if ((collection != null) && typeof ((ref = AdminConfig.collections[collection]) != null ? ref.label : void 0) === 'string') {\n      return AdminConfig.collections[collection].label;\n    } else {\n      return Session.get('admin_collection_name');\n    }\n  },\n  addSidebarItem: function(title, url, options) {\n    var item;\n    item = {\n      title: title\n    };\n    if (_.isObject(url) && typeof options === 'undefined') {\n      item.options = url;\n    } else {\n      item.url = url;\n      item.options = options;\n    }\n    return this.sidebarItems.push(item);\n  },\n  extendSidebarItem: function(title, urls) {\n    var existing;\n    if (_.isObject(urls)) {\n      urls = [urls];\n    }\n    existing = _.find(this.sidebarItems, function(item) {\n      return item.title === title;\n    });\n    if (existing) {\n      return existing.options.urls = _.union(existing.options.urls, urls);\n    }\n  },\n  addCollectionItem: function(fn) {\n    return this.collectionItems.push(fn);\n  },\n  path: function(s) {\n    var path;\n    path = '/admin';\n    if (typeof s === 'string' && s.length > 0) {\n      path += (s[0] === '/' ? '' : '/') + s;\n    }\n    return path;\n  }\n};\n\nAdminDashboard.schemas.newUser = new SimpleSchema({\n  email: {\n    type: String,\n    label: \"Email address\"\n  },\n  password: {\n    type: String,\n    label: 'Password'\n  },\n  sendPassword: {\n    type: Boolean,\n    label: 'Send this user their password by email',\n    optional: true\n  }\n});\n\nAdminDashboard.schemas.sendResetPasswordEmail = new SimpleSchema({\n  _id: {\n    type: String\n  }\n});\n\nAdminDashboard.schemas.changePassword = new SimpleSchema({\n  _id: {\n    type: String\n  },\n  password: {\n    type: String\n  }\n});\n","@AdminController = RouteController.extend\n\tlayoutTemplate: 'AdminLayout'\n\twaitOn: ->\n\t\t[\n\t\t\tMeteor.subscribe 'adminUsers'\n\t\t\tMeteor.subscribe 'adminUser'\n\t\t\tMeteor.subscribe 'adminCollectionsCount'\n\t\t]\n\tonBeforeAction: ->\n\t\tSession.set 'adminSuccess', null\n\t\tSession.set 'adminError', null\n\n\t\tSession.set 'admin_title', ''\n\t\tSession.set 'admin_subtitle', ''\n\t\tSession.set 'admin_collection_page', null\n\t\tSession.set 'admin_collection_name', null\n\t\tSession.set 'admin_id', null\n\t\tSession.set 'admin_doc', null\n\n\t\tif not Roles.userIsInRole Meteor.userId(), ['admin']\n\t\t\tMeteor.call 'adminCheckAdmin'\n\t\t\tif typeof AdminConfig?.nonAdminRedirectRoute == 'string'\n\t\t\t\tRouter.go AdminConfig.nonAdminRedirectRoute\n\n\t\t@next()\n\n\nRouter.route \"adminDashboard\",\n\tpath: \"/admin\"\n\ttemplate: \"AdminDashboard\"\n\tcontroller: \"AdminController\"\n\taction: ->\n\t\t@render()\n\tonAfterAction: ->\n\t\tSession.set 'admin_title', '总览'\n\t\tSession.set 'admin_collection_name', ''\n\t\tSession.set 'admin_collection_page', ''\n\nRouter.route \"adminDashboardUsersView\",\n\tpath: \"/admin/Users\"\n\ttemplate: \"AdminDashboardView\"\n\tcontroller: \"AdminController\"\n\taction: ->\n\t\t@render()\n\tdata: ->\n\t\tadmin_table: AdminTables.Users\n\tonAfterAction: ->\n\t\tSession.set 'admin_title', '账号管理'\n\t\tSession.set 'admin_subtitle', ''\n\t\tSession.set 'admin_collection_name', 'Users'\n\nRouter.route \"adminDashboardUsersNew\",\n\tpath: \"/admin/Users/new\"\n\ttemplate: \"AdminDashboardUsersNew\"\n\tcontroller: 'AdminController'\n\taction: ->\n\t\t@render()\n\tonAfterAction: ->\n\t\tSession.set 'admin_title', '账号管理'\n\t\tSession.set 'admin_subtitle', '创建新用户'\n\t\tSession.set 'admin_collection_page', ''\n\t\tSession.set 'admin_collection_name', 'Users'\n\nRouter.route \"adminDashboardUsersEdit\",\n\tpath: \"/admin/Users/:_id/edit\"\n\ttemplate: \"AdminDashboardUsersEdit\"\n\tcontroller: \"AdminController\"\n\tdata: ->\n\t\tuser: Meteor.users.find(@params._id).fetch()\n\t\troles: Roles.getRolesForUser @params._id\n\t\totherRoles: _.difference _.map(Meteor.roles.find().fetch(), (role) -> role.name), Roles.getRolesForUser(@params._id)\n\taction: ->\n\t\t@render()\n\tonAfterAction: ->\n\t\tSession.set 'admin_title', '账号管理'\n\t\tSession.set 'admin_subtitle', '编辑用户 ' + @params._id\n\t\tSession.set 'admin_collection_page', ''\n\t\tSession.set 'admin_collection_name', 'Users'\n\t\tSession.set 'admin_id', @params._id\n\t\tSession.set 'admin_doc', Meteor.users.findOne({_id:@params._id})\n","this.AdminController = RouteController.extend({\n  layoutTemplate: 'AdminLayout',\n  waitOn: function() {\n    return [Meteor.subscribe('adminUsers'), Meteor.subscribe('adminUser'), Meteor.subscribe('adminCollectionsCount')];\n  },\n  onBeforeAction: function() {\n    Session.set('adminSuccess', null);\n    Session.set('adminError', null);\n    Session.set('admin_title', '');\n    Session.set('admin_subtitle', '');\n    Session.set('admin_collection_page', null);\n    Session.set('admin_collection_name', null);\n    Session.set('admin_id', null);\n    Session.set('admin_doc', null);\n    if (!Roles.userIsInRole(Meteor.userId(), ['admin'])) {\n      Meteor.call('adminCheckAdmin');\n      if (typeof (typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.nonAdminRedirectRoute : void 0) === 'string') {\n        Router.go(AdminConfig.nonAdminRedirectRoute);\n      }\n    }\n    return this.next();\n  }\n});\n\nRouter.route(\"adminDashboard\", {\n  path: \"/admin\",\n  template: \"AdminDashboard\",\n  controller: \"AdminController\",\n  action: function() {\n    return this.render();\n  },\n  onAfterAction: function() {\n    Session.set('admin_title', '总览');\n    Session.set('admin_collection_name', '');\n    return Session.set('admin_collection_page', '');\n  }\n});\n\nRouter.route(\"adminDashboardUsersView\", {\n  path: \"/admin/Users\",\n  template: \"AdminDashboardView\",\n  controller: \"AdminController\",\n  action: function() {\n    return this.render();\n  },\n  data: function() {\n    return {\n      admin_table: AdminTables.Users\n    };\n  },\n  onAfterAction: function() {\n    Session.set('admin_title', '账号管理');\n    Session.set('admin_subtitle', '');\n    return Session.set('admin_collection_name', 'Users');\n  }\n});\n\nRouter.route(\"adminDashboardUsersNew\", {\n  path: \"/admin/Users/new\",\n  template: \"AdminDashboardUsersNew\",\n  controller: 'AdminController',\n  action: function() {\n    return this.render();\n  },\n  onAfterAction: function() {\n    Session.set('admin_title', '账号管理');\n    Session.set('admin_subtitle', '创建新用户');\n    Session.set('admin_collection_page', '');\n    return Session.set('admin_collection_name', 'Users');\n  }\n});\n\nRouter.route(\"adminDashboardUsersEdit\", {\n  path: \"/admin/Users/:_id/edit\",\n  template: \"AdminDashboardUsersEdit\",\n  controller: \"AdminController\",\n  data: function() {\n    return {\n      user: Meteor.users.find(this.params._id).fetch(),\n      roles: Roles.getRolesForUser(this.params._id),\n      otherRoles: _.difference(_.map(Meteor.roles.find().fetch(), function(role) {\n        return role.name;\n      }), Roles.getRolesForUser(this.params._id))\n    };\n  },\n  action: function() {\n    return this.render();\n  },\n  onAfterAction: function() {\n    Session.set('admin_title', '账号管理');\n    Session.set('admin_subtitle', '编辑用户 ' + this.params._id);\n    Session.set('admin_collection_page', '');\n    Session.set('admin_collection_name', 'Users');\n    Session.set('admin_id', this.params._id);\n    return Session.set('admin_doc', Meteor.users.findOne({\n      _id: this.params._id\n    }));\n  }\n});\n","@adminCollectionObject = (collection) ->\n\tif typeof AdminConfig.collections[collection] != 'undefined' and typeof AdminConfig.collections[collection].collectionObject != 'undefined'\n\t\tAdminConfig.collections[collection].collectionObject\n\telse\n\t\tlookup collection\n\n@adminCallback = (name, args, callback) ->\n\tstop = false\n\tif typeof AdminConfig?.callbacks?[name] == 'function'\n\t\tstop = AdminConfig.callbacks[name](args...) is false\n\tif typeof callback == 'function'\n\t\tcallback args... unless stop\n\n@lookup = (obj, root, required=true) ->\n\tif typeof root == 'undefined'\n\t\troot = if Meteor.isServer then global else window\n\tif typeof obj == 'string'\n\t\tref = root\n\t\tarr = obj.split '.'\n\t\tcontinue while arr.length and (ref = ref[arr.shift()])\n\t\tif not ref and required\n\t\t\tthrow new Error(obj + ' is not in the ' + root.toString())\n\t\telse\n\t\t\treturn ref\n\treturn obj\n\t\n@parseID = (id) ->\n\tif typeof id == 'string'\n\t\tif(id.indexOf(\"ObjectID\") > -1)\n\t\t\treturn new Mongo.ObjectID(id.slice(id.indexOf('\"') + 1,id.lastIndexOf('\"')))\n\t\telse\n\t\t\treturn id\n\telse\n\t\treturn id\n\n@parseIDs = (ids) ->\n    return _.map ids, (id) ->\n        parseID id\n","this.adminCollectionObject = function(collection) {\n  if (typeof AdminConfig.collections[collection] !== 'undefined' && typeof AdminConfig.collections[collection].collectionObject !== 'undefined') {\n    return AdminConfig.collections[collection].collectionObject;\n  } else {\n    return lookup(collection);\n  }\n};\n\nthis.adminCallback = function(name, args, callback) {\n  var ref1, stop;\n  stop = false;\n  if (typeof (typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? (ref1 = AdminConfig.callbacks) != null ? ref1[name] : void 0 : void 0) === 'function') {\n    stop = AdminConfig.callbacks[name](...args) === false;\n  }\n  if (typeof callback === 'function') {\n    if (!stop) {\n      return callback(...args);\n    }\n  }\n};\n\nthis.lookup = function(obj, root, required = true) {\n  var arr, ref;\n  if (typeof root === 'undefined') {\n    root = Meteor.isServer ? global : window;\n  }\n  if (typeof obj === 'string') {\n    ref = root;\n    arr = obj.split('.');\n    while (arr.length && (ref = ref[arr.shift()])) {\n      continue;\n    }\n    if (!ref && required) {\n      throw new Error(obj + ' is not in the ' + root.toString());\n    } else {\n      return ref;\n    }\n  }\n  return obj;\n};\n\nthis.parseID = function(id) {\n  if (typeof id === 'string') {\n    if (id.indexOf(\"ObjectID\") > -1) {\n      return new Mongo.ObjectID(id.slice(id.indexOf('\"') + 1, id.lastIndexOf('\"')));\n    } else {\n      return id;\n    }\n  } else {\n    return id;\n  }\n};\n\nthis.parseIDs = function(ids) {\n  return _.map(ids, function(id) {\n    return parseID(id);\n  });\n};\n","@AdminTables = {}\n\nadminTablesDom = '<\"box\"<\"box-header\"<\"box-toolbar\"<\"pull-left\"<lf>><\"pull-right\"p>>><\"box-body\"t>><r>'\n\nadminEditButton = {\n\tdata: '_id'\n\ttitle: 'Edit'\n\tcreatedCell: (node, cellData, rowData) ->\n\t\t$(node).html(Blaze.toHTMLWithData Template.adminEditBtn, {_id: cellData})\n\twidth: '40px'\n\torderable: false\n}\nadminDelButton = {\n\tdata: '_id'\n\ttitle: 'Delete'\n\tcreatedCell: (node, cellData, rowData) ->\n\t\t$(node).html(Blaze.toHTMLWithData Template.adminDeleteBtn, {_id: cellData})\n\twidth: '40px'\n\torderable: false\n}\n\nadminEditDelButtons = [\n\tadminEditButton,\n\tadminDelButton\n]\n\ndefaultColumns = () -> [\n  data: '_id',\n  title: 'ID'\n]\n\nadminTablePubName = (collection) ->\n\t\"admin_tabular_#{collection}\"\n\nadminCreateTables = (collections) ->\n\t_.each AdminConfig?.collections, (collection, name) ->\n\t\t_.defaults collection, {\n\t\t\tshowEditColumn: true\n\t\t\tshowDelColumn: true\n\t\t\tshowInSideBar: true\n\t\t}\n\n\t\tcolumns = _.map collection.tableColumns, (column) ->\n\t\t\tif column.template\n\t\t\t\tcreatedCell = (node, cellData, rowData) ->\n\t\t\t\t\t$(node).html ''\n\t\t\t\t\tBlaze.renderWithData(Template[column.template], {value: cellData, doc: rowData}, node)\n\n\t\t\tdata: column.name\n\t\t\ttitle: column.label\n\t\t\tcreatedCell: createdCell\n\n\t\tif columns.length == 0\n\t\t\tcolumns = defaultColumns()\n\n\t\tif collection.showEditColumn\n\t\t\tcolumns.push(adminEditButton)\n\t\tif collection.showDelColumn\n\t\t\tcolumns.push(adminDelButton)\n\n\t\tAdminTables[name] = new Tabular.Table\n\t\t\tname: name\n\t\t\tcollection: adminCollectionObject(name)\n\t\t\tpub: collection.children and adminTablePubName(name)\n\t\t\tsub: collection.sub\n\t\t\tcolumns: columns\n\t\t\textraFields: collection.extraFields\n\t\t\tdom: adminTablesDom\n\t\t\tselector: collection.selector || ->\n\t\t\t\treturn {}\n\nadminCreateRoutes = (collections) ->\n\t_.each collections, adminCreateRouteView\n\t_.each collections,\tadminCreateRouteNew\n\t_.each collections, adminCreateRouteEdit\n\nadminCreateRouteView = (collection, collectionName) ->\n\tRouter.route \"adminDashboard#{collectionName}View\",\n\t\tadminCreateRouteViewOptions collection, collectionName\n\nadminCreateRouteViewOptions = (collection, collectionName) ->\n\toptions =\n\t\tpath: \"/admin/#{collectionName}\"\n\t\ttemplate: \"AdminDashboardViewWrapper\"\n\t\tcontroller: \"AdminController\"\n\t\tdata: ->\n\t\t\tadmin_table: AdminTables[collectionName]\n\t\taction: ->\n\t\t\t@render()\n\t\tonAfterAction: ->\n\t\t\tSession.set 'admin_title', collectionName\n\t\t\tSession.set 'admin_subtitle', 'View'\n\t\t\tSession.set 'admin_collection_name', collectionName\n\t\t\tcollection.routes?.view?.onAfterAction\n\t_.defaults options, collection.routes?.view\n\nadminCreateRouteNew = (collection, collectionName) ->\n\tRouter.route \"adminDashboard#{collectionName}New\",\n\t\tadminCreateRouteNewOptions collection, collectionName\n\nadminCreateRouteNewOptions = (collection, collectionName) ->\n\toptions =\n\t\tpath: \"/admin/#{collectionName}/new\"\n\t\ttemplate: \"AdminDashboardNew\"\n\t\tcontroller: \"AdminController\"\n\t\taction: ->\n\t\t\t@render()\n\t\tonAfterAction: ->\n\t\t\tSession.set 'admin_title', AdminDashboard.collectionLabel collectionName\n\t\t\tSession.set 'admin_subtitle', 'Create new'\n\t\t\tSession.set 'admin_collection_page', 'new'\n\t\t\tSession.set 'admin_collection_name', collectionName\n\t\t\tcollection.routes?.new?.onAfterAction\n\t\tdata: ->\n\t\t\tadmin_collection: adminCollectionObject collectionName\n\t_.defaults options, collection.routes?.new\n\nadminCreateRouteEdit = (collection, collectionName) ->\n\tRouter.route \"adminDashboard#{collectionName}Edit\",\n\t\tadminCreateRouteEditOptions collection, collectionName\n\nadminCreateRouteEditOptions = (collection, collectionName) ->\n\toptions =\n\t\tpath: \"/admin/#{collectionName}/:_id/edit\"\n\t\ttemplate: \"AdminDashboardEdit\"\n\t\tcontroller: \"AdminController\"\n\t\twaitOn: ->\n\t\t\tMeteor.subscribe 'adminCollectionDoc', collectionName, parseID(@params._id)\n\t\t\tcollection.routes?.edit?.waitOn\n\t\taction: ->\n\t\t\t@render()\n\t\tonAfterAction: ->\n\t\t\tSession.set 'admin_title', AdminDashboard.collectionLabel collectionName\n\t\t\tSession.set 'admin_subtitle', 'Edit ' + @params._id\n\t\t\tSession.set 'admin_collection_page', 'edit'\n\t\t\tSession.set 'admin_collection_name', collectionName\n\t\t\tSession.set 'admin_id', parseID(@params._id)\n\t\t\tSession.set 'admin_doc', adminCollectionObject(collectionName).findOne _id : parseID(@params._id)\n\t\t\tcollection.routes?.edit?.onAfterAction\n\t\tdata: ->\n\t\t\tadmin_collection: adminCollectionObject collectionName\n\t_.defaults options, collection.routes?.edit\n\nadminPublishTables = (collections) ->\n\t_.each collections, (collection, name) ->\n\t\tif not collection.children then return undefined\n\t\tMeteor.publishComposite adminTablePubName(name), (tableName, ids, fields) ->\n\t\t\tcheck tableName, String\n\t\t\tcheck ids, Array\n\t\t\tcheck fields, Match.Optional Object\n\n\t\t\textraFields = _.reduce collection.extraFields, (fields, name) ->\n\t\t\t\tfields[name] = 1\n\t\t\t\tfields\n\t\t\t, {}\n\t\t\t_.extend fields, extraFields\n\n\t\t\t@unblock()\n\n\t\t\tfind: ->\n\t\t\t\t@unblock()\n\t\t\t\tadminCollectionObject(name).find {_id: {$in: ids}}, {fields: fields}\n\t\t\tchildren: collection.children\n\nMeteor.startup ->\n\tadminCreateTables AdminConfig?.collections\n\tadminCreateRoutes AdminConfig?.collections\n\tadminPublishTables AdminConfig?.collections if Meteor.isServer\n\n\tif AdminTables.Users then return undefined\n\n\tAdminTables.Users = new Tabular.Table\n\t\t# Modify selector to allow search by email\n\t\tchangeSelector: (selector, userId) ->\n\t\t\t$or = selector['$or']\n\t\t\t$or and selector['$or'] = _.map $or, (exp) ->\n\t\t\t\tif exp.emails?['$regex']?\n\t\t\t\t\temails: $elemMatch: address: exp.emails\n\t\t\t\telse\n\t\t\t\t\texp\n\t\t\tselector\n\n\t\tname: 'Users'\n\t\tcollection: Meteor.users\n\t\tcolumns: _.union [\n\t\t\t{\n\t\t\t\tdata: '_id'\n\t\t\t\ttitle: 'Admin'\n\t\t\t\t# TODO: use `tmpl`\n\t\t\t\tcreatedCell: (node, cellData, rowData) ->\n\t\t\t\t\t$(node).html(Blaze.toHTMLWithData Template.adminUsersIsAdmin, {_id: cellData})\n\t\t\t\twidth: '40px'\n\t\t\t}\n\t\t\t{\n\t\t\t\tdata: 'emails'\n\t\t\t\ttitle: 'Email'\n\t\t\t\trender: (value) ->\n\t\t\t\t\tvalue[0].address\n\t\t\t\tsearchable: true\n\t\t\t}\n\t\t\t{\n\t\t\t\tdata: 'emails'\n\t\t\t\ttitle: 'Mail'\n\t\t\t\t# TODO: use `tmpl`\n\t\t\t\tcreatedCell: (node, cellData, rowData) ->\n\t\t\t\t\t$(node).html(Blaze.toHTMLWithData Template.adminUsersMailBtn, {emails: cellData})\n\t\t\t\twidth: '40px'\n\t\t\t}\n\t\t\t{ data: 'createdAt', title: 'Joined' }\n\t\t], adminEditDelButtons\n\t\tdom: adminTablesDom\n","var adminCreateRouteEdit, adminCreateRouteEditOptions, adminCreateRouteNew, adminCreateRouteNewOptions, adminCreateRouteView, adminCreateRouteViewOptions, adminCreateRoutes, adminCreateTables, adminDelButton, adminEditButton, adminEditDelButtons, adminPublishTables, adminTablePubName, adminTablesDom, defaultColumns;\n\nthis.AdminTables = {};\n\nadminTablesDom = '<\"box\"<\"box-header\"<\"box-toolbar\"<\"pull-left\"<lf>><\"pull-right\"p>>><\"box-body\"t>><r>';\n\nadminEditButton = {\n  data: '_id',\n  title: 'Edit',\n  createdCell: function(node, cellData, rowData) {\n    return $(node).html(Blaze.toHTMLWithData(Template.adminEditBtn, {\n      _id: cellData\n    }));\n  },\n  width: '40px',\n  orderable: false\n};\n\nadminDelButton = {\n  data: '_id',\n  title: 'Delete',\n  createdCell: function(node, cellData, rowData) {\n    return $(node).html(Blaze.toHTMLWithData(Template.adminDeleteBtn, {\n      _id: cellData\n    }));\n  },\n  width: '40px',\n  orderable: false\n};\n\nadminEditDelButtons = [adminEditButton, adminDelButton];\n\ndefaultColumns = function() {\n  return [\n    {\n      data: '_id',\n      title: 'ID'\n    }\n  ];\n};\n\nadminTablePubName = function(collection) {\n  return `admin_tabular_${collection}`;\n};\n\nadminCreateTables = function(collections) {\n  return _.each(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0, function(collection, name) {\n    var columns;\n    _.defaults(collection, {\n      showEditColumn: true,\n      showDelColumn: true,\n      showInSideBar: true\n    });\n    columns = _.map(collection.tableColumns, function(column) {\n      var createdCell;\n      if (column.template) {\n        createdCell = function(node, cellData, rowData) {\n          $(node).html('');\n          return Blaze.renderWithData(Template[column.template], {\n            value: cellData,\n            doc: rowData\n          }, node);\n        };\n      }\n      return {\n        data: column.name,\n        title: column.label,\n        createdCell: createdCell\n      };\n    });\n    if (columns.length === 0) {\n      columns = defaultColumns();\n    }\n    if (collection.showEditColumn) {\n      columns.push(adminEditButton);\n    }\n    if (collection.showDelColumn) {\n      columns.push(adminDelButton);\n    }\n    return AdminTables[name] = new Tabular.Table({\n      name: name,\n      collection: adminCollectionObject(name),\n      pub: collection.children && adminTablePubName(name),\n      sub: collection.sub,\n      columns: columns,\n      extraFields: collection.extraFields,\n      dom: adminTablesDom,\n      selector: collection.selector || function() {\n        return {};\n      }\n    });\n  });\n};\n\nadminCreateRoutes = function(collections) {\n  _.each(collections, adminCreateRouteView);\n  _.each(collections, adminCreateRouteNew);\n  return _.each(collections, adminCreateRouteEdit);\n};\n\nadminCreateRouteView = function(collection, collectionName) {\n  return Router.route(`adminDashboard${collectionName}View`, adminCreateRouteViewOptions(collection, collectionName));\n};\n\nadminCreateRouteViewOptions = function(collection, collectionName) {\n  var options, ref;\n  options = {\n    path: `/admin/${collectionName}`,\n    template: \"AdminDashboardViewWrapper\",\n    controller: \"AdminController\",\n    data: function() {\n      return {\n        admin_table: AdminTables[collectionName]\n      };\n    },\n    action: function() {\n      return this.render();\n    },\n    onAfterAction: function() {\n      var ref, ref1;\n      Session.set('admin_title', collectionName);\n      Session.set('admin_subtitle', 'View');\n      Session.set('admin_collection_name', collectionName);\n      return (ref = collection.routes) != null ? (ref1 = ref.view) != null ? ref1.onAfterAction : void 0 : void 0;\n    }\n  };\n  return _.defaults(options, (ref = collection.routes) != null ? ref.view : void 0);\n};\n\nadminCreateRouteNew = function(collection, collectionName) {\n  return Router.route(`adminDashboard${collectionName}New`, adminCreateRouteNewOptions(collection, collectionName));\n};\n\nadminCreateRouteNewOptions = function(collection, collectionName) {\n  var options, ref;\n  options = {\n    path: `/admin/${collectionName}/new`,\n    template: \"AdminDashboardNew\",\n    controller: \"AdminController\",\n    action: function() {\n      return this.render();\n    },\n    onAfterAction: function() {\n      var ref, ref1;\n      Session.set('admin_title', AdminDashboard.collectionLabel(collectionName));\n      Session.set('admin_subtitle', 'Create new');\n      Session.set('admin_collection_page', 'new');\n      Session.set('admin_collection_name', collectionName);\n      return (ref = collection.routes) != null ? (ref1 = ref.new) != null ? ref1.onAfterAction : void 0 : void 0;\n    },\n    data: function() {\n      return {\n        admin_collection: adminCollectionObject(collectionName)\n      };\n    }\n  };\n  return _.defaults(options, (ref = collection.routes) != null ? ref.new : void 0);\n};\n\nadminCreateRouteEdit = function(collection, collectionName) {\n  return Router.route(`adminDashboard${collectionName}Edit`, adminCreateRouteEditOptions(collection, collectionName));\n};\n\nadminCreateRouteEditOptions = function(collection, collectionName) {\n  var options, ref;\n  options = {\n    path: `/admin/${collectionName}/:_id/edit`,\n    template: \"AdminDashboardEdit\",\n    controller: \"AdminController\",\n    waitOn: function() {\n      var ref, ref1;\n      Meteor.subscribe('adminCollectionDoc', collectionName, parseID(this.params._id));\n      return (ref = collection.routes) != null ? (ref1 = ref.edit) != null ? ref1.waitOn : void 0 : void 0;\n    },\n    action: function() {\n      return this.render();\n    },\n    onAfterAction: function() {\n      var ref, ref1;\n      Session.set('admin_title', AdminDashboard.collectionLabel(collectionName));\n      Session.set('admin_subtitle', 'Edit ' + this.params._id);\n      Session.set('admin_collection_page', 'edit');\n      Session.set('admin_collection_name', collectionName);\n      Session.set('admin_id', parseID(this.params._id));\n      Session.set('admin_doc', adminCollectionObject(collectionName).findOne({\n        _id: parseID(this.params._id)\n      }));\n      return (ref = collection.routes) != null ? (ref1 = ref.edit) != null ? ref1.onAfterAction : void 0 : void 0;\n    },\n    data: function() {\n      return {\n        admin_collection: adminCollectionObject(collectionName)\n      };\n    }\n  };\n  return _.defaults(options, (ref = collection.routes) != null ? ref.edit : void 0);\n};\n\nadminPublishTables = function(collections) {\n  return _.each(collections, function(collection, name) {\n    if (!collection.children) {\n      return void 0;\n    }\n    return Meteor.publishComposite(adminTablePubName(name), function(tableName, ids, fields) {\n      var extraFields;\n      check(tableName, String);\n      check(ids, Array);\n      check(fields, Match.Optional(Object));\n      extraFields = _.reduce(collection.extraFields, function(fields, name) {\n        fields[name] = 1;\n        return fields;\n      }, {});\n      _.extend(fields, extraFields);\n      this.unblock();\n      return {\n        find: function() {\n          this.unblock();\n          return adminCollectionObject(name).find({\n            _id: {\n              $in: ids\n            }\n          }, {\n            fields: fields\n          });\n        },\n        children: collection.children\n      };\n    });\n  });\n};\n\nMeteor.startup(function() {\n  adminCreateTables(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0);\n  adminCreateRoutes(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0);\n  if (Meteor.isServer) {\n    adminPublishTables(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0);\n  }\n  if (AdminTables.Users) {\n    return void 0;\n  }\n  return AdminTables.Users = new Tabular.Table({\n    // Modify selector to allow search by email\n    changeSelector: function(selector, userId) {\n      var $or;\n      $or = selector['$or'];\n      $or && (selector['$or'] = _.map($or, function(exp) {\n        var ref;\n        if (((ref = exp.emails) != null ? ref['$regex'] : void 0) != null) {\n          return {\n            emails: {\n              $elemMatch: {\n                address: exp.emails\n              }\n            }\n          };\n        } else {\n          return exp;\n        }\n      }));\n      return selector;\n    },\n    name: 'Users',\n    collection: Meteor.users,\n    columns: _.union([\n      {\n        data: '_id',\n        title: 'Admin',\n        // TODO: use `tmpl`\n        createdCell: function(node,\n      cellData,\n      rowData) {\n          return $(node).html(Blaze.toHTMLWithData(Template.adminUsersIsAdmin,\n      {\n            _id: cellData\n          }));\n        },\n        width: '40px'\n      },\n      {\n        data: 'emails',\n        title: 'Email',\n        render: function(value) {\n          return value[0].address;\n        },\n        searchable: true\n      },\n      {\n        data: 'emails',\n        title: 'Mail',\n        // TODO: use `tmpl`\n        createdCell: function(node,\n      cellData,\n      rowData) {\n          return $(node).html(Blaze.toHTMLWithData(Template.adminUsersMailBtn,\n      {\n            emails: cellData\n          }));\n        },\n        width: '40px'\n      },\n      {\n        data: 'createdAt',\n        title: 'Joined'\n      }\n    ], adminEditDelButtons),\n    dom: adminTablesDom\n  });\n});\n","@AdminCollectionsCount = new Mongo.Collection 'adminCollectionsCount'","Meteor.publishComposite 'adminCollectionDoc', (collection, id) ->\n\tcheck collection, String\n\tcheck id, Match.OneOf(String, Mongo.ObjectID)\n\tif Roles.userIsInRole this.userId, ['admin']\n\t\tfind: ->\n\t\t\tadminCollectionObject(collection).find(id)\n\t\tchildren: AdminConfig?.collections?[collection]?.children or []\n\telse\n\t\t@ready()\n\nMeteor.publish 'adminUsers', ->\n\tif Roles.userIsInRole @userId, ['admin']\n\t\tMeteor.users.find()\n\telse\n\t\t@ready()\n\nMeteor.publish 'adminUser', ->\n\tMeteor.users.find @userId\n\nMeteor.publish 'adminCollectionsCount', ->\n\thandles = []\n\tself = @\n\n\t_.each AdminTables, (table, name) ->\n\t\tid = new Mongo.ObjectID\n\t\tcount = 0\n\t\ttable = AdminTables[name]\n\t\tready = false\n\t\tselector = if table.selector then table.selector(self.userId) else {}\n\t\thandles.push table.collection.find().observeChanges\n\t\t\tadded: ->\n\t\t\t\tcount += 1\n\t\t\t\tready and self.changed 'adminCollectionsCount', id, {count: count}\n\t\t\tremoved: ->\n\t\t\t\tcount -= 1\n\t\t\t\tready and self.changed 'adminCollectionsCount', id, {count: count}\n\t\tready = true\n\n\t\tself.added 'adminCollectionsCount', id, {collection: name, count: count}\n\n\tself.onStop ->\n\t\t_.each handles, (handle) -> handle.stop()\n\tself.ready()\n\nMeteor.publish null, ->\n\tMeteor.roles.find({})\n","Meteor.publishComposite('adminCollectionDoc', function(collection, id) {\n  var ref, ref1;\n  check(collection, String);\n  check(id, Match.OneOf(String, Mongo.ObjectID));\n  if (Roles.userIsInRole(this.userId, ['admin'])) {\n    return {\n      find: function() {\n        return adminCollectionObject(collection).find(id);\n      },\n      children: (typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? (ref = AdminConfig.collections) != null ? (ref1 = ref[collection]) != null ? ref1.children : void 0 : void 0 : void 0) || []\n    };\n  } else {\n    return this.ready();\n  }\n});\n\nMeteor.publish('adminUsers', function() {\n  if (Roles.userIsInRole(this.userId, ['admin'])) {\n    return Meteor.users.find();\n  } else {\n    return this.ready();\n  }\n});\n\nMeteor.publish('adminUser', function() {\n  return Meteor.users.find(this.userId);\n});\n\nMeteor.publish('adminCollectionsCount', function() {\n  var handles, self;\n  handles = [];\n  self = this;\n  _.each(AdminTables, function(table, name) {\n    var count, id, ready, selector;\n    id = new Mongo.ObjectID;\n    count = 0;\n    table = AdminTables[name];\n    ready = false;\n    selector = table.selector ? table.selector(self.userId) : {};\n    handles.push(table.collection.find().observeChanges({\n      added: function() {\n        count += 1;\n        return ready && self.changed('adminCollectionsCount', id, {\n          count: count\n        });\n      },\n      removed: function() {\n        count -= 1;\n        return ready && self.changed('adminCollectionsCount', id, {\n          count: count\n        });\n      }\n    }));\n    ready = true;\n    return self.added('adminCollectionsCount', id, {\n      collection: name,\n      count: count\n    });\n  });\n  self.onStop(function() {\n    return _.each(handles, function(handle) {\n      return handle.stop();\n    });\n  });\n  return self.ready();\n});\n\nMeteor.publish(null, function() {\n  return Meteor.roles.find({});\n});\n","Meteor.methods\n\tadminInsertDoc: (doc,collection)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tthis.unblock()\n\t\t\tresult = adminCollectionObject(collection).insert doc\n\t\t\t\t\n\t\t\treturn result\n\n\tadminUpdateDoc: (modifier,collection,_id)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tthis.unblock()\n\t\t\tresult = adminCollectionObject(collection).update {_id:_id},modifier\n\t\t\treturn result\n\n\tadminRemoveDoc: (collection,_id)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tif collection == 'Users'\n\t\t\t\tMeteor.users.remove {_id:_id}\n\t\t\telse\n\t\t\t\t# global[collection].remove {_id:_id}\n\t\t\t\tadminCollectionObject(collection).remove {_id: _id}\n\n\n\tadminNewUser: (doc) ->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\temails = doc.email.split(',')\n\t\t\t_.each emails, (email)->\n\t\t\t\tuser = {}\n\t\t\t\tuser.email = email\n\t\t\t\tuser.password = doc.password\n\n\t\t\t\t_id = Accounts.createUser user\n\n\t\t\t\tif doc.sendPassword and AdminConfig.fromEmail?\n\t\t\t\t\tEmail.send\n\t\t\t\t\t\tto: user.email\n\t\t\t\t\t\tfrom: AdminConfig.fromEmail\n\t\t\t\t\t\tsubject: 'Your account has been created'\n\t\t\t\t\t\thtml: 'You\\'ve just had an account created for ' + Meteor.absoluteUrl() + ' with password ' + doc.password\n\n\t\t\t\tif not doc.sendPassword\n\t\t\t\t\tAccounts.sendEnrollmentEmail _id\n\n\tadminUpdateUser: (modifier,_id)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tthis.unblock()\n\t\t\tresult = Meteor.users.update {_id:_id}, modifier\n\t\t\treturn result\n\n\tadminSendResetPasswordEmail: (doc)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tconsole.log 'Changing password for user ' + doc._id\n\t\t\tAccounts.sendResetPasswordEmail(doc._id)\n\n\tadminChangePassword: (doc)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tconsole.log 'Changing password for user ' + doc._id\n\t\t\tAccounts.setPassword(doc._id, doc.password)\n\t\t\tlabel: 'Email user their new password'\n\n\tadminCheckAdmin: ->\n\t\tcheck arguments, [Match.Any]\n\t\tuser = Meteor.users.findOne(_id:this.userId)\n\t\tif this.userId and !Roles.userIsInRole(this.userId, ['admin']) and (user.emails.length > 0)\n\t\t\temail = user.emails[0].address\n\t\t\tif typeof Meteor.settings.adminEmails != 'undefined'\n\t\t\t\tadminEmails = Meteor.settings.adminEmails\n\t\t\t\tif adminEmails.indexOf(email) > -1\n\t\t\t\t\tconsole.log 'Adding admin user: ' + email\n\t\t\t\t\tRoles.addUsersToRoles this.userId, ['admin'], Roles.GLOBAL_GROUP\n\t\t\telse if typeof AdminConfig != 'undefined' and typeof AdminConfig.adminEmails == 'object'\n\t\t\t\tadminEmails = AdminConfig.adminEmails\n\t\t\t\tif adminEmails.indexOf(email) > -1\n\t\t\t\t\tconsole.log 'Adding admin user: ' + email\n\t\t\t\t\tRoles.addUsersToRoles this.userId, ['admin'], Roles.GLOBAL_GROUP\n\t\t\telse if this.userId == Meteor.users.findOne({},{sort:{createdAt:1}})._id\n\t\t\t\tconsole.log 'Making first user admin: ' + email\n\t\t\t\tRoles.addUsersToRoles this.userId, ['admin']\n\n\tadminAddUserToRole: (_id,role)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tRoles.addUsersToRoles _id, role, Roles.GLOBAL_GROUP\n\n\tadminRemoveUserToRole: (_id,role)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tRoles.removeUsersFromRoles _id, role, Roles.GLOBAL_GROUP\n\n\tadminSetCollectionSort: (collection, _sort) ->\n\t\tcheck arguments, [Match.Any]\n\t\tglobal.AdminPages[collection].set\n\t\t\tsort: _sort\n","Meteor.methods({\n  adminInsertDoc: function(doc, collection) {\n    var result;\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      this.unblock();\n      result = adminCollectionObject(collection).insert(doc);\n      return result;\n    }\n  },\n  adminUpdateDoc: function(modifier, collection, _id) {\n    var result;\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      this.unblock();\n      result = adminCollectionObject(collection).update({\n        _id: _id\n      }, modifier);\n      return result;\n    }\n  },\n  adminRemoveDoc: function(collection, _id) {\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      if (collection === 'Users') {\n        return Meteor.users.remove({\n          _id: _id\n        });\n      } else {\n        // global[collection].remove {_id:_id}\n        return adminCollectionObject(collection).remove({\n          _id: _id\n        });\n      }\n    }\n  },\n  adminNewUser: function(doc) {\n    var emails;\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      emails = doc.email.split(',');\n      return _.each(emails, function(email) {\n        var _id, user;\n        user = {};\n        user.email = email;\n        user.password = doc.password;\n        _id = Accounts.createUser(user);\n        if (doc.sendPassword && (AdminConfig.fromEmail != null)) {\n          Email.send({\n            to: user.email,\n            from: AdminConfig.fromEmail,\n            subject: 'Your account has been created',\n            html: 'You\\'ve just had an account created for ' + Meteor.absoluteUrl() + ' with password ' + doc.password\n          });\n        }\n        if (!doc.sendPassword) {\n          return Accounts.sendEnrollmentEmail(_id);\n        }\n      });\n    }\n  },\n  adminUpdateUser: function(modifier, _id) {\n    var result;\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      this.unblock();\n      result = Meteor.users.update({\n        _id: _id\n      }, modifier);\n      return result;\n    }\n  },\n  adminSendResetPasswordEmail: function(doc) {\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      console.log('Changing password for user ' + doc._id);\n      return Accounts.sendResetPasswordEmail(doc._id);\n    }\n  },\n  adminChangePassword: function(doc) {\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      console.log('Changing password for user ' + doc._id);\n      Accounts.setPassword(doc._id, doc.password);\n      return {\n        label: 'Email user their new password'\n      };\n    }\n  },\n  adminCheckAdmin: function() {\n    var adminEmails, email, user;\n    check(arguments, [Match.Any]);\n    user = Meteor.users.findOne({\n      _id: this.userId\n    });\n    if (this.userId && !Roles.userIsInRole(this.userId, ['admin']) && (user.emails.length > 0)) {\n      email = user.emails[0].address;\n      if (typeof Meteor.settings.adminEmails !== 'undefined') {\n        adminEmails = Meteor.settings.adminEmails;\n        if (adminEmails.indexOf(email) > -1) {\n          console.log('Adding admin user: ' + email);\n          return Roles.addUsersToRoles(this.userId, ['admin'], Roles.GLOBAL_GROUP);\n        }\n      } else if (typeof AdminConfig !== 'undefined' && typeof AdminConfig.adminEmails === 'object') {\n        adminEmails = AdminConfig.adminEmails;\n        if (adminEmails.indexOf(email) > -1) {\n          console.log('Adding admin user: ' + email);\n          return Roles.addUsersToRoles(this.userId, ['admin'], Roles.GLOBAL_GROUP);\n        }\n      } else if (this.userId === Meteor.users.findOne({}, {\n        sort: {\n          createdAt: 1\n        }\n      })._id) {\n        console.log('Making first user admin: ' + email);\n        return Roles.addUsersToRoles(this.userId, ['admin']);\n      }\n    }\n  },\n  adminAddUserToRole: function(_id, role) {\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      return Roles.addUsersToRoles(_id, role, Roles.GLOBAL_GROUP);\n    }\n  },\n  adminRemoveUserToRole: function(_id, role) {\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      return Roles.removeUsersFromRoles(_id, role, Roles.GLOBAL_GROUP);\n    }\n  },\n  adminSetCollectionSort: function(collection, _sort) {\n    check(arguments, [Match.Any]);\n    return global.AdminPages[collection].set({\n      sort: _sort\n    });\n  }\n});\n"]}