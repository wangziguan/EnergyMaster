{"version":3,"sources":["meteor://ğŸ’»app/packages/zimme_active-route/lib/activeroute.coffee","meteor://ğŸ’»app/lib/activeroute.coffee","meteor://ğŸ’»app/packages/zimme_active-route/client/helpers.coffee","meteor://ğŸ’»app/client/helpers.coffee"],"names":["checkParams","checkRouteOrPath","checkRouterPackages","errorMessages","fr","ir","test","arg","error","check","Match","OneOf","RegExp","String","error1","Error","invalidRouteNameArgument","Object","invalidRouteParamsArgument","ref","ref1","Package","noSupportedRouter","share","config","ReactiveDict","setDefault","activeClass","caseSensitive","disabledClass","value","pattern","result","search","equals","toLowerCase","ActiveRoute","configure","apply","arguments","options","Meteor","isServer","set","name","routeName","routeParams","controller","currentPath","currentRouteName","path","_","isEmpty","Router","current","route","location","get","getName","FlowRouter","watchPathChange","getRouteName","Spacebars","Template","func","helpers","isActive","hasProp","hasOwnProperty","templating","spacebars","type","inverse","helperName","attributes","className","isPath","regex","t","kw","hash","defaults","ObjectIncluding","class","Optional","console","data","omit","isActiveRoute","isActivePath","isNotActiveRoute","isNotActivePath","call","registerHelper"],"mappings":"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","file":"/packages/zimme_active-route.js","sourcesContent":["fr = ir = null\n\ncheckRouteOrPath = (arg) ->\n  try\n    check arg, Match.OneOf RegExp, String\n  catch error\n    throw new Error errorMessages.invalidRouteNameArgument\n\ncheckParams = (arg) ->\n  try\n    check arg, Object\n  catch error\n    throw new Error errorMessages.invalidRouteParamsArgument\n\ncheckRouterPackages = ->\n  fr = Package['kadira:flow-router'] ? Package['meteorhacks:flow-router'] ? Package['kadira:flow-router-ssr']\n  ir = Package['iron:router']\n  throw new Error errorMessages.noSupportedRouter unless ir or fr\n\nerrorMessages =\n  noSupportedRouter:\n    'No supported router installed. Please install ' +\n    'iron:router or meteorhacks:flow-router.'\n\n  invalidRouteNameArgument: 'Invalid argument, must be String or RegExp.'\n  invalidRouteParamsArgument: 'Invalid arguemnt, must be Object.'\n\nshare.config = new ReactiveDict 'activeRouteConfig'\nshare.config.setDefault\n  activeClass: 'active'\n  caseSensitive: true\n  disabledClass: 'disabled'\n\ntest = (value, pattern) ->\n  return false unless value\n\n  if Match.test pattern, RegExp\n    result = value.search pattern\n    result = result > -1\n\n  else if Match.test pattern, String\n    if share.config.equals 'caseSensitive', false\n      value = value.toLowerCase()\n      pattern = pattern.toLowerCase()\n\n    result = value is pattern\n\n  result ?= false\n\nActiveRoute =\n\n  config: ->\n    @configure.apply @, arguments\n\n  configure: (options) ->\n    return if Meteor.isServer\n\n    share.config.set options\n    return\n\n  name: (routeName, routeParams = {}) ->\n    checkRouterPackages()\n\n    return if (Meteor.isServer && !Package['kadira:flow-router-ssr'])\n\n    checkRouteOrPath routeName\n    checkParams routeParams\n\n    if ir\n      if not _.isEmpty(routeParams) and Match.test routeName, String\n        controller = ir.Router.current()\n        currentPath = controller?.location.get().path if controller?.route\n        path = ir.Router.path routeName, routeParams\n\n      else\n        currentRouteName = ir.Router.current()?.route?.getName?()\n\n    if fr\n      if not _.isEmpty(routeParams) and Match.test routeName, String\n        fr.FlowRouter.watchPathChange()\n        currentPath ?= fr.FlowRouter.current().path\n        path ?= fr.FlowRouter.path routeName, routeParams\n\n      else\n        currentRouteName ?= fr.FlowRouter.getRouteName()\n\n    test currentPath or currentRouteName, path or routeName\n\n  path: (path) ->\n    checkRouterPackages()\n\n    return if Meteor.isServer\n\n    checkRouteOrPath path\n\n    if ir\n      controller = ir.Router.current()\n      currentPath = controller?.location.get().path if controller?.route\n\n    if fr\n      fr.FlowRouter.watchPathChange()\n      currentPath ?= fr.FlowRouter.current().path\n\n    test currentPath, path\n","var checkParams, checkRouteOrPath, checkRouterPackages, errorMessages, fr, ir, test;             \n\nfr = ir = null;\n\ncheckRouteOrPath = function(arg) {\n  var error;\n  try {\n    return check(arg, Match.OneOf(RegExp, String));\n  } catch (error1) {\n    error = error1;\n    throw new Error(errorMessages.invalidRouteNameArgument);\n  }\n};\n\ncheckParams = function(arg) {\n  var error;\n  try {\n    return check(arg, Object);\n  } catch (error1) {\n    error = error1;\n    throw new Error(errorMessages.invalidRouteParamsArgument);\n  }\n};\n\ncheckRouterPackages = function() {\n  var ref, ref1;\n  fr = (ref = (ref1 = Package['kadira:flow-router']) != null ? ref1 : Package['meteorhacks:flow-router']) != null ? ref : Package['kadira:flow-router-ssr'];\n  ir = Package['iron:router'];\n  if (!(ir || fr)) {\n    throw new Error(errorMessages.noSupportedRouter);\n  }\n};\n\nerrorMessages = {\n  noSupportedRouter: 'No supported router installed. Please install ' + 'iron:router or meteorhacks:flow-router.',\n  invalidRouteNameArgument: 'Invalid argument, must be String or RegExp.',\n  invalidRouteParamsArgument: 'Invalid arguemnt, must be Object.'\n};\n\nshare.config = new ReactiveDict('activeRouteConfig');\n\nshare.config.setDefault({\n  activeClass: 'active',\n  caseSensitive: true,\n  disabledClass: 'disabled'\n});\n\ntest = function(value, pattern) {\n  var result;\n  if (!value) {\n    return false;\n  }\n  if (Match.test(pattern, RegExp)) {\n    result = value.search(pattern);\n    result = result > -1;\n  } else if (Match.test(pattern, String)) {\n    if (share.config.equals('caseSensitive', false)) {\n      value = value.toLowerCase();\n      pattern = pattern.toLowerCase();\n    }\n    result = value === pattern;\n  }\n  return result != null ? result : result = false;\n};\n\nActiveRoute = {\n  config: function() {\n    return this.configure.apply(this, arguments);\n  },\n  configure: function(options) {\n    if (Meteor.isServer) {\n      return;\n    }\n    share.config.set(options);\n  },\n  name: function(routeName, routeParams = {}) {\n    var controller, currentPath, currentRouteName, path, ref, ref1;\n    checkRouterPackages();\n    if (Meteor.isServer && !Package['kadira:flow-router-ssr']) {\n      return;\n    }\n    checkRouteOrPath(routeName);\n    checkParams(routeParams);\n    if (ir) {\n      if (!_.isEmpty(routeParams) && Match.test(routeName, String)) {\n        controller = ir.Router.current();\n        if (controller != null ? controller.route : void 0) {\n          currentPath = controller != null ? controller.location.get().path : void 0;\n        }\n        path = ir.Router.path(routeName, routeParams);\n      } else {\n        currentRouteName = (ref = ir.Router.current()) != null ? (ref1 = ref.route) != null ? typeof ref1.getName === \"function\" ? ref1.getName() : void 0 : void 0 : void 0;\n      }\n    }\n    if (fr) {\n      if (!_.isEmpty(routeParams) && Match.test(routeName, String)) {\n        fr.FlowRouter.watchPathChange();\n        if (currentPath == null) {\n          currentPath = fr.FlowRouter.current().path;\n        }\n        if (path == null) {\n          path = fr.FlowRouter.path(routeName, routeParams);\n        }\n      } else {\n        if (currentRouteName == null) {\n          currentRouteName = fr.FlowRouter.getRouteName();\n        }\n      }\n    }\n    return test(currentPath || currentRouteName, path || routeName);\n  },\n  path: function(path) {\n    var controller, currentPath;\n    checkRouterPackages();\n    if (Meteor.isServer) {\n      return;\n    }\n    checkRouteOrPath(path);\n    if (ir) {\n      controller = ir.Router.current();\n      if (controller != null ? controller.route : void 0) {\n        currentPath = controller != null ? controller.location.get().path : void 0;\n      }\n    }\n    if (fr) {\n      fr.FlowRouter.watchPathChange();\n      if (currentPath == null) {\n        currentPath = fr.FlowRouter.current().path;\n      }\n    }\n    return test(currentPath, path);\n  }\n};\n","return unless Package.templating and Package.spacebars\n\nTemplate = Package.templating.Template\nSpacebars = Package.spacebars.Spacebars\n\nisActive = (type, inverse = false) ->\n  helperName = 'is'\n  helperName += 'Not' if inverse\n  helperName += \"Active#{type}\"\n\n  (options = {}, attributes = {}) ->\n    if Match.test options, Spacebars.kw\n      options = options.hash\n\n    if Match.test attributes, Spacebars.kw\n      attributes = attributes.hash\n\n    if Match.test options, String\n      if share.config.equals 'regex', true\n        options =\n          regex: options\n\n      else if type is 'Path'\n        options =\n          path: options\n\n      else\n        options =\n          name: options\n\n    options = _.defaults attributes, options\n\n    pattern = Match.ObjectIncluding\n      class: Match.Optional String\n      className: Match.Optional String\n      regex: Match.Optional Match.OneOf RegExp, String\n      name: Match.Optional String\n      path: Match.Optional String\n\n    check options, pattern\n\n    {regex, name, path} = options\n\n    className = options.class ? options.className\n\n    if type is 'Path'\n      name = null\n\n    else\n      path = null\n\n    unless regex or name or path\n      t = if type is 'Route' then 'name' else type\n      t = t.toLowerCase()\n      console.error \"Invalid argument, #{helperName} takes \\\"#{t}\\\", \" +\n        \"#{t}=\\\"#{t}\\\" or regex=\\\"regex\\\"\"\n      return false\n\n    if Match.test regex, String\n      if share.config.equals 'caseSensitive', false\n        regex = new RegExp regex, 'i'\n\n      else\n        regex = new RegExp regex\n\n    regex ?= name or path\n\n    if inverse\n      className ?= share.config.get 'disabledClass'\n    else\n      className ?= share.config.get 'activeClass'\n\n    isPath = true if type is 'Path'\n\n    if isPath\n      result = ActiveRoute.path regex\n\n    else\n      options = _.defaults attributes, attributes.data\n      result = ActiveRoute.name regex, _.omit options, [\n        'class', 'className', 'data'\n        'regex', 'name', 'path'\n      ]\n\n    result = not result if inverse\n\n    if result then className else false\n\nhelpers =\n  isActiveRoute: isActive 'Route'\n\n  isActivePath: isActive 'Path'\n\n  isNotActiveRoute: isActive 'Route', true\n\n  isNotActivePath: isActive 'Path', true\n\nTemplate.registerHelper name, func for own name, func of helpers\n","var Spacebars, Template, func, helpers, isActive, name,\n  hasProp = {}.hasOwnProperty;\n\nif (!(Package.templating && Package.spacebars)) {\n  return;\n}\n\nTemplate = Package.templating.Template;\n\nSpacebars = Package.spacebars.Spacebars;\n\nisActive = function(type, inverse = false) {\n  var helperName;\n  helperName = 'is';\n  if (inverse) {\n    helperName += 'Not';\n  }\n  helperName += `Active${type}`;\n  return function(options = {}, attributes = {}) {\n    var className, isPath, name, path, pattern, ref, regex, result, t;\n    if (Match.test(options, Spacebars.kw)) {\n      options = options.hash;\n    }\n    if (Match.test(attributes, Spacebars.kw)) {\n      attributes = attributes.hash;\n    }\n    if (Match.test(options, String)) {\n      if (share.config.equals('regex', true)) {\n        options = {\n          regex: options\n        };\n      } else if (type === 'Path') {\n        options = {\n          path: options\n        };\n      } else {\n        options = {\n          name: options\n        };\n      }\n    }\n    options = _.defaults(attributes, options);\n    pattern = Match.ObjectIncluding({\n      class: Match.Optional(String),\n      className: Match.Optional(String),\n      regex: Match.Optional(Match.OneOf(RegExp, String)),\n      name: Match.Optional(String),\n      path: Match.Optional(String)\n    });\n    check(options, pattern);\n    ({regex, name, path} = options);\n    className = (ref = options.class) != null ? ref : options.className;\n    if (type === 'Path') {\n      name = null;\n    } else {\n      path = null;\n    }\n    if (!(regex || name || path)) {\n      t = type === 'Route' ? 'name' : type;\n      t = t.toLowerCase();\n      console.error(`Invalid argument, ${helperName} takes \"${t}\", ` + `${t}=\"${t}\" or regex=\"regex\"`);\n      return false;\n    }\n    if (Match.test(regex, String)) {\n      if (share.config.equals('caseSensitive', false)) {\n        regex = new RegExp(regex, 'i');\n      } else {\n        regex = new RegExp(regex);\n      }\n    }\n    if (regex == null) {\n      regex = name || path;\n    }\n    if (inverse) {\n      if (className == null) {\n        className = share.config.get('disabledClass');\n      }\n    } else {\n      if (className == null) {\n        className = share.config.get('activeClass');\n      }\n    }\n    if (type === 'Path') {\n      isPath = true;\n    }\n    if (isPath) {\n      result = ActiveRoute.path(regex);\n    } else {\n      options = _.defaults(attributes, attributes.data);\n      result = ActiveRoute.name(regex, _.omit(options, ['class', 'className', 'data', 'regex', 'name', 'path']));\n    }\n    if (inverse) {\n      result = !result;\n    }\n    if (result) {\n      return className;\n    } else {\n      return false;\n    }\n  };\n};\n\nhelpers = {\n  isActiveRoute: isActive('Route'),\n  isActivePath: isActive('Path'),\n  isNotActiveRoute: isActive('Route', true),\n  isNotActivePath: isActive('Path', true)\n};\n\nfor (name in helpers) {\n  if (!hasProp.call(helpers, name)) continue;\n  func = helpers[name];\n  Template.registerHelper(name, func);\n}\n"]}