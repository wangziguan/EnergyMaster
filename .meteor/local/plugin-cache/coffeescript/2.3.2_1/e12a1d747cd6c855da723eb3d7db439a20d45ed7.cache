{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nMeteor.methods({\n  adminInsertDoc: function (doc, collection) {\n    var result;\n    check(arguments, [Match.Any]);\n\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      this.unblock();\n      result = adminCollectionObject(collection).insert(doc);\n      return result;\n    }\n  },\n  adminUpdateDoc: function (modifier, collection, _id) {\n    var result;\n    check(arguments, [Match.Any]);\n\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      this.unblock();\n      result = adminCollectionObject(collection).update({\n        _id: _id\n      }, modifier);\n      return result;\n    }\n  },\n  adminRemoveDoc: function (collection, _id) {\n    check(arguments, [Match.Any]);\n\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      if (collection === 'Users') {\n        return Meteor.users.remove({\n          _id: _id\n        });\n      } else {\n        // global[collection].remove {_id:_id}\n        return adminCollectionObject(collection).remove({\n          _id: _id\n        });\n      }\n    }\n  },\n  adminNewUser: function (doc) {\n    var emails;\n    check(arguments, [Match.Any]);\n\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      emails = doc.email.split(',');\n      return _.each(emails, function (email) {\n        var _id, user;\n\n        user = {};\n        user.email = email;\n        user.password = doc.password;\n        _id = Accounts.createUser(user);\n\n        if (doc.sendPassword && AdminConfig.fromEmail != null) {\n          Email.send({\n            to: user.email,\n            from: AdminConfig.fromEmail,\n            subject: 'Your account has been created',\n            html: 'You\\'ve just had an account created for ' + Meteor.absoluteUrl() + ' with password ' + doc.password\n          });\n        }\n\n        if (!doc.sendPassword) {\n          return Accounts.sendEnrollmentEmail(_id);\n        }\n      });\n    }\n  },\n  adminUpdateUser: function (modifier, _id) {\n    var result;\n    check(arguments, [Match.Any]);\n\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      this.unblock();\n      result = Meteor.users.update({\n        _id: _id\n      }, modifier);\n      return result;\n    }\n  },\n  adminSendResetPasswordEmail: function (doc) {\n    check(arguments, [Match.Any]);\n\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      console.log('Changing password for user ' + doc._id);\n      return Accounts.sendResetPasswordEmail(doc._id);\n    }\n  },\n  adminChangePassword: function (doc) {\n    check(arguments, [Match.Any]);\n\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      console.log('Changing password for user ' + doc._id);\n      Accounts.setPassword(doc._id, doc.password);\n      return {\n        label: 'Email user their new password'\n      };\n    }\n  },\n  adminCheckAdmin: function () {\n    var adminEmails, email, user;\n    check(arguments, [Match.Any]);\n    user = Meteor.users.findOne({\n      _id: this.userId\n    });\n\n    if (this.userId && !Roles.userIsInRole(this.userId, ['admin']) && user.emails.length > 0) {\n      email = user.emails[0].address;\n\n      if (typeof Meteor.settings.adminEmails !== 'undefined') {\n        adminEmails = Meteor.settings.adminEmails;\n\n        if (adminEmails.indexOf(email) > -1) {\n          console.log('Adding admin user: ' + email);\n          return Roles.addUsersToRoles(this.userId, ['admin'], Roles.GLOBAL_GROUP);\n        }\n      } else if (typeof AdminConfig !== 'undefined' && typeof AdminConfig.adminEmails === 'object') {\n        adminEmails = AdminConfig.adminEmails;\n\n        if (adminEmails.indexOf(email) > -1) {\n          console.log('Adding admin user: ' + email);\n          return Roles.addUsersToRoles(this.userId, ['admin'], Roles.GLOBAL_GROUP);\n        }\n      } else if (this.userId === Meteor.users.findOne({}, {\n        sort: {\n          createdAt: 1\n        }\n      })._id) {\n        console.log('Making first user admin: ' + email);\n        return Roles.addUsersToRoles(this.userId, ['admin']);\n      }\n    }\n  },\n  adminAddUserToRole: function (_id, role) {\n    check(arguments, [Match.Any]);\n\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      return Roles.addUsersToRoles(_id, role, Roles.GLOBAL_GROUP);\n    }\n  },\n  adminRemoveUserToRole: function (_id, role) {\n    check(arguments, [Match.Any]);\n\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      return Roles.removeUsersFromRoles(_id, role, Roles.GLOBAL_GROUP);\n    }\n  },\n  adminSetCollectionSort: function (collection, _sort) {\n    check(arguments, [Match.Any]);\n    return global.AdminPages[collection].set({\n      sort: _sort\n    });\n  }\n});","sourceMap":{"version":3,"sources":["/packages/wangziguan_admin/lib/server/methods.coffee","/lib/server/methods.coffee"],"names":["Meteor","methods","adminInsertDoc","doc","collection","result","check","arguments","Match","Any","Roles","userIsInRole","userId","unblock","adminCollectionObject","insert","adminUpdateDoc","modifier","_id","update","adminRemoveDoc","users","remove","adminNewUser","emails","email","split","_","each","user","password","Accounts","createUser","sendPassword","AdminConfig","fromEmail","Email","send","to","from","subject","html","absoluteUrl","sendEnrollmentEmail","adminUpdateUser","adminSendResetPasswordEmail","console","log","sendResetPasswordEmail","adminChangePassword","setPassword","label","adminCheckAdmin","adminEmails","findOne","length","address","settings","indexOf","addUsersToRoles","GLOBAL_GROUP","sort","createdAt","adminAddUserToRole","role","adminRemoveUserToRole","removeUsersFromRoles","adminSetCollectionSort","_sort","global","AdminPages","set"],"mappings":"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","file":"packages/wangziguan:admin/lib/server/methods.coffee.map","sourcesContent":["Meteor.methods\n\tadminInsertDoc: (doc,collection)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tthis.unblock()\n\t\t\tresult = adminCollectionObject(collection).insert doc\n\t\t\t\t\n\t\t\treturn result\n\n\tadminUpdateDoc: (modifier,collection,_id)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tthis.unblock()\n\t\t\tresult = adminCollectionObject(collection).update {_id:_id},modifier\n\t\t\treturn result\n\n\tadminRemoveDoc: (collection,_id)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tif collection == 'Users'\n\t\t\t\tMeteor.users.remove {_id:_id}\n\t\t\telse\n\t\t\t\t# global[collection].remove {_id:_id}\n\t\t\t\tadminCollectionObject(collection).remove {_id: _id}\n\n\n\tadminNewUser: (doc) ->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\temails = doc.email.split(',')\n\t\t\t_.each emails, (email)->\n\t\t\t\tuser = {}\n\t\t\t\tuser.email = email\n\t\t\t\tuser.password = doc.password\n\n\t\t\t\t_id = Accounts.createUser user\n\n\t\t\t\tif doc.sendPassword and AdminConfig.fromEmail?\n\t\t\t\t\tEmail.send\n\t\t\t\t\t\tto: user.email\n\t\t\t\t\t\tfrom: AdminConfig.fromEmail\n\t\t\t\t\t\tsubject: 'Your account has been created'\n\t\t\t\t\t\thtml: 'You\\'ve just had an account created for ' + Meteor.absoluteUrl() + ' with password ' + doc.password\n\n\t\t\t\tif not doc.sendPassword\n\t\t\t\t\tAccounts.sendEnrollmentEmail _id\n\n\tadminUpdateUser: (modifier,_id)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tthis.unblock()\n\t\t\tresult = Meteor.users.update {_id:_id}, modifier\n\t\t\treturn result\n\n\tadminSendResetPasswordEmail: (doc)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tconsole.log 'Changing password for user ' + doc._id\n\t\t\tAccounts.sendResetPasswordEmail(doc._id)\n\n\tadminChangePassword: (doc)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tconsole.log 'Changing password for user ' + doc._id\n\t\t\tAccounts.setPassword(doc._id, doc.password)\n\t\t\tlabel: 'Email user their new password'\n\n\tadminCheckAdmin: ->\n\t\tcheck arguments, [Match.Any]\n\t\tuser = Meteor.users.findOne(_id:this.userId)\n\t\tif this.userId and !Roles.userIsInRole(this.userId, ['admin']) and (user.emails.length > 0)\n\t\t\temail = user.emails[0].address\n\t\t\tif typeof Meteor.settings.adminEmails != 'undefined'\n\t\t\t\tadminEmails = Meteor.settings.adminEmails\n\t\t\t\tif adminEmails.indexOf(email) > -1\n\t\t\t\t\tconsole.log 'Adding admin user: ' + email\n\t\t\t\t\tRoles.addUsersToRoles this.userId, ['admin'], Roles.GLOBAL_GROUP\n\t\t\telse if typeof AdminConfig != 'undefined' and typeof AdminConfig.adminEmails == 'object'\n\t\t\t\tadminEmails = AdminConfig.adminEmails\n\t\t\t\tif adminEmails.indexOf(email) > -1\n\t\t\t\t\tconsole.log 'Adding admin user: ' + email\n\t\t\t\t\tRoles.addUsersToRoles this.userId, ['admin'], Roles.GLOBAL_GROUP\n\t\t\telse if this.userId == Meteor.users.findOne({},{sort:{createdAt:1}})._id\n\t\t\t\tconsole.log 'Making first user admin: ' + email\n\t\t\t\tRoles.addUsersToRoles this.userId, ['admin']\n\n\tadminAddUserToRole: (_id,role)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tRoles.addUsersToRoles _id, role, Roles.GLOBAL_GROUP\n\n\tadminRemoveUserToRole: (_id,role)->\n\t\tcheck arguments, [Match.Any]\n\t\tif Roles.userIsInRole this.userId, ['admin']\n\t\t\tRoles.removeUsersFromRoles _id, role, Roles.GLOBAL_GROUP\n\n\tadminSetCollectionSort: (collection, _sort) ->\n\t\tcheck arguments, [Match.Any]\n\t\tglobal.AdminPages[collection].set\n\t\t\tsort: _sort\n","Meteor.methods({\n  adminInsertDoc: function(doc, collection) {\n    var result;\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      this.unblock();\n      result = adminCollectionObject(collection).insert(doc);\n      return result;\n    }\n  },\n  adminUpdateDoc: function(modifier, collection, _id) {\n    var result;\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      this.unblock();\n      result = adminCollectionObject(collection).update({\n        _id: _id\n      }, modifier);\n      return result;\n    }\n  },\n  adminRemoveDoc: function(collection, _id) {\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      if (collection === 'Users') {\n        return Meteor.users.remove({\n          _id: _id\n        });\n      } else {\n        // global[collection].remove {_id:_id}\n        return adminCollectionObject(collection).remove({\n          _id: _id\n        });\n      }\n    }\n  },\n  adminNewUser: function(doc) {\n    var emails;\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      emails = doc.email.split(',');\n      return _.each(emails, function(email) {\n        var _id, user;\n        user = {};\n        user.email = email;\n        user.password = doc.password;\n        _id = Accounts.createUser(user);\n        if (doc.sendPassword && (AdminConfig.fromEmail != null)) {\n          Email.send({\n            to: user.email,\n            from: AdminConfig.fromEmail,\n            subject: 'Your account has been created',\n            html: 'You\\'ve just had an account created for ' + Meteor.absoluteUrl() + ' with password ' + doc.password\n          });\n        }\n        if (!doc.sendPassword) {\n          return Accounts.sendEnrollmentEmail(_id);\n        }\n      });\n    }\n  },\n  adminUpdateUser: function(modifier, _id) {\n    var result;\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      this.unblock();\n      result = Meteor.users.update({\n        _id: _id\n      }, modifier);\n      return result;\n    }\n  },\n  adminSendResetPasswordEmail: function(doc) {\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      console.log('Changing password for user ' + doc._id);\n      return Accounts.sendResetPasswordEmail(doc._id);\n    }\n  },\n  adminChangePassword: function(doc) {\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      console.log('Changing password for user ' + doc._id);\n      Accounts.setPassword(doc._id, doc.password);\n      return {\n        label: 'Email user their new password'\n      };\n    }\n  },\n  adminCheckAdmin: function() {\n    var adminEmails, email, user;\n    check(arguments, [Match.Any]);\n    user = Meteor.users.findOne({\n      _id: this.userId\n    });\n    if (this.userId && !Roles.userIsInRole(this.userId, ['admin']) && (user.emails.length > 0)) {\n      email = user.emails[0].address;\n      if (typeof Meteor.settings.adminEmails !== 'undefined') {\n        adminEmails = Meteor.settings.adminEmails;\n        if (adminEmails.indexOf(email) > -1) {\n          console.log('Adding admin user: ' + email);\n          return Roles.addUsersToRoles(this.userId, ['admin'], Roles.GLOBAL_GROUP);\n        }\n      } else if (typeof AdminConfig !== 'undefined' && typeof AdminConfig.adminEmails === 'object') {\n        adminEmails = AdminConfig.adminEmails;\n        if (adminEmails.indexOf(email) > -1) {\n          console.log('Adding admin user: ' + email);\n          return Roles.addUsersToRoles(this.userId, ['admin'], Roles.GLOBAL_GROUP);\n        }\n      } else if (this.userId === Meteor.users.findOne({}, {\n        sort: {\n          createdAt: 1\n        }\n      })._id) {\n        console.log('Making first user admin: ' + email);\n        return Roles.addUsersToRoles(this.userId, ['admin']);\n      }\n    }\n  },\n  adminAddUserToRole: function(_id, role) {\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      return Roles.addUsersToRoles(_id, role, Roles.GLOBAL_GROUP);\n    }\n  },\n  adminRemoveUserToRole: function(_id, role) {\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      return Roles.removeUsersFromRoles(_id, role, Roles.GLOBAL_GROUP);\n    }\n  },\n  adminSetCollectionSort: function(collection, _sort) {\n    check(arguments, [Match.Any]);\n    return global.AdminPages[collection].set({\n      sort: _sort\n    });\n  }\n});\n"]}}