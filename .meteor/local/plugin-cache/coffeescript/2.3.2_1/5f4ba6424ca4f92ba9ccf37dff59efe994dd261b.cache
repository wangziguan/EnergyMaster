{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar adminCreateRouteEdit, adminCreateRouteEditOptions, adminCreateRouteNew, adminCreateRouteNewOptions, adminCreateRouteView, adminCreateRouteViewOptions, adminCreateRoutes, adminCreateTables, adminDelButton, adminEditButton, adminEditDelButtons, adminPublishTables, adminTablePubName, adminTablesDom, defaultColumns;\nthis.AdminTables = {};\nadminTablesDom = '<\"box\"<\"box-header\"<\"box-toolbar\"<\"pull-left\"<lf>><\"pull-right\"p>>><\"box-body\"t>><r>';\nadminEditButton = {\n  data: '_id',\n  title: 'Edit',\n  createdCell: function (node, cellData, rowData) {\n    return $(node).html(Blaze.toHTMLWithData(Template.adminEditBtn, {\n      _id: cellData\n    }));\n  },\n  width: '40px',\n  orderable: false\n};\nadminDelButton = {\n  data: '_id',\n  title: 'Delete',\n  createdCell: function (node, cellData, rowData) {\n    return $(node).html(Blaze.toHTMLWithData(Template.adminDeleteBtn, {\n      _id: cellData\n    }));\n  },\n  width: '40px',\n  orderable: false\n};\nadminEditDelButtons = [adminEditButton, adminDelButton];\n\ndefaultColumns = function () {\n  return [{\n    data: '_id',\n    title: 'ID'\n  }];\n};\n\nadminTablePubName = function (collection) {\n  return \"admin_tabular_\" + collection;\n};\n\nadminCreateTables = function (collections) {\n  return _.each(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0, function (collection, name) {\n    var columns;\n\n    _.defaults(collection, {\n      showEditColumn: true,\n      showDelColumn: true,\n      showInSideBar: true\n    });\n\n    columns = _.map(collection.tableColumns, function (column) {\n      var createdCell;\n\n      if (column.template) {\n        createdCell = function (node, cellData, rowData) {\n          $(node).html('');\n          return Blaze.renderWithData(Template[column.template], {\n            value: cellData,\n            doc: rowData\n          }, node);\n        };\n      }\n\n      return {\n        data: column.name,\n        title: column.label,\n        createdCell: createdCell\n      };\n    });\n\n    if (columns.length === 0) {\n      columns = defaultColumns();\n    }\n\n    if (collection.showEditColumn) {\n      columns.push(adminEditButton);\n    }\n\n    if (collection.showDelColumn) {\n      columns.push(adminDelButton);\n    }\n\n    return AdminTables[name] = new Tabular.Table({\n      name: name,\n      collection: adminCollectionObject(name),\n      pub: collection.children && adminTablePubName(name),\n      sub: collection.sub,\n      columns: columns,\n      extraFields: collection.extraFields,\n      dom: adminTablesDom,\n      selector: collection.selector || function () {\n        return {};\n      }\n    });\n  });\n};\n\nadminCreateRoutes = function (collections) {\n  _.each(collections, adminCreateRouteView);\n\n  _.each(collections, adminCreateRouteNew);\n\n  return _.each(collections, adminCreateRouteEdit);\n};\n\nadminCreateRouteView = function (collection, collectionName) {\n  return Router.route(\"adminDashboard\" + collectionName + \"View\", adminCreateRouteViewOptions(collection, collectionName));\n};\n\nadminCreateRouteViewOptions = function (collection, collectionName) {\n  var options, ref;\n  options = {\n    path: \"/admin/\" + collectionName,\n    template: \"AdminDashboardViewWrapper\",\n    controller: \"AdminController\",\n    data: function () {\n      return {\n        admin_table: AdminTables[collectionName]\n      };\n    },\n    action: function () {\n      return this.render();\n    },\n    onAfterAction: function () {\n      var ref, ref1;\n      Session.set('admin_title', collectionName);\n      Session.set('admin_subtitle', 'View');\n      Session.set('admin_collection_name', collectionName);\n      return (ref = collection.routes) != null ? (ref1 = ref.view) != null ? ref1.onAfterAction : void 0 : void 0;\n    }\n  };\n  return _.defaults(options, (ref = collection.routes) != null ? ref.view : void 0);\n};\n\nadminCreateRouteNew = function (collection, collectionName) {\n  return Router.route(\"adminDashboard\" + collectionName + \"New\", adminCreateRouteNewOptions(collection, collectionName));\n};\n\nadminCreateRouteNewOptions = function (collection, collectionName) {\n  var options, ref;\n  options = {\n    path: \"/admin/\" + collectionName + \"/new\",\n    template: \"AdminDashboardNew\",\n    controller: \"AdminController\",\n    action: function () {\n      return this.render();\n    },\n    onAfterAction: function () {\n      var ref, ref1;\n      Session.set('admin_title', AdminDashboard.collectionLabel(collectionName));\n      Session.set('admin_subtitle', 'Create new');\n      Session.set('admin_collection_page', 'new');\n      Session.set('admin_collection_name', collectionName);\n      return (ref = collection.routes) != null ? (ref1 = ref.new) != null ? ref1.onAfterAction : void 0 : void 0;\n    },\n    data: function () {\n      return {\n        admin_collection: adminCollectionObject(collectionName)\n      };\n    }\n  };\n  return _.defaults(options, (ref = collection.routes) != null ? ref.new : void 0);\n};\n\nadminCreateRouteEdit = function (collection, collectionName) {\n  return Router.route(\"adminDashboard\" + collectionName + \"Edit\", adminCreateRouteEditOptions(collection, collectionName));\n};\n\nadminCreateRouteEditOptions = function (collection, collectionName) {\n  var options, ref;\n  options = {\n    path: \"/admin/\" + collectionName + \"/:_id/edit\",\n    template: \"AdminDashboardEdit\",\n    controller: \"AdminController\",\n    waitOn: function () {\n      var ref, ref1;\n      Meteor.subscribe('adminCollectionDoc', collectionName, parseID(this.params._id));\n      return (ref = collection.routes) != null ? (ref1 = ref.edit) != null ? ref1.waitOn : void 0 : void 0;\n    },\n    action: function () {\n      return this.render();\n    },\n    onAfterAction: function () {\n      var ref, ref1;\n      Session.set('admin_title', AdminDashboard.collectionLabel(collectionName));\n      Session.set('admin_subtitle', 'Edit ' + this.params._id);\n      Session.set('admin_collection_page', 'edit');\n      Session.set('admin_collection_name', collectionName);\n      Session.set('admin_id', parseID(this.params._id));\n      Session.set('admin_doc', adminCollectionObject(collectionName).findOne({\n        _id: parseID(this.params._id)\n      }));\n      return (ref = collection.routes) != null ? (ref1 = ref.edit) != null ? ref1.onAfterAction : void 0 : void 0;\n    },\n    data: function () {\n      return {\n        admin_collection: adminCollectionObject(collectionName)\n      };\n    }\n  };\n  return _.defaults(options, (ref = collection.routes) != null ? ref.edit : void 0);\n};\n\nadminPublishTables = function (collections) {\n  return _.each(collections, function (collection, name) {\n    if (!collection.children) {\n      return void 0;\n    }\n\n    return Meteor.publishComposite(adminTablePubName(name), function (tableName, ids, fields) {\n      var extraFields;\n      check(tableName, String);\n      check(ids, Array);\n      check(fields, Match.Optional(Object));\n      extraFields = _.reduce(collection.extraFields, function (fields, name) {\n        fields[name] = 1;\n        return fields;\n      }, {});\n\n      _.extend(fields, extraFields);\n\n      this.unblock();\n      return {\n        find: function () {\n          this.unblock();\n          return adminCollectionObject(name).find({\n            _id: {\n              $in: ids\n            }\n          }, {\n            fields: fields\n          });\n        },\n        children: collection.children\n      };\n    });\n  });\n};\n\nMeteor.startup(function () {\n  adminCreateTables(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0);\n  adminCreateRoutes(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0);\n\n  if (Meteor.isServer) {\n    adminPublishTables(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0);\n  }\n\n  if (AdminTables.Users) {\n    return void 0;\n  }\n\n  return AdminTables.Users = new Tabular.Table({\n    // Modify selector to allow search by email\n    changeSelector: function (selector, userId) {\n      var $or;\n      $or = selector['$or'];\n      $or && (selector['$or'] = _.map($or, function (exp) {\n        var ref;\n\n        if (((ref = exp.emails) != null ? ref['$regex'] : void 0) != null) {\n          return {\n            emails: {\n              $elemMatch: {\n                address: exp.emails\n              }\n            }\n          };\n        } else {\n          return exp;\n        }\n      }));\n      return selector;\n    },\n    name: 'Users',\n    collection: Meteor.users,\n    columns: _.union([{\n      data: '_id',\n      title: 'Admin',\n      // TODO: use `tmpl`\n      createdCell: function (node, cellData, rowData) {\n        return $(node).html(Blaze.toHTMLWithData(Template.adminUsersIsAdmin, {\n          _id: cellData\n        }));\n      },\n      width: '40px'\n    }, {\n      data: 'emails',\n      title: 'Email',\n      render: function (value) {\n        return value[0].address;\n      },\n      searchable: true\n    }, {\n      data: 'emails',\n      title: 'Mail',\n      // TODO: use `tmpl`\n      createdCell: function (node, cellData, rowData) {\n        return $(node).html(Blaze.toHTMLWithData(Template.adminUsersMailBtn, {\n          emails: cellData\n        }));\n      },\n      width: '40px'\n    }, {\n      data: 'createdAt',\n      title: 'Joined'\n    }], adminEditDelButtons),\n    dom: adminTablesDom\n  });\n});","sourceMap":{"version":3,"sources":["/packages/wangziguan_admin/lib/both/startup.coffee","/lib/both/startup.coffee"],"names":["adminCreateRouteEdit","adminCreateRouteEditOptions","adminCreateRouteNew","adminCreateRouteNewOptions","adminCreateRouteView","adminCreateRouteViewOptions","adminCreateRoutes","adminCreateTables","adminDelButton","adminEditButton","adminEditDelButtons","adminPublishTables","adminTablePubName","adminTablesDom","defaultColumns","AdminTables","data","title","createdCell","node","cellData","rowData","$","html","Blaze","toHTMLWithData","Template","adminEditBtn","_id","width","orderable","adminDeleteBtn","collection","collections","_","each","AdminConfig","name","columns","defaults","showEditColumn","showDelColumn","showInSideBar","map","tableColumns","column","template","renderWithData","value","doc","label","length","push","Tabular","Table","adminCollectionObject","pub","children","sub","extraFields","dom","selector","collectionName","Router","route","options","ref","path","controller","admin_table","action","render","onAfterAction","ref1","Session","set","routes","view","AdminDashboard","collectionLabel","new","admin_collection","waitOn","Meteor","subscribe","parseID","params","edit","findOne","publishComposite","tableName","ids","fields","check","String","Array","Match","Optional","Object","reduce","extend","unblock","find","$in","startup","isServer","Users","changeSelector","userId","$or","exp","emails","$elemMatch","address","users","union","adminUsersIsAdmin","searchable","adminUsersMailBtn"],"mappings":"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","file":"packages/wangziguan:admin/lib/both/startup.coffee.map","sourcesContent":["@AdminTables = {}\n\nadminTablesDom = '<\"box\"<\"box-header\"<\"box-toolbar\"<\"pull-left\"<lf>><\"pull-right\"p>>><\"box-body\"t>><r>'\n\nadminEditButton = {\n\tdata: '_id'\n\ttitle: 'Edit'\n\tcreatedCell: (node, cellData, rowData) ->\n\t\t$(node).html(Blaze.toHTMLWithData Template.adminEditBtn, {_id: cellData})\n\twidth: '40px'\n\torderable: false\n}\nadminDelButton = {\n\tdata: '_id'\n\ttitle: 'Delete'\n\tcreatedCell: (node, cellData, rowData) ->\n\t\t$(node).html(Blaze.toHTMLWithData Template.adminDeleteBtn, {_id: cellData})\n\twidth: '40px'\n\torderable: false\n}\n\nadminEditDelButtons = [\n\tadminEditButton,\n\tadminDelButton\n]\n\ndefaultColumns = () -> [\n  data: '_id',\n  title: 'ID'\n]\n\nadminTablePubName = (collection) ->\n\t\"admin_tabular_#{collection}\"\n\nadminCreateTables = (collections) ->\n\t_.each AdminConfig?.collections, (collection, name) ->\n\t\t_.defaults collection, {\n\t\t\tshowEditColumn: true\n\t\t\tshowDelColumn: true\n\t\t\tshowInSideBar: true\n\t\t}\n\n\t\tcolumns = _.map collection.tableColumns, (column) ->\n\t\t\tif column.template\n\t\t\t\tcreatedCell = (node, cellData, rowData) ->\n\t\t\t\t\t$(node).html ''\n\t\t\t\t\tBlaze.renderWithData(Template[column.template], {value: cellData, doc: rowData}, node)\n\n\t\t\tdata: column.name\n\t\t\ttitle: column.label\n\t\t\tcreatedCell: createdCell\n\n\t\tif columns.length == 0\n\t\t\tcolumns = defaultColumns()\n\n\t\tif collection.showEditColumn\n\t\t\tcolumns.push(adminEditButton)\n\t\tif collection.showDelColumn\n\t\t\tcolumns.push(adminDelButton)\n\n\t\tAdminTables[name] = new Tabular.Table\n\t\t\tname: name\n\t\t\tcollection: adminCollectionObject(name)\n\t\t\tpub: collection.children and adminTablePubName(name)\n\t\t\tsub: collection.sub\n\t\t\tcolumns: columns\n\t\t\textraFields: collection.extraFields\n\t\t\tdom: adminTablesDom\n\t\t\tselector: collection.selector || ->\n\t\t\t\treturn {}\n\nadminCreateRoutes = (collections) ->\n\t_.each collections, adminCreateRouteView\n\t_.each collections,\tadminCreateRouteNew\n\t_.each collections, adminCreateRouteEdit\n\nadminCreateRouteView = (collection, collectionName) ->\n\tRouter.route \"adminDashboard#{collectionName}View\",\n\t\tadminCreateRouteViewOptions collection, collectionName\n\nadminCreateRouteViewOptions = (collection, collectionName) ->\n\toptions =\n\t\tpath: \"/admin/#{collectionName}\"\n\t\ttemplate: \"AdminDashboardViewWrapper\"\n\t\tcontroller: \"AdminController\"\n\t\tdata: ->\n\t\t\tadmin_table: AdminTables[collectionName]\n\t\taction: ->\n\t\t\t@render()\n\t\tonAfterAction: ->\n\t\t\tSession.set 'admin_title', collectionName\n\t\t\tSession.set 'admin_subtitle', 'View'\n\t\t\tSession.set 'admin_collection_name', collectionName\n\t\t\tcollection.routes?.view?.onAfterAction\n\t_.defaults options, collection.routes?.view\n\nadminCreateRouteNew = (collection, collectionName) ->\n\tRouter.route \"adminDashboard#{collectionName}New\",\n\t\tadminCreateRouteNewOptions collection, collectionName\n\nadminCreateRouteNewOptions = (collection, collectionName) ->\n\toptions =\n\t\tpath: \"/admin/#{collectionName}/new\"\n\t\ttemplate: \"AdminDashboardNew\"\n\t\tcontroller: \"AdminController\"\n\t\taction: ->\n\t\t\t@render()\n\t\tonAfterAction: ->\n\t\t\tSession.set 'admin_title', AdminDashboard.collectionLabel collectionName\n\t\t\tSession.set 'admin_subtitle', 'Create new'\n\t\t\tSession.set 'admin_collection_page', 'new'\n\t\t\tSession.set 'admin_collection_name', collectionName\n\t\t\tcollection.routes?.new?.onAfterAction\n\t\tdata: ->\n\t\t\tadmin_collection: adminCollectionObject collectionName\n\t_.defaults options, collection.routes?.new\n\nadminCreateRouteEdit = (collection, collectionName) ->\n\tRouter.route \"adminDashboard#{collectionName}Edit\",\n\t\tadminCreateRouteEditOptions collection, collectionName\n\nadminCreateRouteEditOptions = (collection, collectionName) ->\n\toptions =\n\t\tpath: \"/admin/#{collectionName}/:_id/edit\"\n\t\ttemplate: \"AdminDashboardEdit\"\n\t\tcontroller: \"AdminController\"\n\t\twaitOn: ->\n\t\t\tMeteor.subscribe 'adminCollectionDoc', collectionName, parseID(@params._id)\n\t\t\tcollection.routes?.edit?.waitOn\n\t\taction: ->\n\t\t\t@render()\n\t\tonAfterAction: ->\n\t\t\tSession.set 'admin_title', AdminDashboard.collectionLabel collectionName\n\t\t\tSession.set 'admin_subtitle', 'Edit ' + @params._id\n\t\t\tSession.set 'admin_collection_page', 'edit'\n\t\t\tSession.set 'admin_collection_name', collectionName\n\t\t\tSession.set 'admin_id', parseID(@params._id)\n\t\t\tSession.set 'admin_doc', adminCollectionObject(collectionName).findOne _id : parseID(@params._id)\n\t\t\tcollection.routes?.edit?.onAfterAction\n\t\tdata: ->\n\t\t\tadmin_collection: adminCollectionObject collectionName\n\t_.defaults options, collection.routes?.edit\n\nadminPublishTables = (collections) ->\n\t_.each collections, (collection, name) ->\n\t\tif not collection.children then return undefined\n\t\tMeteor.publishComposite adminTablePubName(name), (tableName, ids, fields) ->\n\t\t\tcheck tableName, String\n\t\t\tcheck ids, Array\n\t\t\tcheck fields, Match.Optional Object\n\n\t\t\textraFields = _.reduce collection.extraFields, (fields, name) ->\n\t\t\t\tfields[name] = 1\n\t\t\t\tfields\n\t\t\t, {}\n\t\t\t_.extend fields, extraFields\n\n\t\t\t@unblock()\n\n\t\t\tfind: ->\n\t\t\t\t@unblock()\n\t\t\t\tadminCollectionObject(name).find {_id: {$in: ids}}, {fields: fields}\n\t\t\tchildren: collection.children\n\nMeteor.startup ->\n\tadminCreateTables AdminConfig?.collections\n\tadminCreateRoutes AdminConfig?.collections\n\tadminPublishTables AdminConfig?.collections if Meteor.isServer\n\n\tif AdminTables.Users then return undefined\n\n\tAdminTables.Users = new Tabular.Table\n\t\t# Modify selector to allow search by email\n\t\tchangeSelector: (selector, userId) ->\n\t\t\t$or = selector['$or']\n\t\t\t$or and selector['$or'] = _.map $or, (exp) ->\n\t\t\t\tif exp.emails?['$regex']?\n\t\t\t\t\temails: $elemMatch: address: exp.emails\n\t\t\t\telse\n\t\t\t\t\texp\n\t\t\tselector\n\n\t\tname: 'Users'\n\t\tcollection: Meteor.users\n\t\tcolumns: _.union [\n\t\t\t{\n\t\t\t\tdata: '_id'\n\t\t\t\ttitle: 'Admin'\n\t\t\t\t# TODO: use `tmpl`\n\t\t\t\tcreatedCell: (node, cellData, rowData) ->\n\t\t\t\t\t$(node).html(Blaze.toHTMLWithData Template.adminUsersIsAdmin, {_id: cellData})\n\t\t\t\twidth: '40px'\n\t\t\t}\n\t\t\t{\n\t\t\t\tdata: 'emails'\n\t\t\t\ttitle: 'Email'\n\t\t\t\trender: (value) ->\n\t\t\t\t\tvalue[0].address\n\t\t\t\tsearchable: true\n\t\t\t}\n\t\t\t{\n\t\t\t\tdata: 'emails'\n\t\t\t\ttitle: 'Mail'\n\t\t\t\t# TODO: use `tmpl`\n\t\t\t\tcreatedCell: (node, cellData, rowData) ->\n\t\t\t\t\t$(node).html(Blaze.toHTMLWithData Template.adminUsersMailBtn, {emails: cellData})\n\t\t\t\twidth: '40px'\n\t\t\t}\n\t\t\t{ data: 'createdAt', title: 'Joined' }\n\t\t], adminEditDelButtons\n\t\tdom: adminTablesDom\n","var adminCreateRouteEdit, adminCreateRouteEditOptions, adminCreateRouteNew, adminCreateRouteNewOptions, adminCreateRouteView, adminCreateRouteViewOptions, adminCreateRoutes, adminCreateTables, adminDelButton, adminEditButton, adminEditDelButtons, adminPublishTables, adminTablePubName, adminTablesDom, defaultColumns;\n\nthis.AdminTables = {};\n\nadminTablesDom = '<\"box\"<\"box-header\"<\"box-toolbar\"<\"pull-left\"<lf>><\"pull-right\"p>>><\"box-body\"t>><r>';\n\nadminEditButton = {\n  data: '_id',\n  title: 'Edit',\n  createdCell: function(node, cellData, rowData) {\n    return $(node).html(Blaze.toHTMLWithData(Template.adminEditBtn, {\n      _id: cellData\n    }));\n  },\n  width: '40px',\n  orderable: false\n};\n\nadminDelButton = {\n  data: '_id',\n  title: 'Delete',\n  createdCell: function(node, cellData, rowData) {\n    return $(node).html(Blaze.toHTMLWithData(Template.adminDeleteBtn, {\n      _id: cellData\n    }));\n  },\n  width: '40px',\n  orderable: false\n};\n\nadminEditDelButtons = [adminEditButton, adminDelButton];\n\ndefaultColumns = function() {\n  return [\n    {\n      data: '_id',\n      title: 'ID'\n    }\n  ];\n};\n\nadminTablePubName = function(collection) {\n  return `admin_tabular_${collection}`;\n};\n\nadminCreateTables = function(collections) {\n  return _.each(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0, function(collection, name) {\n    var columns;\n    _.defaults(collection, {\n      showEditColumn: true,\n      showDelColumn: true,\n      showInSideBar: true\n    });\n    columns = _.map(collection.tableColumns, function(column) {\n      var createdCell;\n      if (column.template) {\n        createdCell = function(node, cellData, rowData) {\n          $(node).html('');\n          return Blaze.renderWithData(Template[column.template], {\n            value: cellData,\n            doc: rowData\n          }, node);\n        };\n      }\n      return {\n        data: column.name,\n        title: column.label,\n        createdCell: createdCell\n      };\n    });\n    if (columns.length === 0) {\n      columns = defaultColumns();\n    }\n    if (collection.showEditColumn) {\n      columns.push(adminEditButton);\n    }\n    if (collection.showDelColumn) {\n      columns.push(adminDelButton);\n    }\n    return AdminTables[name] = new Tabular.Table({\n      name: name,\n      collection: adminCollectionObject(name),\n      pub: collection.children && adminTablePubName(name),\n      sub: collection.sub,\n      columns: columns,\n      extraFields: collection.extraFields,\n      dom: adminTablesDom,\n      selector: collection.selector || function() {\n        return {};\n      }\n    });\n  });\n};\n\nadminCreateRoutes = function(collections) {\n  _.each(collections, adminCreateRouteView);\n  _.each(collections, adminCreateRouteNew);\n  return _.each(collections, adminCreateRouteEdit);\n};\n\nadminCreateRouteView = function(collection, collectionName) {\n  return Router.route(`adminDashboard${collectionName}View`, adminCreateRouteViewOptions(collection, collectionName));\n};\n\nadminCreateRouteViewOptions = function(collection, collectionName) {\n  var options, ref;\n  options = {\n    path: `/admin/${collectionName}`,\n    template: \"AdminDashboardViewWrapper\",\n    controller: \"AdminController\",\n    data: function() {\n      return {\n        admin_table: AdminTables[collectionName]\n      };\n    },\n    action: function() {\n      return this.render();\n    },\n    onAfterAction: function() {\n      var ref, ref1;\n      Session.set('admin_title', collectionName);\n      Session.set('admin_subtitle', 'View');\n      Session.set('admin_collection_name', collectionName);\n      return (ref = collection.routes) != null ? (ref1 = ref.view) != null ? ref1.onAfterAction : void 0 : void 0;\n    }\n  };\n  return _.defaults(options, (ref = collection.routes) != null ? ref.view : void 0);\n};\n\nadminCreateRouteNew = function(collection, collectionName) {\n  return Router.route(`adminDashboard${collectionName}New`, adminCreateRouteNewOptions(collection, collectionName));\n};\n\nadminCreateRouteNewOptions = function(collection, collectionName) {\n  var options, ref;\n  options = {\n    path: `/admin/${collectionName}/new`,\n    template: \"AdminDashboardNew\",\n    controller: \"AdminController\",\n    action: function() {\n      return this.render();\n    },\n    onAfterAction: function() {\n      var ref, ref1;\n      Session.set('admin_title', AdminDashboard.collectionLabel(collectionName));\n      Session.set('admin_subtitle', 'Create new');\n      Session.set('admin_collection_page', 'new');\n      Session.set('admin_collection_name', collectionName);\n      return (ref = collection.routes) != null ? (ref1 = ref.new) != null ? ref1.onAfterAction : void 0 : void 0;\n    },\n    data: function() {\n      return {\n        admin_collection: adminCollectionObject(collectionName)\n      };\n    }\n  };\n  return _.defaults(options, (ref = collection.routes) != null ? ref.new : void 0);\n};\n\nadminCreateRouteEdit = function(collection, collectionName) {\n  return Router.route(`adminDashboard${collectionName}Edit`, adminCreateRouteEditOptions(collection, collectionName));\n};\n\nadminCreateRouteEditOptions = function(collection, collectionName) {\n  var options, ref;\n  options = {\n    path: `/admin/${collectionName}/:_id/edit`,\n    template: \"AdminDashboardEdit\",\n    controller: \"AdminController\",\n    waitOn: function() {\n      var ref, ref1;\n      Meteor.subscribe('adminCollectionDoc', collectionName, parseID(this.params._id));\n      return (ref = collection.routes) != null ? (ref1 = ref.edit) != null ? ref1.waitOn : void 0 : void 0;\n    },\n    action: function() {\n      return this.render();\n    },\n    onAfterAction: function() {\n      var ref, ref1;\n      Session.set('admin_title', AdminDashboard.collectionLabel(collectionName));\n      Session.set('admin_subtitle', 'Edit ' + this.params._id);\n      Session.set('admin_collection_page', 'edit');\n      Session.set('admin_collection_name', collectionName);\n      Session.set('admin_id', parseID(this.params._id));\n      Session.set('admin_doc', adminCollectionObject(collectionName).findOne({\n        _id: parseID(this.params._id)\n      }));\n      return (ref = collection.routes) != null ? (ref1 = ref.edit) != null ? ref1.onAfterAction : void 0 : void 0;\n    },\n    data: function() {\n      return {\n        admin_collection: adminCollectionObject(collectionName)\n      };\n    }\n  };\n  return _.defaults(options, (ref = collection.routes) != null ? ref.edit : void 0);\n};\n\nadminPublishTables = function(collections) {\n  return _.each(collections, function(collection, name) {\n    if (!collection.children) {\n      return void 0;\n    }\n    return Meteor.publishComposite(adminTablePubName(name), function(tableName, ids, fields) {\n      var extraFields;\n      check(tableName, String);\n      check(ids, Array);\n      check(fields, Match.Optional(Object));\n      extraFields = _.reduce(collection.extraFields, function(fields, name) {\n        fields[name] = 1;\n        return fields;\n      }, {});\n      _.extend(fields, extraFields);\n      this.unblock();\n      return {\n        find: function() {\n          this.unblock();\n          return adminCollectionObject(name).find({\n            _id: {\n              $in: ids\n            }\n          }, {\n            fields: fields\n          });\n        },\n        children: collection.children\n      };\n    });\n  });\n};\n\nMeteor.startup(function() {\n  adminCreateTables(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0);\n  adminCreateRoutes(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0);\n  if (Meteor.isServer) {\n    adminPublishTables(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0);\n  }\n  if (AdminTables.Users) {\n    return void 0;\n  }\n  return AdminTables.Users = new Tabular.Table({\n    // Modify selector to allow search by email\n    changeSelector: function(selector, userId) {\n      var $or;\n      $or = selector['$or'];\n      $or && (selector['$or'] = _.map($or, function(exp) {\n        var ref;\n        if (((ref = exp.emails) != null ? ref['$regex'] : void 0) != null) {\n          return {\n            emails: {\n              $elemMatch: {\n                address: exp.emails\n              }\n            }\n          };\n        } else {\n          return exp;\n        }\n      }));\n      return selector;\n    },\n    name: 'Users',\n    collection: Meteor.users,\n    columns: _.union([\n      {\n        data: '_id',\n        title: 'Admin',\n        // TODO: use `tmpl`\n        createdCell: function(node,\n      cellData,\n      rowData) {\n          return $(node).html(Blaze.toHTMLWithData(Template.adminUsersIsAdmin,\n      {\n            _id: cellData\n          }));\n        },\n        width: '40px'\n      },\n      {\n        data: 'emails',\n        title: 'Email',\n        render: function(value) {\n          return value[0].address;\n        },\n        searchable: true\n      },\n      {\n        data: 'emails',\n        title: 'Mail',\n        // TODO: use `tmpl`\n        createdCell: function(node,\n      cellData,\n      rowData) {\n          return $(node).html(Blaze.toHTMLWithData(Template.adminUsersMailBtn,\n      {\n            emails: cellData\n          }));\n        },\n        width: '40px'\n      },\n      {\n        data: 'createdAt',\n        title: 'Joined'\n      }\n    ], adminEditDelButtons),\n    dom: adminTablesDom\n  });\n});\n"]}}