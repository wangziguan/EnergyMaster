{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$7","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$9","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/wangziguan/wzg/EnergyMaster/packages/wangziguan:admin/lib/server/methods.coffee","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/wangziguan:admin/lib/server/methods.coffee","filename":"/home/wangziguan/wzg/EnergyMaster/packages/wangziguan:admin/lib/server/methods.coffee","passPerPreset":false,"envName":"development","cwd":"/home/wangziguan/wzg/EnergyMaster","root":"/home/wangziguan/wzg/EnergyMaster","presets":[],"generatorOpts":{"filename":"/home/wangziguan/wzg/EnergyMaster/packages/wangziguan:admin/lib/server/methods.coffee","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/wangziguan:admin/lib/server/methods.coffee"}},"code":"Meteor.methods({\n  adminInsertDoc: function (doc, collection) {\n    var result;\n    check(arguments, [Match.Any]);\n\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      this.unblock();\n      result = adminCollectionObject(collection).insert(doc);\n      return result;\n    }\n  },\n  adminUpdateDoc: function (modifier, collection, _id) {\n    var result;\n    check(arguments, [Match.Any]);\n\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      this.unblock();\n      result = adminCollectionObject(collection).update({\n        _id: _id\n      }, modifier);\n      return result;\n    }\n  },\n  adminRemoveDoc: function (collection, _id) {\n    check(arguments, [Match.Any]);\n\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      if (collection === 'Users') {\n        return Meteor.users.remove({\n          _id: _id\n        });\n      } else {\n        // global[collection].remove {_id:_id}\n        return adminCollectionObject(collection).remove({\n          _id: _id\n        });\n      }\n    }\n  },\n  adminNewUser: function (doc) {\n    var emails;\n    check(arguments, [Match.Any]);\n\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      emails = doc.email.split(',');\n      return _.each(emails, function (email) {\n        var _id, user;\n\n        user = {};\n        user.email = email;\n        user.password = doc.password;\n        _id = Accounts.createUser(user);\n\n        if (doc.sendPassword && AdminConfig.fromEmail != null) {\n          Email.send({\n            to: user.email,\n            from: AdminConfig.fromEmail,\n            subject: 'Your account has been created',\n            html: 'You\\'ve just had an account created for ' + Meteor.absoluteUrl() + ' with password ' + doc.password\n          });\n        }\n\n        if (!doc.sendPassword) {\n          return Accounts.sendEnrollmentEmail(_id);\n        }\n      });\n    }\n  },\n  adminUpdateUser: function (modifier, _id) {\n    var result;\n    check(arguments, [Match.Any]);\n\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      this.unblock();\n      result = Meteor.users.update({\n        _id: _id\n      }, modifier);\n      return result;\n    }\n  },\n  adminSendResetPasswordEmail: function (doc) {\n    check(arguments, [Match.Any]);\n\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      console.log('Changing password for user ' + doc._id);\n      return Accounts.sendResetPasswordEmail(doc._id);\n    }\n  },\n  adminChangePassword: function (doc) {\n    check(arguments, [Match.Any]);\n\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      console.log('Changing password for user ' + doc._id);\n      Accounts.setPassword(doc._id, doc.password);\n      return {\n        label: 'Email user their new password'\n      };\n    }\n  },\n  adminCheckAdmin: function () {\n    var adminEmails, email, user;\n    check(arguments, [Match.Any]);\n    user = Meteor.users.findOne({\n      _id: this.userId\n    });\n\n    if (this.userId && !Roles.userIsInRole(this.userId, ['admin']) && user.emails.length > 0) {\n      email = user.emails[0].address;\n\n      if (typeof Meteor.settings.adminEmails !== 'undefined') {\n        adminEmails = Meteor.settings.adminEmails;\n\n        if (adminEmails.indexOf(email) > -1) {\n          console.log('Adding admin user: ' + email);\n          return Roles.addUsersToRoles(this.userId, ['admin'], Roles.GLOBAL_GROUP);\n        }\n      } else if (typeof AdminConfig !== 'undefined' && typeof AdminConfig.adminEmails === 'object') {\n        adminEmails = AdminConfig.adminEmails;\n\n        if (adminEmails.indexOf(email) > -1) {\n          console.log('Adding admin user: ' + email);\n          return Roles.addUsersToRoles(this.userId, ['admin'], Roles.GLOBAL_GROUP);\n        }\n      } else if (this.userId === Meteor.users.findOne({}, {\n        sort: {\n          createdAt: 1\n        }\n      })._id) {\n        console.log('Making first user admin: ' + email);\n        return Roles.addUsersToRoles(this.userId, ['admin']);\n      }\n    }\n  },\n  adminAddUserToRole: function (_id, role) {\n    check(arguments, [Match.Any]);\n\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      return Roles.addUsersToRoles(_id, role, Roles.GLOBAL_GROUP);\n    }\n  },\n  adminRemoveUserToRole: function (_id, role) {\n    check(arguments, [Match.Any]);\n\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      return Roles.removeUsersFromRoles(_id, role, Roles.GLOBAL_GROUP);\n    }\n  },\n  adminSetCollectionSort: function (collection, _sort) {\n    check(arguments, [Match.Any]);\n    return global.AdminPages[collection].set({\n      sort: _sort\n    });\n  }\n});","map":{"version":3,"sources":["packages/wangziguan:admin/lib/server/methods.coffee"],"names":["Meteor","methods","adminInsertDoc","doc","collection","result","check","arguments","Match","Any","Roles","userIsInRole","userId","unblock","adminCollectionObject","insert","adminUpdateDoc","modifier","_id","update","adminRemoveDoc","users","remove","adminNewUser","emails","email","split","_","each","user","password","Accounts","createUser","sendPassword","AdminConfig","fromEmail","Email","send","to","from","subject","html","absoluteUrl","sendEnrollmentEmail","adminUpdateUser","adminSendResetPasswordEmail","console","log","sendResetPasswordEmail","adminChangePassword","setPassword","label","adminCheckAdmin","adminEmails","findOne","length","address","settings","indexOf","addUsersToRoles","GLOBAL_GROUP","sort","createdAt","adminAddUserToRole","role","adminRemoveUserToRole","removeUsersFromRoles","adminSetCollectionSort","_sort","global","AdminPages","set"],"mappings":"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","sourcesContent":["Meteor.methods({\n  adminInsertDoc: function(doc, collection) {\n    var result;\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      this.unblock();\n      result = adminCollectionObject(collection).insert(doc);\n      return result;\n    }\n  },\n  adminUpdateDoc: function(modifier, collection, _id) {\n    var result;\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      this.unblock();\n      result = adminCollectionObject(collection).update({\n        _id: _id\n      }, modifier);\n      return result;\n    }\n  },\n  adminRemoveDoc: function(collection, _id) {\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      if (collection === 'Users') {\n        return Meteor.users.remove({\n          _id: _id\n        });\n      } else {\n        // global[collection].remove {_id:_id}\n        return adminCollectionObject(collection).remove({\n          _id: _id\n        });\n      }\n    }\n  },\n  adminNewUser: function(doc) {\n    var emails;\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      emails = doc.email.split(',');\n      return _.each(emails, function(email) {\n        var _id, user;\n        user = {};\n        user.email = email;\n        user.password = doc.password;\n        _id = Accounts.createUser(user);\n        if (doc.sendPassword && (AdminConfig.fromEmail != null)) {\n          Email.send({\n            to: user.email,\n            from: AdminConfig.fromEmail,\n            subject: 'Your account has been created',\n            html: 'You\\'ve just had an account created for ' + Meteor.absoluteUrl() + ' with password ' + doc.password\n          });\n        }\n        if (!doc.sendPassword) {\n          return Accounts.sendEnrollmentEmail(_id);\n        }\n      });\n    }\n  },\n  adminUpdateUser: function(modifier, _id) {\n    var result;\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      this.unblock();\n      result = Meteor.users.update({\n        _id: _id\n      }, modifier);\n      return result;\n    }\n  },\n  adminSendResetPasswordEmail: function(doc) {\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      console.log('Changing password for user ' + doc._id);\n      return Accounts.sendResetPasswordEmail(doc._id);\n    }\n  },\n  adminChangePassword: function(doc) {\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      console.log('Changing password for user ' + doc._id);\n      Accounts.setPassword(doc._id, doc.password);\n      return {\n        label: 'Email user their new password'\n      };\n    }\n  },\n  adminCheckAdmin: function() {\n    var adminEmails, email, user;\n    check(arguments, [Match.Any]);\n    user = Meteor.users.findOne({\n      _id: this.userId\n    });\n    if (this.userId && !Roles.userIsInRole(this.userId, ['admin']) && (user.emails.length > 0)) {\n      email = user.emails[0].address;\n      if (typeof Meteor.settings.adminEmails !== 'undefined') {\n        adminEmails = Meteor.settings.adminEmails;\n        if (adminEmails.indexOf(email) > -1) {\n          console.log('Adding admin user: ' + email);\n          return Roles.addUsersToRoles(this.userId, ['admin'], Roles.GLOBAL_GROUP);\n        }\n      } else if (typeof AdminConfig !== 'undefined' && typeof AdminConfig.adminEmails === 'object') {\n        adminEmails = AdminConfig.adminEmails;\n        if (adminEmails.indexOf(email) > -1) {\n          console.log('Adding admin user: ' + email);\n          return Roles.addUsersToRoles(this.userId, ['admin'], Roles.GLOBAL_GROUP);\n        }\n      } else if (this.userId === Meteor.users.findOne({}, {\n        sort: {\n          createdAt: 1\n        }\n      })._id) {\n        console.log('Making first user admin: ' + email);\n        return Roles.addUsersToRoles(this.userId, ['admin']);\n      }\n    }\n  },\n  adminAddUserToRole: function(_id, role) {\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      return Roles.addUsersToRoles(_id, role, Roles.GLOBAL_GROUP);\n    }\n  },\n  adminRemoveUserToRole: function(_id, role) {\n    check(arguments, [Match.Any]);\n    if (Roles.userIsInRole(this.userId, ['admin'])) {\n      return Roles.removeUsersFromRoles(_id, role, Roles.GLOBAL_GROUP);\n    }\n  },\n  adminSetCollectionSort: function(collection, _sort) {\n    check(arguments, [Match.Any]);\n    return global.AdminPages[collection].set({\n      sort: _sort\n    });\n  }\n});\n"]},"sourceType":"script","hash":"e81146b631645e1e65d2bdbadc73f5f5fcf3feda"}
