{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 0);\nAdminDashboard = {\n  schemas: {},\n  sidebarItems: [],\n  collectionItems: [],\n  alertSuccess: function (message) {\n    return Session.set('adminSuccess', message);\n  },\n  alertFailure: function (message) {\n    return Session.set('adminError', message);\n  },\n  checkAdmin: function () {\n    if (!Roles.userIsInRole(Meteor.userId(), ['admin'])) {\n      Meteor.call('adminCheckAdmin');\n\n      if (typeof (typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.nonAdminRedirectRoute : void 0) === \"string\") {\n        Router.go(AdminConfig.nonAdminRedirectRoute);\n      }\n    }\n\n    if (typeof this.next === 'function') {\n      return this.next();\n    }\n  },\n  adminRoutes: ['adminDashboard', 'adminDashboardUsersNew', 'adminDashboardUsersEdit', 'adminDashboardView', 'adminDashboardNew', 'adminDashboardEdit'],\n  collectionLabel: function (collection) {\n    var ref;\n\n    if (collection === 'Users') {\n      return 'Users';\n    } else if (collection != null && typeof ((ref = AdminConfig.collections[collection]) != null ? ref.label : void 0) === 'string') {\n      return AdminConfig.collections[collection].label;\n    } else {\n      return Session.get('admin_collection_name');\n    }\n  },\n  addSidebarItem: function (title, url, options) {\n    var item;\n    item = {\n      title: title\n    };\n\n    if (_.isObject(url) && typeof options === 'undefined') {\n      item.options = url;\n    } else {\n      item.url = url;\n      item.options = options;\n    }\n\n    return this.sidebarItems.push(item);\n  },\n  extendSidebarItem: function (title, urls) {\n    var existing;\n\n    if (_.isObject(urls)) {\n      urls = [urls];\n    }\n\n    existing = _.find(this.sidebarItems, function (item) {\n      return item.title === title;\n    });\n\n    if (existing) {\n      return existing.options.urls = _.union(existing.options.urls, urls);\n    }\n  },\n  addCollectionItem: function (fn) {\n    return this.collectionItems.push(fn);\n  },\n  path: function (s) {\n    var path;\n    path = '/admin';\n\n    if (typeof s === 'string' && s.length > 0) {\n      path += (s[0] === '/' ? '' : '/') + s;\n    }\n\n    return path;\n  }\n};\nAdminDashboard.schemas.newUser = new SimpleSchema({\n  email: {\n    type: String,\n    label: \"Email address\"\n  },\n  password: {\n    type: String,\n    label: 'Password'\n  },\n  sendPassword: {\n    type: Boolean,\n    label: 'Send this user their password by email',\n    optional: true\n  }\n});\nAdminDashboard.schemas.sendResetPasswordEmail = new SimpleSchema({\n  _id: {\n    type: String\n  }\n});\nAdminDashboard.schemas.changePassword = new SimpleSchema({\n  _id: {\n    type: String\n  },\n  password: {\n    type: String\n  }\n});","sourceMap":{"version":3,"sources":["/packages/wangziguan_admin/lib/both/AdminDashboard.coffee","/lib/both/AdminDashboard.coffee"],"names":["SimpleSchema","module","link","v","AdminDashboard","schemas","sidebarItems","collectionItems","alertSuccess","message","Session","set","alertFailure","checkAdmin","Roles","userIsInRole","Meteor","userId","call","AdminConfig","nonAdminRedirectRoute","Router","go","next","adminRoutes","collectionLabel","collection","ref","collections","label","get","addSidebarItem","title","url","options","item","_","isObject","push","extendSidebarItem","urls","existing","find","union","addCollectionItem","fn","path","s","length","newUser","email","type","String","password","sendPassword","Boolean","optional","sendResetPasswordEmail","_id","changePassword"],"mappings":"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","file":"packages/wangziguan:admin/lib/both/AdminDashboard.coffee.map","sourcesContent":["import SimpleSchema from 'simpl-schema';\n\nAdminDashboard =\n\tschemas: {}\n\tsidebarItems: []\n\tcollectionItems: []\n\talertSuccess: (message)->\n\t\tSession.set 'adminSuccess', message\n\talertFailure: (message)->\n\t\tSession.set 'adminError', message\n\n\tcheckAdmin: ->\n\t\tif not Roles.userIsInRole Meteor.userId(), ['admin']\n\t\t\tMeteor.call 'adminCheckAdmin'\n\t\t\tif (typeof AdminConfig?.nonAdminRedirectRoute == \"string\")\n\t\t\t\tRouter.go AdminConfig.nonAdminRedirectRoute\n\t\tif typeof @.next == 'function'\n\t\t\t@next()\n\tadminRoutes: ['adminDashboard','adminDashboardUsersNew','adminDashboardUsersEdit','adminDashboardView','adminDashboardNew','adminDashboardEdit']\n\tcollectionLabel: (collection)->\n\t\tif collection == 'Users'\n\t\t\t'Users'\n\t\telse if collection? and typeof AdminConfig.collections[collection]?.label == 'string'\n\t\t\tAdminConfig.collections[collection].label\n\t\telse Session.get 'admin_collection_name'\n\n\taddSidebarItem: (title, url, options) ->\n\t\titem = title: title\n\t\tif _.isObject(url) and typeof options == 'undefined'\n\t\t\titem.options = url\n\t\telse\n\t\t\titem.url = url\n\t\t\titem.options = options\n\n\t\t@sidebarItems.push item\n\n\textendSidebarItem: (title, urls) ->\n\t\tif _.isObject(urls) then urls = [urls]\n\n\t\texisting = _.find @sidebarItems, (item) -> item.title == title\n\t\tif existing\n\t\t\texisting.options.urls = _.union existing.options.urls, urls\n\n\taddCollectionItem: (fn) ->\n\t\t@collectionItems.push fn\n\n\tpath: (s) ->\n\t\tpath = '/admin'\n\t\tif typeof s == 'string' and s.length > 0\n\t\t\tpath += (if s[0] == '/' then '' else '/') + s\n\t\tpath\n\n\nAdminDashboard.schemas.newUser = new SimpleSchema\n\temail: \n\t\ttype: String\n\t\tlabel: \"Email address\"\n\tpassword:\n\t\ttype: String\n\t\tlabel: 'Password'\n\tsendPassword:\n\t\ttype: Boolean\n\t\tlabel: 'Send this user their password by email'\n\t\toptional: true\n\nAdminDashboard.schemas.sendResetPasswordEmail = new SimpleSchema\n\t_id:\n\t\ttype: String\n\nAdminDashboard.schemas.changePassword = new SimpleSchema\n\t_id:\n\t\ttype: String\n\tpassword:\n\t\ttype: String\n","                   \n\nimport SimpleSchema from 'simpl-schema';\n\nAdminDashboard = {\n  schemas: {},\n  sidebarItems: [],\n  collectionItems: [],\n  alertSuccess: function(message) {\n    return Session.set('adminSuccess', message);\n  },\n  alertFailure: function(message) {\n    return Session.set('adminError', message);\n  },\n  checkAdmin: function() {\n    if (!Roles.userIsInRole(Meteor.userId(), ['admin'])) {\n      Meteor.call('adminCheckAdmin');\n      if (typeof (typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.nonAdminRedirectRoute : void 0) === \"string\") {\n        Router.go(AdminConfig.nonAdminRedirectRoute);\n      }\n    }\n    if (typeof this.next === 'function') {\n      return this.next();\n    }\n  },\n  adminRoutes: ['adminDashboard', 'adminDashboardUsersNew', 'adminDashboardUsersEdit', 'adminDashboardView', 'adminDashboardNew', 'adminDashboardEdit'],\n  collectionLabel: function(collection) {\n    var ref;\n    if (collection === 'Users') {\n      return 'Users';\n    } else if ((collection != null) && typeof ((ref = AdminConfig.collections[collection]) != null ? ref.label : void 0) === 'string') {\n      return AdminConfig.collections[collection].label;\n    } else {\n      return Session.get('admin_collection_name');\n    }\n  },\n  addSidebarItem: function(title, url, options) {\n    var item;\n    item = {\n      title: title\n    };\n    if (_.isObject(url) && typeof options === 'undefined') {\n      item.options = url;\n    } else {\n      item.url = url;\n      item.options = options;\n    }\n    return this.sidebarItems.push(item);\n  },\n  extendSidebarItem: function(title, urls) {\n    var existing;\n    if (_.isObject(urls)) {\n      urls = [urls];\n    }\n    existing = _.find(this.sidebarItems, function(item) {\n      return item.title === title;\n    });\n    if (existing) {\n      return existing.options.urls = _.union(existing.options.urls, urls);\n    }\n  },\n  addCollectionItem: function(fn) {\n    return this.collectionItems.push(fn);\n  },\n  path: function(s) {\n    var path;\n    path = '/admin';\n    if (typeof s === 'string' && s.length > 0) {\n      path += (s[0] === '/' ? '' : '/') + s;\n    }\n    return path;\n  }\n};\n\nAdminDashboard.schemas.newUser = new SimpleSchema({\n  email: {\n    type: String,\n    label: \"Email address\"\n  },\n  password: {\n    type: String,\n    label: 'Password'\n  },\n  sendPassword: {\n    type: Boolean,\n    label: 'Send this user their password by email',\n    optional: true\n  }\n});\n\nAdminDashboard.schemas.sendResetPasswordEmail = new SimpleSchema({\n  _id: {\n    type: String\n  }\n});\n\nAdminDashboard.schemas.changePassword = new SimpleSchema({\n  _id: {\n    type: String\n  },\n  password: {\n    type: String\n  }\n});\n"]}}