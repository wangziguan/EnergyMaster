{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar adminCreateRouteEdit, adminCreateRouteEditOptions, adminCreateRouteNew, adminCreateRouteNewOptions, adminCreateRouteView, adminCreateRouteViewOptions, adminCreateRoutes, adminCreateTables, adminDelButton, adminEditButton, adminEditDelButtons, adminPublishTables, adminTablePubName, adminTablesDom, defaultColumns;\n\nthis.AdminTables = {};\n\nadminTablesDom = '<\"box\"<\"box-header\"<\"box-toolbar\"<\"pull-left\"<lf>><\"pull-right\"p>>><\"box-body\"t>><r>';\n\nadminEditButton = {\n  data: '_id',\n  title: 'Edit',\n  createdCell: function(node, cellData, rowData) {\n    return $(node).html(Blaze.toHTMLWithData(Template.adminEditBtn, {\n      _id: cellData\n    }));\n  },\n  width: '40px',\n  orderable: false\n};\n\nadminDelButton = {\n  data: '_id',\n  title: 'Delete',\n  createdCell: function(node, cellData, rowData) {\n    return $(node).html(Blaze.toHTMLWithData(Template.adminDeleteBtn, {\n      _id: cellData\n    }));\n  },\n  width: '40px',\n  orderable: false\n};\n\nadminEditDelButtons = [adminEditButton, adminDelButton];\n\ndefaultColumns = function() {\n  return [\n    {\n      data: '_id',\n      title: 'ID'\n    }\n  ];\n};\n\nadminTablePubName = function(collection) {\n  return \"admin_tabular_\" + collection;\n};\n\nadminCreateTables = function(collections) {\n  return _.each(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0, function(collection, name) {\n    var columns;\n    _.defaults(collection, {\n      showEditColumn: true,\n      showDelColumn: true,\n      showInSideBar: true\n    });\n    columns = _.map(collection.tableColumns, function(column) {\n      var createdCell;\n      if (column.template) {\n        createdCell = function(node, cellData, rowData) {\n          $(node).html('');\n          return Blaze.renderWithData(Template[column.template], {\n            value: cellData,\n            doc: rowData\n          }, node);\n        };\n      }\n      return {\n        data: column.name,\n        title: column.label,\n        createdCell: createdCell\n      };\n    });\n    if (columns.length === 0) {\n      columns = defaultColumns();\n    }\n    if (collection.showEditColumn) {\n      columns.push(adminEditButton);\n    }\n    if (collection.showDelColumn) {\n      columns.push(adminDelButton);\n    }\n    return AdminTables[name] = new Tabular.Table({\n      name: name,\n      collection: adminCollectionObject(name),\n      pub: collection.children && adminTablePubName(name),\n      sub: collection.sub,\n      columns: columns,\n      extraFields: collection.extraFields,\n      dom: adminTablesDom,\n      selector: collection.selector || function() {\n        return {};\n      }\n    });\n  });\n};\n\nadminCreateRoutes = function(collections) {\n  _.each(collections, adminCreateRouteView);\n  _.each(collections, adminCreateRouteNew);\n  return _.each(collections, adminCreateRouteEdit);\n};\n\nadminCreateRouteView = function(collection, collectionName) {\n  return Router.route(\"adminDashboard\" + collectionName + \"View\", adminCreateRouteViewOptions(collection, collectionName));\n};\n\nadminCreateRouteViewOptions = function(collection, collectionName) {\n  var options, ref;\n  options = {\n    path: \"/admin/\" + collectionName,\n    template: \"AdminDashboardViewWrapper\",\n    controller: \"AdminController\",\n    data: function() {\n      return {\n        admin_table: AdminTables[collectionName]\n      };\n    },\n    action: function() {\n      return this.render();\n    },\n    onAfterAction: function() {\n      var ref, ref1;\n      Session.set('admin_title', collectionName);\n      Session.set('admin_subtitle', 'View');\n      Session.set('admin_collection_name', collectionName);\n      return (ref = collection.routes) != null ? (ref1 = ref.view) != null ? ref1.onAfterAction : void 0 : void 0;\n    }\n  };\n  return _.defaults(options, (ref = collection.routes) != null ? ref.view : void 0);\n};\n\nadminCreateRouteNew = function(collection, collectionName) {\n  return Router.route(\"adminDashboard\" + collectionName + \"New\", adminCreateRouteNewOptions(collection, collectionName));\n};\n\nadminCreateRouteNewOptions = function(collection, collectionName) {\n  var options, ref;\n  options = {\n    path: \"/admin/\" + collectionName + \"/new\",\n    template: \"AdminDashboardNew\",\n    controller: \"AdminController\",\n    action: function() {\n      return this.render();\n    },\n    onAfterAction: function() {\n      var ref, ref1;\n      Session.set('admin_title', AdminDashboard.collectionLabel(collectionName));\n      Session.set('admin_subtitle', 'Create new');\n      Session.set('admin_collection_page', 'new');\n      Session.set('admin_collection_name', collectionName);\n      return (ref = collection.routes) != null ? (ref1 = ref[\"new\"]) != null ? ref1.onAfterAction : void 0 : void 0;\n    },\n    data: function() {\n      return {\n        admin_collection: adminCollectionObject(collectionName)\n      };\n    }\n  };\n  return _.defaults(options, (ref = collection.routes) != null ? ref[\"new\"] : void 0);\n};\n\nadminCreateRouteEdit = function(collection, collectionName) {\n  return Router.route(\"adminDashboard\" + collectionName + \"Edit\", adminCreateRouteEditOptions(collection, collectionName));\n};\n\nadminCreateRouteEditOptions = function(collection, collectionName) {\n  var options, ref;\n  options = {\n    path: \"/admin/\" + collectionName + \"/:_id/edit\",\n    template: \"AdminDashboardEdit\",\n    controller: \"AdminController\",\n    waitOn: function() {\n      var ref, ref1;\n      Meteor.subscribe('adminCollectionDoc', collectionName, parseID(this.params._id));\n      return (ref = collection.routes) != null ? (ref1 = ref.edit) != null ? ref1.waitOn : void 0 : void 0;\n    },\n    action: function() {\n      return this.render();\n    },\n    onAfterAction: function() {\n      var ref, ref1;\n      Session.set('admin_title', AdminDashboard.collectionLabel(collectionName));\n      Session.set('admin_subtitle', 'Edit ' + this.params._id);\n      Session.set('admin_collection_page', 'edit');\n      Session.set('admin_collection_name', collectionName);\n      Session.set('admin_id', parseID(this.params._id));\n      Session.set('admin_doc', adminCollectionObject(collectionName).findOne({\n        _id: parseID(this.params._id)\n      }));\n      return (ref = collection.routes) != null ? (ref1 = ref.edit) != null ? ref1.onAfterAction : void 0 : void 0;\n    },\n    data: function() {\n      return {\n        admin_collection: adminCollectionObject(collectionName)\n      };\n    }\n  };\n  return _.defaults(options, (ref = collection.routes) != null ? ref.edit : void 0);\n};\n\nadminPublishTables = function(collections) {\n  return _.each(collections, function(collection, name) {\n    if (!collection.children) {\n      return void 0;\n    }\n    return Meteor.publishComposite(adminTablePubName(name), function(tableName, ids, fields) {\n      var extraFields;\n      check(tableName, String);\n      check(ids, Array);\n      check(fields, Match.Optional(Object));\n      extraFields = _.reduce(collection.extraFields, function(fields, name) {\n        fields[name] = 1;\n        return fields;\n      }, {});\n      _.extend(fields, extraFields);\n      this.unblock();\n      return {\n        find: function() {\n          this.unblock();\n          return adminCollectionObject(name).find({\n            _id: {\n              $in: ids\n            }\n          }, {\n            fields: fields\n          });\n        },\n        children: collection.children\n      };\n    });\n  });\n};\n\nMeteor.startup(function() {\n  adminCreateTables(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0);\n  adminCreateRoutes(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0);\n  if (Meteor.isServer) {\n    adminPublishTables(typeof AdminConfig !== \"undefined\" && AdminConfig !== null ? AdminConfig.collections : void 0);\n  }\n  if (AdminTables.Users) {\n    return void 0;\n  }\n  return AdminTables.Users = new Tabular.Table({\n    changeSelector: function(selector, userId) {\n      var $or;\n      $or = selector['$or'];\n      $or && (selector['$or'] = _.map($or, function(exp) {\n        var ref;\n        if (((ref = exp.emails) != null ? ref['$regex'] : void 0) != null) {\n          return {\n            emails: {\n              $elemMatch: {\n                address: exp.emails\n              }\n            }\n          };\n        } else {\n          return exp;\n        }\n      }));\n      return selector;\n    },\n    name: 'Users',\n    collection: Meteor.users,\n    columns: _.union([\n      {\n        data: '_id',\n        title: 'Admin',\n        createdCell: function(node, cellData, rowData) {\n          return $(node).html(Blaze.toHTMLWithData(Template.adminUsersIsAdmin, {\n            _id: cellData\n          }));\n        },\n        width: '40px'\n      }, {\n        data: 'emails',\n        title: 'Email',\n        render: function(value) {\n          return value[0].address;\n        },\n        searchable: true\n      }, {\n        data: 'emails',\n        title: 'Mail',\n        createdCell: function(node, cellData, rowData) {\n          return $(node).html(Blaze.toHTMLWithData(Template.adminUsersMailBtn, {\n            emails: cellData\n          }));\n        },\n        width: '40px'\n      }, {\n        data: 'createdAt',\n        title: 'Joined'\n      }\n    ], adminEditDelButtons),\n    dom: adminTablesDom\n  });\n});\n","sourceMap":{"version":3,"file":"/lib/both/startup.coffee.js","sourceRoot":"","sources":["/packages/wangziguan_admin/lib/both/startup.coffee"],"names":[],"mappings":"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","sourcesContent":["@AdminTables = {}\n\nadminTablesDom = '<\"box\"<\"box-header\"<\"box-toolbar\"<\"pull-left\"<lf>><\"pull-right\"p>>><\"box-body\"t>><r>'\n\nadminEditButton = {\n\tdata: '_id'\n\ttitle: 'Edit'\n\tcreatedCell: (node, cellData, rowData) ->\n\t\t$(node).html(Blaze.toHTMLWithData Template.adminEditBtn, {_id: cellData})\n\twidth: '40px'\n\torderable: false\n}\nadminDelButton = {\n\tdata: '_id'\n\ttitle: 'Delete'\n\tcreatedCell: (node, cellData, rowData) ->\n\t\t$(node).html(Blaze.toHTMLWithData Template.adminDeleteBtn, {_id: cellData})\n\twidth: '40px'\n\torderable: false\n}\n\nadminEditDelButtons = [\n\tadminEditButton,\n\tadminDelButton\n]\n\ndefaultColumns = () -> [\n  data: '_id',\n  title: 'ID'\n]\n\nadminTablePubName = (collection) ->\n\t\"admin_tabular_#{collection}\"\n\nadminCreateTables = (collections) ->\n\t_.each AdminConfig?.collections, (collection, name) ->\n\t\t_.defaults collection, {\n\t\t\tshowEditColumn: true\n\t\t\tshowDelColumn: true\n\t\t\tshowInSideBar: true\n\t\t}\n\n\t\tcolumns = _.map collection.tableColumns, (column) ->\n\t\t\tif column.template\n\t\t\t\tcreatedCell = (node, cellData, rowData) ->\n\t\t\t\t\t$(node).html ''\n\t\t\t\t\tBlaze.renderWithData(Template[column.template], {value: cellData, doc: rowData}, node)\n\n\t\t\tdata: column.name\n\t\t\ttitle: column.label\n\t\t\tcreatedCell: createdCell\n\n\t\tif columns.length == 0\n\t\t\tcolumns = defaultColumns()\n\n\t\tif collection.showEditColumn\n\t\t\tcolumns.push(adminEditButton)\n\t\tif collection.showDelColumn\n\t\t\tcolumns.push(adminDelButton)\n\n\t\tAdminTables[name] = new Tabular.Table\n\t\t\tname: name\n\t\t\tcollection: adminCollectionObject(name)\n\t\t\tpub: collection.children and adminTablePubName(name)\n\t\t\tsub: collection.sub\n\t\t\tcolumns: columns\n\t\t\textraFields: collection.extraFields\n\t\t\tdom: adminTablesDom\n\t\t\tselector: collection.selector || ->\n\t\t\t\treturn {}\n\nadminCreateRoutes = (collections) ->\n\t_.each collections, adminCreateRouteView\n\t_.each collections,\tadminCreateRouteNew\n\t_.each collections, adminCreateRouteEdit\n\nadminCreateRouteView = (collection, collectionName) ->\n\tRouter.route \"adminDashboard#{collectionName}View\",\n\t\tadminCreateRouteViewOptions collection, collectionName\n\nadminCreateRouteViewOptions = (collection, collectionName) ->\n\toptions =\n\t\tpath: \"/admin/#{collectionName}\"\n\t\ttemplate: \"AdminDashboardViewWrapper\"\n\t\tcontroller: \"AdminController\"\n\t\tdata: ->\n  \t\tadmin_table: AdminTables[collectionName]\n\t\taction: ->\n\t\t\t@render()\n\t\tonAfterAction: ->\n\t\t\tSession.set 'admin_title', collectionName\n\t\t\tSession.set 'admin_subtitle', 'View'\n\t\t\tSession.set 'admin_collection_name', collectionName\n\t\t\tcollection.routes?.view?.onAfterAction\n\t_.defaults options, collection.routes?.view\n\nadminCreateRouteNew = (collection, collectionName) ->\n\tRouter.route \"adminDashboard#{collectionName}New\",\n\t\tadminCreateRouteNewOptions collection, collectionName\n\nadminCreateRouteNewOptions = (collection, collectionName) ->\n\toptions =\n\t\tpath: \"/admin/#{collectionName}/new\"\n\t\ttemplate: \"AdminDashboardNew\"\n\t\tcontroller: \"AdminController\"\n\t\taction: ->\n\t\t\t@render()\n\t\tonAfterAction: ->\n\t\t\tSession.set 'admin_title', AdminDashboard.collectionLabel collectionName\n\t\t\tSession.set 'admin_subtitle', 'Create new'\n\t\t\tSession.set 'admin_collection_page', 'new'\n\t\t\tSession.set 'admin_collection_name', collectionName\n\t\t\tcollection.routes?.new?.onAfterAction\n\t\tdata: ->\n\t\t\tadmin_collection: adminCollectionObject collectionName\n\t_.defaults options, collection.routes?.new\n\nadminCreateRouteEdit = (collection, collectionName) ->\n\tRouter.route \"adminDashboard#{collectionName}Edit\",\n\t\tadminCreateRouteEditOptions collection, collectionName\n\nadminCreateRouteEditOptions = (collection, collectionName) ->\n\toptions =\n\t\tpath: \"/admin/#{collectionName}/:_id/edit\"\n\t\ttemplate: \"AdminDashboardEdit\"\n\t\tcontroller: \"AdminController\"\n\t\twaitOn: ->\n\t\t\tMeteor.subscribe 'adminCollectionDoc', collectionName, parseID(@params._id)\n\t\t\tcollection.routes?.edit?.waitOn\n\t\taction: ->\n\t\t\t@render()\n\t\tonAfterAction: ->\n\t\t\tSession.set 'admin_title', AdminDashboard.collectionLabel collectionName\n\t\t\tSession.set 'admin_subtitle', 'Edit ' + @params._id\n\t\t\tSession.set 'admin_collection_page', 'edit'\n\t\t\tSession.set 'admin_collection_name', collectionName\n\t\t\tSession.set 'admin_id', parseID(@params._id)\n\t\t\tSession.set 'admin_doc', adminCollectionObject(collectionName).findOne _id : parseID(@params._id)\n\t\t\tcollection.routes?.edit?.onAfterAction\n\t\tdata: ->\n\t\t\tadmin_collection: adminCollectionObject collectionName\n\t_.defaults options, collection.routes?.edit\n\nadminPublishTables = (collections) ->\n\t_.each collections, (collection, name) ->\n\t\tif not collection.children then return undefined\n\t\tMeteor.publishComposite adminTablePubName(name), (tableName, ids, fields) ->\n\t\t\tcheck tableName, String\n\t\t\tcheck ids, Array\n\t\t\tcheck fields, Match.Optional Object\n\n\t\t\textraFields = _.reduce collection.extraFields, (fields, name) ->\n\t\t\t\tfields[name] = 1\n\t\t\t\tfields\n\t\t\t, {}\n\t\t\t_.extend fields, extraFields\n\n\t\t\t@unblock()\n\n\t\t\tfind: ->\n\t\t\t\t@unblock()\n\t\t\t\tadminCollectionObject(name).find {_id: {$in: ids}}, {fields: fields}\n\t\t\tchildren: collection.children\n\nMeteor.startup ->\n\tadminCreateTables AdminConfig?.collections\n\tadminCreateRoutes AdminConfig?.collections\n\tadminPublishTables AdminConfig?.collections if Meteor.isServer\n\n\tif AdminTables.Users then return undefined\n\n\tAdminTables.Users = new Tabular.Table\n\t\t# Modify selector to allow search by email\n\t\tchangeSelector: (selector, userId) ->\n\t\t\t$or = selector['$or']\n\t\t\t$or and selector['$or'] = _.map $or, (exp) ->\n\t\t\t\tif exp.emails?['$regex']?\n\t\t\t\t\temails: $elemMatch: address: exp.emails\n\t\t\t\telse\n\t\t\t\t\texp\n\t\t\tselector\n\n\t\tname: 'Users'\n\t\tcollection: Meteor.users\n\t\tcolumns: _.union [\n\t\t\t{\n\t\t\t\tdata: '_id'\n\t\t\t\ttitle: 'Admin'\n\t\t\t\t# TODO: use `tmpl`\n\t\t\t\tcreatedCell: (node, cellData, rowData) ->\n\t\t\t\t\t$(node).html(Blaze.toHTMLWithData Template.adminUsersIsAdmin, {_id: cellData})\n\t\t\t\twidth: '40px'\n\t\t\t}\n\t\t\t{\n\t\t\t\tdata: 'emails'\n\t\t\t\ttitle: 'Email'\n\t\t\t\trender: (value) ->\n\t\t\t\t\tvalue[0].address\n\t\t\t\tsearchable: true\n\t\t\t}\n\t\t\t{\n\t\t\t\tdata: 'emails'\n\t\t\t\ttitle: 'Mail'\n\t\t\t\t# TODO: use `tmpl`\n\t\t\t\tcreatedCell: (node, cellData, rowData) ->\n\t\t\t\t\t$(node).html(Blaze.toHTMLWithData Template.adminUsersMailBtn, {emails: cellData})\n\t\t\t\twidth: '40px'\n\t\t\t}\n\t\t\t{ data: 'createdAt', title: 'Joined' }\n\t\t], adminEditDelButtons\n\t\tdom: adminTablesDom\n"]}}