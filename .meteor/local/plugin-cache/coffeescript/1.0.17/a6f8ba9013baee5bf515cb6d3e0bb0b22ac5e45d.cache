{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar checkParams, checkRouteOrPath, checkRouterPackages, errorMessages, fr, ir, test;             \n\nfr = ir = null;\n\ncheckRouteOrPath = function(arg) {\n  var error;\n  try {\n    return check(arg, Match.OneOf(RegExp, String));\n  } catch (_error) {\n    error = _error;\n    throw new Error(errorMessages.invalidRouteNameArgument);\n  }\n};\n\ncheckParams = function(arg) {\n  var error;\n  try {\n    return check(arg, Object);\n  } catch (_error) {\n    error = _error;\n    throw new Error(errorMessages.invalidRouteParamsArgument);\n  }\n};\n\ncheckRouterPackages = function() {\n  var ref, ref1;\n  fr = (ref = (ref1 = Package['kadira:flow-router']) != null ? ref1 : Package['meteorhacks:flow-router']) != null ? ref : Package['kadira:flow-router-ssr'];\n  ir = Package['iron:router'];\n  if (!(ir || fr)) {\n    throw new Error(errorMessages.noSupportedRouter);\n  }\n};\n\nerrorMessages = {\n  noSupportedRouter: 'No supported router installed. Please install ' + 'iron:router or meteorhacks:flow-router.',\n  invalidRouteNameArgument: 'Invalid argument, must be String or RegExp.',\n  invalidRouteParamsArgument: 'Invalid arguemnt, must be Object.'\n};\n\nshare.config = new ReactiveDict('activeRouteConfig');\n\nshare.config.setDefault({\n  activeClass: 'active',\n  caseSensitive: true,\n  disabledClass: 'disabled'\n});\n\ntest = function(value, pattern) {\n  var result;\n  if (!value) {\n    return false;\n  }\n  if (Match.test(pattern, RegExp)) {\n    result = value.search(pattern);\n    result = result > -1;\n  } else if (Match.test(pattern, String)) {\n    if (share.config.equals('caseSensitive', false)) {\n      value = value.toLowerCase();\n      pattern = pattern.toLowerCase();\n    }\n    result = value === pattern;\n  }\n  return result != null ? result : result = false;\n};\n\nActiveRoute = {\n  config: function() {\n    return this.configure.apply(this, arguments);\n  },\n  configure: function(options) {\n    if (Meteor.isServer) {\n      return;\n    }\n    share.config.set(options);\n  },\n  name: function(routeName, routeParams) {\n    var controller, currentPath, currentRouteName, path, ref, ref1;\n    if (routeParams == null) {\n      routeParams = {};\n    }\n    checkRouterPackages();\n    if (Meteor.isServer && !Package['kadira:flow-router-ssr']) {\n      return;\n    }\n    checkRouteOrPath(routeName);\n    checkParams(routeParams);\n    if (ir) {\n      if (!_.isEmpty(routeParams) && Match.test(routeName, String)) {\n        controller = ir.Router.current();\n        if (controller != null ? controller.route : void 0) {\n          currentPath = controller != null ? controller.location.get().path : void 0;\n        }\n        path = ir.Router.path(routeName, routeParams);\n      } else {\n        currentRouteName = (ref = ir.Router.current()) != null ? (ref1 = ref.route) != null ? typeof ref1.getName === \"function\" ? ref1.getName() : void 0 : void 0 : void 0;\n      }\n    }\n    if (fr) {\n      if (!_.isEmpty(routeParams) && Match.test(routeName, String)) {\n        fr.FlowRouter.watchPathChange();\n        if (currentPath == null) {\n          currentPath = fr.FlowRouter.current().path;\n        }\n        if (path == null) {\n          path = fr.FlowRouter.path(routeName, routeParams);\n        }\n      } else {\n        if (currentRouteName == null) {\n          currentRouteName = fr.FlowRouter.getRouteName();\n        }\n      }\n    }\n    return test(currentPath || currentRouteName, path || routeName);\n  },\n  path: function(path) {\n    var controller, currentPath;\n    checkRouterPackages();\n    if (Meteor.isServer) {\n      return;\n    }\n    checkRouteOrPath(path);\n    if (ir) {\n      controller = ir.Router.current();\n      if (controller != null ? controller.route : void 0) {\n        currentPath = controller != null ? controller.location.get().path : void 0;\n      }\n    }\n    if (fr) {\n      fr.FlowRouter.watchPathChange();\n      if (currentPath == null) {\n        currentPath = fr.FlowRouter.current().path;\n      }\n    }\n    return test(currentPath, path);\n  }\n};\n","sourceMap":{"version":3,"file":"/lib/activeroute.coffee.js","sourceRoot":"","sources":["/packages/zimme_active-route/lib/activeroute.coffee"],"names":[],"mappings":"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","sourcesContent":["fr = ir = null\n\ncheckRouteOrPath = (arg) ->\n  try\n    check arg, Match.OneOf RegExp, String\n  catch error\n    throw new Error errorMessages.invalidRouteNameArgument\n\ncheckParams = (arg) ->\n  try\n    check arg, Object\n  catch error\n    throw new Error errorMessages.invalidRouteParamsArgument\n\ncheckRouterPackages = ->\n  fr = Package['kadira:flow-router'] ? Package['meteorhacks:flow-router'] ? Package['kadira:flow-router-ssr']\n  ir = Package['iron:router']\n  throw new Error errorMessages.noSupportedRouter unless ir or fr\n\nerrorMessages =\n  noSupportedRouter:\n    'No supported router installed. Please install ' +\n    'iron:router or meteorhacks:flow-router.'\n\n  invalidRouteNameArgument: 'Invalid argument, must be String or RegExp.'\n  invalidRouteParamsArgument: 'Invalid arguemnt, must be Object.'\n\nshare.config = new ReactiveDict 'activeRouteConfig'\nshare.config.setDefault\n  activeClass: 'active'\n  caseSensitive: true\n  disabledClass: 'disabled'\n\ntest = (value, pattern) ->\n  return false unless value\n\n  if Match.test pattern, RegExp\n    result = value.search pattern\n    result = result > -1\n\n  else if Match.test pattern, String\n    if share.config.equals 'caseSensitive', false\n      value = value.toLowerCase()\n      pattern = pattern.toLowerCase()\n\n    result = value is pattern\n\n  result ?= false\n\nActiveRoute =\n\n  config: ->\n    @configure.apply @, arguments\n\n  configure: (options) ->\n    return if Meteor.isServer\n\n    share.config.set options\n    return\n\n  name: (routeName, routeParams = {}) ->\n    checkRouterPackages()\n\n    return if (Meteor.isServer && !Package['kadira:flow-router-ssr'])\n\n    checkRouteOrPath routeName\n    checkParams routeParams\n\n    if ir\n      if not _.isEmpty(routeParams) and Match.test routeName, String\n        controller = ir.Router.current()\n        currentPath = controller?.location.get().path if controller?.route\n        path = ir.Router.path routeName, routeParams\n\n      else\n        currentRouteName = ir.Router.current()?.route?.getName?()\n\n    if fr\n      if not _.isEmpty(routeParams) and Match.test routeName, String\n        fr.FlowRouter.watchPathChange()\n        currentPath ?= fr.FlowRouter.current().path\n        path ?= fr.FlowRouter.path routeName, routeParams\n\n      else\n        currentRouteName ?= fr.FlowRouter.getRouteName()\n\n    test currentPath or currentRouteName, path or routeName\n\n  path: (path) ->\n    checkRouterPackages()\n\n    return if Meteor.isServer\n\n    checkRouteOrPath path\n\n    if ir\n      controller = ir.Router.current()\n      currentPath = controller?.location.get().path if controller?.route\n\n    if fr\n      fr.FlowRouter.watchPathChange()\n      currentPath ?= fr.FlowRouter.current().path\n\n    test currentPath, path\n"]}}