{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/formTypes/update-pushArray.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/aldeed:autoform/formTypes/update-pushArray.js","filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/formTypes/update-pushArray.js","passPerPreset":false,"envName":"development","cwd":"/home/wangziguan/wzg/EnergyMaster","root":"/home/wangziguan/wzg/EnergyMaster","generatorOpts":{"filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/formTypes/update-pushArray.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:autoform/formTypes/update-pushArray.js"}},"code":"/* global AutoForm */\nAutoForm.addFormType('update-pushArray', {\n  onSubmit: function () {\n    var c = this; // Prevent browser form submission\n\n    this.event.preventDefault(); // Make sure we have a collection\n\n    var collection = this.collection;\n\n    if (!collection) {\n      throw new Error(\"AutoForm: You must specify a collection when form type is update-pushArray.\");\n    } // Make sure we have a scope\n\n\n    var scope = c.formAttributes.scope;\n\n    if (!scope) {\n      throw new Error(\"AutoForm: You must specify a scope when form type is update-pushArray.\");\n    } // Run \"before.update\" hooks\n\n\n    this.runBeforeHooks(this.insertDoc, function (doc) {\n      if (_.isEmpty(doc)) {\n        // make sure this check stays after the before hooks\n        // Nothing to update. Just treat it as a successful update.\n        c.result(null, 0);\n      } else {\n        var modifer = {\n          $push: {}\n        };\n        modifer.$push[scope] = doc; // Perform update\n\n        collection.update({\n          _id: c.docId\n        }, modifer, c.validationOptions, c.result);\n      }\n    });\n  },\n  validateForm: function () {\n    // Get SimpleSchema\n    var ss = AutoForm.getFormSchema(this.form.id); // We validate as if it's an insert form\n\n    return AutoForm._validateFormDoc(this.formDoc, false, this.form.id, ss, this.form);\n  },\n  adjustSchema: function (ss) {\n    return ss.getObjectSchema(this.form.scope + '.$');\n  },\n  shouldPrevalidate: function () {\n    // Prevalidate because the form is generated with a schema\n    // that has keys different from the collection schema\n    return true;\n  }\n});","map":{"version":3,"sources":["packages/aldeed:autoform/formTypes/update-pushArray.js"],"names":["AutoForm","addFormType","onSubmit","c","event","preventDefault","collection","Error","scope","formAttributes","runBeforeHooks","insertDoc","doc","_","isEmpty","result","modifer","$push","update","_id","docId","validationOptions","validateForm","ss","getFormSchema","form","id","_validateFormDoc","formDoc","adjustSchema","getObjectSchema","shouldPrevalidate"],"mappings":"AAAA;AAEAA,QAAQ,CAACC,WAAT,CAAqB,kBAArB,EAAyC;AACvCC,EAAAA,QAAQ,EAAE,YAAY;AACpB,QAAIC,CAAC,GAAG,IAAR,CADoB,CAGpB;;AACA,SAAKC,KAAL,CAAWC,cAAX,GAJoB,CAMpB;;AACA,QAAIC,UAAU,GAAG,KAAKA,UAAtB;;AACA,QAAI,CAACA,UAAL,EAAiB;AACf,YAAM,IAAIC,KAAJ,CAAU,6EAAV,CAAN;AACD,KAVmB,CAYpB;;;AACA,QAAIC,KAAK,GAAGL,CAAC,CAACM,cAAF,CAAiBD,KAA7B;;AACA,QAAI,CAACA,KAAL,EAAY;AACV,YAAM,IAAID,KAAJ,CAAU,wEAAV,CAAN;AACD,KAhBmB,CAkBpB;;;AACA,SAAKG,cAAL,CAAoB,KAAKC,SAAzB,EAAoC,UAAUC,GAAV,EAAe;AACjD,UAAIC,CAAC,CAACC,OAAF,CAAUF,GAAV,CAAJ,EAAoB;AAAE;AACpB;AACAT,QAAAA,CAAC,CAACY,MAAF,CAAS,IAAT,EAAe,CAAf;AACD,OAHD,MAGO;AACL,YAAIC,OAAO,GAAG;AAACC,UAAAA,KAAK,EAAE;AAAR,SAAd;AACAD,QAAAA,OAAO,CAACC,KAAR,CAAcT,KAAd,IAAuBI,GAAvB,CAFK,CAGL;;AACAN,QAAAA,UAAU,CAACY,MAAX,CAAkB;AAACC,UAAAA,GAAG,EAAEhB,CAAC,CAACiB;AAAR,SAAlB,EAAkCJ,OAAlC,EAA2Cb,CAAC,CAACkB,iBAA7C,EAAgElB,CAAC,CAACY,MAAlE;AACD;AACF,KAVD;AAWD,GA/BsC;AAgCvCO,EAAAA,YAAY,EAAE,YAAY;AACxB;AACA,QAAIC,EAAE,GAAGvB,QAAQ,CAACwB,aAAT,CAAuB,KAAKC,IAAL,CAAUC,EAAjC,CAAT,CAFwB,CAGxB;;AACA,WAAO1B,QAAQ,CAAC2B,gBAAT,CAA0B,KAAKC,OAA/B,EAAwC,KAAxC,EAA+C,KAAKH,IAAL,CAAUC,EAAzD,EAA6DH,EAA7D,EAAiE,KAAKE,IAAtE,CAAP;AACD,GArCsC;AAsCvCI,EAAAA,YAAY,EAAE,UAAUN,EAAV,EAAc;AAC1B,WAAOA,EAAE,CAACO,eAAH,CAAmB,KAAKL,IAAL,CAAUjB,KAAV,GAAkB,IAArC,CAAP;AACD,GAxCsC;AAyCvCuB,EAAAA,iBAAiB,EAAE,YAAY;AAC7B;AACA;AACA,WAAO,IAAP;AACD;AA7CsC,CAAzC","sourcesContent":["/* global AutoForm */\n\nAutoForm.addFormType('update-pushArray', {\n  onSubmit: function () {\n    var c = this;\n\n    // Prevent browser form submission\n    this.event.preventDefault();\n\n    // Make sure we have a collection\n    var collection = this.collection;\n    if (!collection) {\n      throw new Error(\"AutoForm: You must specify a collection when form type is update-pushArray.\");\n    }\n\n    // Make sure we have a scope\n    var scope = c.formAttributes.scope;\n    if (!scope) {\n      throw new Error(\"AutoForm: You must specify a scope when form type is update-pushArray.\");\n    }\n\n    // Run \"before.update\" hooks\n    this.runBeforeHooks(this.insertDoc, function (doc) {\n      if (_.isEmpty(doc)) { // make sure this check stays after the before hooks\n        // Nothing to update. Just treat it as a successful update.\n        c.result(null, 0);\n      } else {\n        var modifer = {$push: {}};\n        modifer.$push[scope] = doc;\n        // Perform update\n        collection.update({_id: c.docId}, modifer, c.validationOptions, c.result);\n      }\n    });\n  },\n  validateForm: function () {\n    // Get SimpleSchema\n    var ss = AutoForm.getFormSchema(this.form.id);\n    // We validate as if it's an insert form\n    return AutoForm._validateFormDoc(this.formDoc, false, this.form.id, ss, this.form);\n  },\n  adjustSchema: function (ss) {\n    return ss.getObjectSchema(this.form.scope + '.$');\n  },\n  shouldPrevalidate: function () {\n    // Prevalidate because the form is generated with a schema\n    // that has keys different from the collection schema\n    return true;\n  }\n});\n"]},"sourceType":"script","hash":"f8dc885ee87bc08a13339a76dcee244a85638f0d"}
