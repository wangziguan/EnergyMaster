{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/autoform-arrays.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/aldeed:autoform/autoform-arrays.js","filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/autoform-arrays.js","passPerPreset":false,"envName":"development","cwd":"/home/wangziguan/wzg/EnergyMaster","root":"/home/wangziguan/wzg/EnergyMaster","generatorOpts":{"filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/autoform-arrays.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:autoform/autoform-arrays.js"}},"code":"// Track arrays; this allows us to add/remove fields or groups of fields for an array\n// but still easily respect minCount and maxCount, and properly add/remove the same\n// items from the database once the form is submitted.\nArrayTracker = function afArrayTracker() {\n  var self = this;\n  self.info = {};\n};\n\nArrayTracker.prototype.getMinMax = function atGetMinMax(ss, field, overrideMinCount, overrideMaxCount) {\n  var defs = AutoForm.Utility.getFieldDefinition(ss, field); // minCount is set by the schema, but can be set higher on the field attribute\n\n  overrideMinCount = overrideMinCount || 0;\n  var minCount = defs.minCount || 0;\n  minCount = Math.max(overrideMinCount, minCount); // maxCount is set by the schema, but can be set lower on the field attribute\n\n  overrideMaxCount = overrideMaxCount || Infinity;\n  var maxCount = defs.maxCount || Infinity;\n  maxCount = Math.min(overrideMaxCount, maxCount);\n  return {\n    minCount: minCount,\n    maxCount: maxCount\n  };\n};\n\nArrayTracker.prototype.initForm = function atInitForm(formId) {\n  var self = this;\n  if (self.info[formId]) return;\n  self.info[formId] = {};\n};\n\nArrayTracker.prototype.getForm = function atInitForm(formId) {\n  var self = this;\n  self.initForm(formId);\n  return self.info[formId];\n};\n\nArrayTracker.prototype.ensureField = function atEnsureField(formId, field) {\n  var self = this;\n  self.initForm(formId);\n\n  if (!self.info[formId][field]) {\n    self.resetField(formId, field);\n  }\n};\n\nArrayTracker.prototype.initField = function atInitField(formId, field, ss, docCount, overrideMinCount, overrideMaxCount) {\n  var self = this;\n  self.ensureField(formId, field);\n  if (self.info[formId][field].array != null) return; // If we have a doc: The count should be the maximum of docCount or schema minCount or field minCount or 1.\n  // If we don't have a doc: The count should be the maximum of schema minCount or field minCount or 1.\n\n  var range = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount);\n  var arrayCount = Math.max(range.minCount, docCount == null ? 1 : docCount); // If this is an array of objects, collect names of object props\n\n  var childKeys = [];\n\n  if (AutoForm.Utility.getFieldDefinition(ss, field + '.$').type === Object) {\n    childKeys = ss.objectKeys(AutoForm.Utility.makeKeyGeneric(field) + '.$');\n  }\n\n  var loopArray = [];\n\n  for (var i = 0; i < arrayCount; i++) {\n    var loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);\n    loopArray.push(loopCtx);\n  }\n\n  ;\n  self.info[formId][field].array = loopArray;\n  var count = loopArray.length;\n  self.info[formId][field].count = count;\n  self.info[formId][field].visibleCount = count;\n  self.info[formId][field].deps.changed();\n};\n\nArrayTracker.prototype.resetField = function atResetField(formId, field) {\n  var self = this;\n  self.initForm(formId);\n\n  if (!self.info[formId][field]) {\n    self.info[formId][field] = {\n      deps: new Tracker.Dependency()\n    };\n  }\n\n  self.info[formId][field].array = null;\n  self.info[formId][field].count = 0;\n  self.info[formId][field].visibleCount = 0;\n  self.info[formId][field].deps.changed();\n};\n\nArrayTracker.prototype.resetForm = function atResetForm(formId) {\n  var self = this;\n\n  _.each(self.info[formId], function (info, field) {\n    self.resetField(formId, field);\n  });\n};\n\nArrayTracker.prototype.untrackForm = function atUntrackForm(formId) {\n  var self = this;\n  self.info[formId] = {};\n};\n\nArrayTracker.prototype.tracksField = function atTracksField(formId, field) {\n  var self = this;\n  self.ensureField(formId, field);\n  self.info[formId][field].deps.depend();\n  return !!self.info[formId][field].array;\n};\n\nArrayTracker.prototype.getField = function atGetField(formId, field) {\n  var self = this;\n  self.ensureField(formId, field);\n  self.info[formId][field].deps.depend();\n  return self.info[formId][field].array;\n};\n\nArrayTracker.prototype.getCount = function atGetCount(formId, field) {\n  var self = this;\n  self.ensureField(formId, field);\n  self.info[formId][field].deps.depend();\n  return self.info[formId][field].count;\n};\n\nArrayTracker.prototype.getVisibleCount = function atGetVisibleCount(formId, field) {\n  var self = this;\n  self.ensureField(formId, field);\n  self.info[formId][field].deps.depend();\n  return self.info[formId][field].visibleCount;\n};\n\nArrayTracker.prototype.isFirstFieldlVisible = function atIsFirstFieldlVisible(formId, field, currentIndex) {\n  var self = this;\n  self.ensureField(formId, field);\n  self.info[formId][field].deps.depend();\n\n  var firstVisibleField = _.find(self.info[formId][field].array, function (currentField) {\n    return !currentField.removed;\n  });\n\n  return firstVisibleField && firstVisibleField.index === currentIndex;\n};\n\nArrayTracker.prototype.isLastFieldlVisible = function atIsLastFieldlVisible(formId, field, currentIndex) {\n  var self = this;\n  self.ensureField(formId, field);\n  self.info[formId][field].deps.depend();\n\n  var lastVisibleField = _.last(_.filter(self.info[formId][field].array, function (currentField) {\n    return !currentField.removed;\n  }));\n\n  return lastVisibleField && lastVisibleField.index === currentIndex;\n};\n\nArrayTracker.prototype.addOneToField = function atAddOneToField(formId, field, ss, overrideMinCount, overrideMaxCount) {\n  var self = this;\n  self.ensureField(formId, field);\n\n  if (!self.info[formId][field].array) {\n    return;\n  }\n\n  var currentCount = self.info[formId][field].visibleCount;\n  var maxCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).maxCount;\n\n  if (currentCount < maxCount) {\n    var i = self.info[formId][field].array.length; // If this is an array of objects, collect names of object props\n\n    var childKeys = [];\n\n    if (AutoForm.Utility.getFieldDefinition(ss, field + '.$').type === Object) {\n      childKeys = ss.objectKeys(AutoForm.Utility.makeKeyGeneric(field) + '.$');\n    }\n\n    var loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);\n    self.info[formId][field].array.push(loopCtx);\n    self.info[formId][field].count++;\n    self.info[formId][field].visibleCount++;\n    self.info[formId][field].deps.changed();\n  }\n};\n\nArrayTracker.prototype.removeFromFieldAtIndex = function atRemoveFromFieldAtIndex(formId, field, index, ss, overrideMinCount, overrideMaxCount) {\n  var self = this;\n  self.ensureField(formId, field);\n\n  if (!self.info[formId][field].array) {\n    return;\n  }\n\n  var currentCount = self.info[formId][field].visibleCount;\n  var minCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).minCount;\n\n  if (currentCount > minCount) {\n    self.info[formId][field].array[index].removed = true;\n    self.info[formId][field].count--;\n    self.info[formId][field].visibleCount--;\n    self.info[formId][field].deps.changed();\n  }\n};\n/*\n * PRIVATE\n */\n\n\nvar createLoopCtx = function (formId, field, index, childKeys, overrideMinCount, overrideMaxCount) {\n  var loopCtx = {\n    formId: formId,\n    arrayFieldName: field,\n    name: field + '.' + index,\n    index: index,\n    minCount: overrideMinCount,\n    maxCount: overrideMaxCount\n  }; // If this is an array of objects, add child key names under loopCtx.current[childName] = fullKeyName\n\n  if (childKeys.length) {\n    loopCtx.current = {};\n\n    _.each(childKeys, function (k) {\n      loopCtx.current[k] = field + '.' + index + '.' + k;\n    });\n  }\n\n  return loopCtx;\n};","map":{"version":3,"sources":["packages/aldeed:autoform/autoform-arrays.js"],"names":["ArrayTracker","afArrayTracker","self","info","prototype","getMinMax","atGetMinMax","ss","field","overrideMinCount","overrideMaxCount","defs","AutoForm","Utility","getFieldDefinition","minCount","Math","max","Infinity","maxCount","min","initForm","atInitForm","formId","getForm","ensureField","atEnsureField","resetField","initField","atInitField","docCount","array","range","arrayCount","childKeys","type","Object","objectKeys","makeKeyGeneric","loopArray","i","loopCtx","createLoopCtx","push","count","length","visibleCount","deps","changed","atResetField","Tracker","Dependency","resetForm","atResetForm","_","each","untrackForm","atUntrackForm","tracksField","atTracksField","depend","getField","atGetField","getCount","atGetCount","getVisibleCount","atGetVisibleCount","isFirstFieldlVisible","atIsFirstFieldlVisible","currentIndex","firstVisibleField","find","currentField","removed","index","isLastFieldlVisible","atIsLastFieldlVisible","lastVisibleField","last","filter","addOneToField","atAddOneToField","currentCount","removeFromFieldAtIndex","atRemoveFromFieldAtIndex","arrayFieldName","name","current","k"],"mappings":"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","sourcesContent":["// Track arrays; this allows us to add/remove fields or groups of fields for an array\n// but still easily respect minCount and maxCount, and properly add/remove the same\n// items from the database once the form is submitted.\n\nArrayTracker = function afArrayTracker() {\n  var self = this;\n  self.info = {};\n};\n\nArrayTracker.prototype.getMinMax = function atGetMinMax(ss, field, overrideMinCount, overrideMaxCount) {\n  var defs = AutoForm.Utility.getFieldDefinition(ss, field);\n\n  // minCount is set by the schema, but can be set higher on the field attribute\n  overrideMinCount = overrideMinCount || 0;\n  var minCount = defs.minCount || 0;\n  minCount = Math.max(overrideMinCount, minCount);\n\n  // maxCount is set by the schema, but can be set lower on the field attribute\n  overrideMaxCount = overrideMaxCount || Infinity;\n  var maxCount = defs.maxCount || Infinity;\n  maxCount = Math.min(overrideMaxCount, maxCount);\n\n  return {minCount: minCount, maxCount: maxCount};\n};\n\nArrayTracker.prototype.initForm = function atInitForm(formId) {\n\tvar self = this;\n\n\tif (self.info[formId])\n\t\treturn;\n\n\tself.info[formId] = {};\n};\n\nArrayTracker.prototype.getForm = function atInitForm(formId) {\n\tvar self = this;\n\tself.initForm(formId);\n\treturn self.info[formId];\n};\n\nArrayTracker.prototype.ensureField = function atEnsureField(formId, field) {\n\tvar self = this;\n\tself.initForm(formId);\n\n\tif (!self.info[formId][field]) {\n\t\tself.resetField(formId, field);\n\t}\n};\n\nArrayTracker.prototype.initField = function atInitField(formId, field, ss, docCount, overrideMinCount, overrideMaxCount) {\n\tvar self = this;\n\tself.ensureField(formId, field);\n\n\tif (self.info[formId][field].array != null)\n\t\treturn;\n\n\t// If we have a doc: The count should be the maximum of docCount or schema minCount or field minCount or 1.\n\t// If we don't have a doc: The count should be the maximum of schema minCount or field minCount or 1.\n\tvar range = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount);\n\tvar arrayCount = Math.max(range.minCount, (docCount == null) ? 1 : docCount);\n\n\t// If this is an array of objects, collect names of object props\n\tvar childKeys = [];\n\tif (AutoForm.Utility.getFieldDefinition(ss, field + '.$').type === Object) {\n    childKeys = ss.objectKeys(AutoForm.Utility.makeKeyGeneric(field) + '.$');\n\t}\n\n\tvar loopArray = [];\n\tfor (var i = 0; i < arrayCount; i++) {\n\t\tvar loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);\n\t\tloopArray.push(loopCtx);\n\t};\n\n\tself.info[formId][field].array = loopArray;\n\tvar count = loopArray.length;\n\tself.info[formId][field].count = count;\n\tself.info[formId][field].visibleCount = count;\n\tself.info[formId][field].deps.changed();\n};\n\nArrayTracker.prototype.resetField = function atResetField(formId, field) {\n\tvar self = this;\n\tself.initForm(formId);\n\n\tif (!self.info[formId][field]) {\n\t\tself.info[formId][field] = {\n\t\t\tdeps: new Tracker.Dependency()\n\t\t};\n\t}\n\n\tself.info[formId][field].array = null;\n\tself.info[formId][field].count = 0;\n\tself.info[formId][field].visibleCount = 0;\n\tself.info[formId][field].deps.changed();\n};\n\nArrayTracker.prototype.resetForm = function atResetForm(formId) {\n\tvar self = this;\n\t_.each(self.info[formId], function (info, field) {\n\t\tself.resetField(formId, field);\n\t});\n};\n\nArrayTracker.prototype.untrackForm = function atUntrackForm(formId) {\n\tvar self = this;\n\tself.info[formId] = {};\n};\n\nArrayTracker.prototype.tracksField = function atTracksField(formId, field) {\n\tvar self = this;\n\tself.ensureField(formId, field);\n\tself.info[formId][field].deps.depend();\n\treturn !!self.info[formId][field].array;\n};\n\nArrayTracker.prototype.getField = function atGetField(formId, field) {\n\tvar self = this;\n\tself.ensureField(formId, field);\n\tself.info[formId][field].deps.depend();\n\treturn self.info[formId][field].array;\n};\n\nArrayTracker.prototype.getCount = function atGetCount(formId, field) {\n\tvar self = this;\n\tself.ensureField(formId, field);\n\tself.info[formId][field].deps.depend();\n\treturn self.info[formId][field].count;\n};\n\nArrayTracker.prototype.getVisibleCount = function atGetVisibleCount(formId, field) {\n\tvar self = this;\n\tself.ensureField(formId, field);\n\tself.info[formId][field].deps.depend();\n\treturn self.info[formId][field].visibleCount;\n};\n\nArrayTracker.prototype.isFirstFieldlVisible = function atIsFirstFieldlVisible(formId, field, currentIndex) {\n\tvar self = this;\n\tself.ensureField(formId, field);\n\tself.info[formId][field].deps.depend();\n\tvar firstVisibleField = _.find(self.info[formId][field].array, function(currentField) {\n\t\treturn !currentField.removed;\n\t});\n\treturn (firstVisibleField && firstVisibleField.index === currentIndex);\n};\n\nArrayTracker.prototype.isLastFieldlVisible = function atIsLastFieldlVisible(formId, field, currentIndex) {\n\tvar self = this;\n\tself.ensureField(formId, field);\n\tself.info[formId][field].deps.depend();\n\tvar lastVisibleField = _.last(_.filter(self.info[formId][field].array, function(currentField) {\n\t\treturn !currentField.removed;\n\t}));\n\treturn (lastVisibleField && lastVisibleField.index === currentIndex);\n};\n\nArrayTracker.prototype.addOneToField = function atAddOneToField(formId, field, ss, overrideMinCount, overrideMaxCount) {\n  var self = this;\n  self.ensureField(formId, field);\n\n  if (!self.info[formId][field].array) {\n  \treturn;\n  }\n\n  var currentCount = self.info[formId][field].visibleCount\n  var maxCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).maxCount;\n\n  if (currentCount < maxCount) {\n\t  var i = self.info[formId][field].array.length;\n\n\t  // If this is an array of objects, collect names of object props\n\t  var childKeys = [];\n\t  if (AutoForm.Utility.getFieldDefinition(ss, field + '.$').type === Object) {\n      childKeys = ss.objectKeys(AutoForm.Utility.makeKeyGeneric(field) + '.$');\n\t  }\n\n\t  var loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);\n\n\t  self.info[formId][field].array.push(loopCtx);\n\t  self.info[formId][field].count++;\n\t  self.info[formId][field].visibleCount++;\n\t  self.info[formId][field].deps.changed();\n  }\n};\n\nArrayTracker.prototype.removeFromFieldAtIndex = function atRemoveFromFieldAtIndex(formId, field, index, ss, overrideMinCount, overrideMaxCount) {\n  var self = this;\n  self.ensureField(formId, field);\n\n  if (!self.info[formId][field].array) {\n  \treturn;\n  }\n\n  var currentCount = self.info[formId][field].visibleCount;\n  var minCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).minCount;\n\n  if (currentCount > minCount) {\n    self.info[formId][field].array[index].removed = true;\n    self.info[formId][field].count--;\n    self.info[formId][field].visibleCount--;\n    self.info[formId][field].deps.changed();\n  }\n}\n\n/*\n * PRIVATE\n */\nvar createLoopCtx = function(formId, field, index, childKeys, overrideMinCount, overrideMaxCount) {\n  var loopCtx = {\n  \tformId:         formId,\n  \tarrayFieldName: field,\n  \tname:           field + '.' + index,\n  \tindex:          index,\n  \tminCount:       overrideMinCount,\n  \tmaxCount:       overrideMaxCount\n  };\n\n  // If this is an array of objects, add child key names under loopCtx.current[childName] = fullKeyName\n  if (childKeys.length) {\n    loopCtx.current = {};\n\t_.each(childKeys, function (k) {\n\t  loopCtx.current[k] = field + '.' + index + '.' + k;\n    });\n  }\n\n  return loopCtx;\n}\n"]},"sourceType":"script","hash":"e240bf805f1b7a5bbdd45d08ec15cb115bd6a47f"}
