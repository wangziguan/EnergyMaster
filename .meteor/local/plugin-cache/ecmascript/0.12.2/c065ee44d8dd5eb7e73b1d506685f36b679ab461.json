{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/autoform-hooks.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/aldeed:autoform/autoform-hooks.js","filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/autoform-hooks.js","passPerPreset":false,"envName":"development","cwd":"/home/wangziguan/wzg/EnergyMaster","root":"/home/wangziguan/wzg/EnergyMaster","generatorOpts":{"filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/autoform-hooks.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:autoform/autoform-hooks.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\n// Manages all hooks, supporting append/replace, get\nHooks = {\n  form: {}\n}; // The names of all supported hooks, excluding \"before\" and \"after\".\n\nvar hookNames = ['formToDoc', 'formToModifier', 'docToForm', 'onSubmit', 'onSuccess', 'onError', 'beginSubmit', 'endSubmit'];\n\nHooks.getDefault = function () {\n  var hooks = {\n    before: {},\n    after: {}\n  };\n\n  _.each(hookNames, function (hookName) {\n    hooks[hookName] = [];\n  });\n\n  return hooks;\n};\n\nHooks.global = Hooks.getDefault();\n\nHooks.addHooksToList = function () {\n  function addHooksToList(hooksList, hooks, replace) {\n    // Add before hooks\n    hooks.before && _.each(hooks.before, function () {\n      function autoFormBeforeHooksEach(func, type) {\n        if (typeof func !== \"function\") {\n          throw new Error(\"AutoForm before hook must be a function, not \" + (0, _typeof2.default)(func));\n        }\n\n        hooksList.before[type] = !replace && hooksList.before[type] ? hooksList.before[type] : [];\n        hooksList.before[type].push(func);\n      }\n\n      return autoFormBeforeHooksEach;\n    }()); // Add after hooks\n\n    hooks.after && _.each(hooks.after, function () {\n      function autoFormAfterHooksEach(func, type) {\n        if (typeof func !== \"function\") {\n          throw new Error(\"AutoForm after hook must be a function, not \" + (0, _typeof2.default)(func));\n        }\n\n        hooksList.after[type] = !replace && hooksList.after[type] ? hooksList.after[type] : [];\n        hooksList.after[type].push(func);\n      }\n\n      return autoFormAfterHooksEach;\n    }()); // Add all other hooks\n\n    _.each(hookNames, function () {\n      function autoFormHooksEach(name) {\n        if (hooks[name]) {\n          if (typeof hooks[name] !== \"function\") {\n            throw new Error(\"AutoForm \" + name + \" hook must be a function, not \" + (0, _typeof2.default)(hooks[name]));\n          }\n\n          if (replace) {\n            hooksList[name] = [];\n          }\n\n          hooksList[name].push(hooks[name]);\n        }\n      }\n\n      return autoFormHooksEach;\n    }());\n  }\n\n  return addHooksToList;\n}();\n\nHooks.getHooks = function () {\n  function getHooks(formId, type, subtype) {\n    var f, g;\n\n    if (subtype) {\n      f = Hooks.form[formId] && Hooks.form[formId][type] && Hooks.form[formId][type][subtype] || [];\n      g = Hooks.global[type] && Hooks.global[type][subtype] || [];\n    } else {\n      f = Hooks.form[formId] && Hooks.form[formId][type] || [];\n      g = Hooks.global[type] || [];\n    }\n\n    return f.concat(g);\n  }\n\n  return getHooks;\n}();","map":{"version":3,"sources":["packages/aldeed:autoform/autoform-hooks.js"],"names":["Hooks","form","hookNames","getDefault","hooks","before","after","_","each","hookName","global","addHooksToList","hooksList","replace","autoFormBeforeHooksEach","func","type","Error","push","autoFormAfterHooksEach","autoFormHooksEach","name","getHooks","formId","subtype","f","g","concat"],"mappings":"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","sourcesContent":["// Manages all hooks, supporting append/replace, get\n\nHooks = {\n  form: {}\n};\n\n// The names of all supported hooks, excluding \"before\" and \"after\".\nvar hookNames = ['formToDoc', 'formToModifier', 'docToForm', 'onSubmit', 'onSuccess', 'onError',\n    'beginSubmit', 'endSubmit'];\n\nHooks.getDefault = function() {\n  var hooks = {\n    before: {},\n    after: {}\n  };\n  _.each(hookNames, function(hookName) {\n    hooks[hookName] = [];\n  });\n  return hooks;\n};\n\nHooks.global = Hooks.getDefault();\n\nHooks.addHooksToList = function addHooksToList(hooksList, hooks, replace) {\n  // Add before hooks\n  hooks.before && _.each(hooks.before, function autoFormBeforeHooksEach(func, type) {\n    if (typeof func !== \"function\") {\n      throw new Error(\"AutoForm before hook must be a function, not \" + typeof func);\n    }\n    hooksList.before[type] = (!replace && hooksList.before[type]) ? hooksList.before[type] : [];\n    hooksList.before[type].push(func);\n  });\n\n  // Add after hooks\n  hooks.after && _.each(hooks.after, function autoFormAfterHooksEach(func, type) {\n    if (typeof func !== \"function\") {\n      throw new Error(\"AutoForm after hook must be a function, not \" + typeof func);\n    }\n    hooksList.after[type] = (!replace && hooksList.after[type]) ? hooksList.after[type] : [];\n    hooksList.after[type].push(func);\n  });\n\n  // Add all other hooks\n  _.each(hookNames, function autoFormHooksEach(name) {\n    if (hooks[name]) {\n      if (typeof hooks[name] !== \"function\") {\n        throw new Error(\"AutoForm \" + name + \" hook must be a function, not \" + typeof hooks[name]);\n      }\n\n      if(replace) {\n          hooksList[name] = [];\n      }\n\n      hooksList[name].push(hooks[name]);\n    }\n  });\n};\n\nHooks.getHooks = function getHooks(formId, type, subtype) {\n  var f, g;\n  if (subtype) {\n    f = Hooks.form[formId] && Hooks.form[formId][type] && Hooks.form[formId][type][subtype] || [];\n    g = Hooks.global[type] && Hooks.global[type][subtype] || [];\n  } else {\n    f = Hooks.form[formId] && Hooks.form[formId][type] || [];\n    g = Hooks.global[type] || [];\n  }\n  return f.concat(g);\n};\n"]},"sourceType":"script","hash":"c065ee44d8dd5eb7e73b1d506685f36b679ab461"}
