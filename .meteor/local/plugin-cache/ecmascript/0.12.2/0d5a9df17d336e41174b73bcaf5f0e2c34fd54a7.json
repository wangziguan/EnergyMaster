{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/formTypes/method-update.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/aldeed:autoform/formTypes/method-update.js","filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/formTypes/method-update.js","passPerPreset":false,"envName":"development","cwd":"/home/wangziguan/wzg/EnergyMaster","root":"/home/wangziguan/wzg/EnergyMaster","generatorOpts":{"filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/formTypes/method-update.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:autoform/formTypes/method-update.js"}},"code":"/* global AutoForm */\nAutoForm.addFormType('method-update', {\n  onSubmit: function () {\n    var c = this; // Prevent browser form submission\n\n    this.event.preventDefault();\n\n    if (!this.formAttributes.meteormethod) {\n      throw new Error('When form type is \"method-update\", you must also provide a \"meteormethod\" attribute');\n    } // Run \"before.method\" hooks\n\n\n    this.runBeforeHooks(this.updateDoc, function (updateDoc) {\n      // Validate. If both schema and collection were provided, then we validate\n      // against the collection schema here. Otherwise we validate against whichever\n      // one was passed.\n      var valid = c.formAttributes.validation === 'none' || c.formTypeDefinition.validateForm.call({\n        form: c.formAttributes,\n        formDoc: updateDoc,\n        useCollectionSchema: c.ssIsOverride\n      });\n\n      if (valid === false) {\n        c.failedValidation();\n      } else {\n        // Call the method. If a ddp connection was provided, use\n        // that instead of the default Meteor connection\n        var ddp = c.formAttributes.ddp;\n        ddp = ddp && typeof ddp.call === 'function' ? ddp : Meteor;\n        ddp.call(c.formAttributes.meteormethod, {\n          _id: c.docId,\n          modifier: updateDoc\n        }, c.result);\n      }\n    });\n  },\n  usesModifier: true,\n  validateForm: function () {\n    // Get SimpleSchema\n    var ss = AutoForm.getFormSchema(this.form.id);\n    var collection = AutoForm.getFormCollection(this.form.id); // If there is a `schema` attribute but you want to force validation against the\n    // collection's schema instead, pass useCollectionSchema=true\n\n    ss = this.useCollectionSchema && collection ? collection.simpleSchema() : ss; // We validate the modifier. We don't want to throw errors about missing required fields, etc.\n\n    return AutoForm._validateFormDoc(this.formDoc, true, this.form.id, ss, this.form);\n  },\n  shouldPrevalidate: function () {\n    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute\n    return !!this.formAttributes.collection && !!this.formAttributes.schema;\n  }\n});","map":{"version":3,"sources":["packages/aldeed:autoform/formTypes/method-update.js"],"names":["AutoForm","addFormType","onSubmit","c","event","preventDefault","formAttributes","meteormethod","Error","runBeforeHooks","updateDoc","valid","validation","formTypeDefinition","validateForm","call","form","formDoc","useCollectionSchema","ssIsOverride","failedValidation","ddp","Meteor","_id","docId","modifier","result","usesModifier","ss","getFormSchema","id","collection","getFormCollection","simpleSchema","_validateFormDoc","shouldPrevalidate","schema"],"mappings":"AAAA;AAEAA,QAAQ,CAACC,WAAT,CAAqB,eAArB,EAAsC;AACpCC,EAAAA,QAAQ,EAAE,YAAY;AACpB,QAAIC,CAAC,GAAG,IAAR,CADoB,CAGpB;;AACA,SAAKC,KAAL,CAAWC,cAAX;;AAEA,QAAI,CAAC,KAAKC,cAAL,CAAoBC,YAAzB,EAAuC;AACrC,YAAM,IAAIC,KAAJ,CAAU,qFAAV,CAAN;AACD,KARmB,CAUpB;;;AACA,SAAKC,cAAL,CAAoB,KAAKC,SAAzB,EAAoC,UAAUA,SAAV,EAAqB;AACvD;AACA;AACA;AACA,UAAIC,KAAK,GAAIR,CAAC,CAACG,cAAF,CAAiBM,UAAjB,KAAgC,MAAjC,IACRT,CAAC,CAACU,kBAAF,CAAqBC,YAArB,CAAkCC,IAAlC,CAAuC;AACrCC,QAAAA,IAAI,EAAEb,CAAC,CAACG,cAD6B;AAErCW,QAAAA,OAAO,EAAEP,SAF4B;AAGrCQ,QAAAA,mBAAmB,EAAEf,CAAC,CAACgB;AAHc,OAAvC,CADJ;;AAOA,UAAIR,KAAK,KAAK,KAAd,EAAqB;AACnBR,QAAAA,CAAC,CAACiB,gBAAF;AACD,OAFD,MAEO;AACL;AACA;AACA,YAAIC,GAAG,GAAGlB,CAAC,CAACG,cAAF,CAAiBe,GAA3B;AACAA,QAAAA,GAAG,GAAIA,GAAG,IAAI,OAAOA,GAAG,CAACN,IAAX,KAAoB,UAA5B,GAA0CM,GAA1C,GAAgDC,MAAtD;AACAD,QAAAA,GAAG,CAACN,IAAJ,CAASZ,CAAC,CAACG,cAAF,CAAiBC,YAA1B,EAAwC;AACtCgB,UAAAA,GAAG,EAAEpB,CAAC,CAACqB,KAD+B;AAEtCC,UAAAA,QAAQ,EAAEf;AAF4B,SAAxC,EAGGP,CAAC,CAACuB,MAHL;AAID;AACF,KAvBD;AAwBD,GApCmC;AAqCpCC,EAAAA,YAAY,EAAE,IArCsB;AAsCpCb,EAAAA,YAAY,EAAE,YAAY;AACxB;AACA,QAAIc,EAAE,GAAG5B,QAAQ,CAAC6B,aAAT,CAAuB,KAAKb,IAAL,CAAUc,EAAjC,CAAT;AAEA,QAAIC,UAAU,GAAG/B,QAAQ,CAACgC,iBAAT,CAA2B,KAAKhB,IAAL,CAAUc,EAArC,CAAjB,CAJwB,CAKxB;AACA;;AACAF,IAAAA,EAAE,GAAI,KAAKV,mBAAL,IAA4Ba,UAA7B,GAA2CA,UAAU,CAACE,YAAX,EAA3C,GAAuEL,EAA5E,CAPwB,CASxB;;AACA,WAAO5B,QAAQ,CAACkC,gBAAT,CAA0B,KAAKjB,OAA/B,EAAwC,IAAxC,EAA8C,KAAKD,IAAL,CAAUc,EAAxD,EAA4DF,EAA5D,EAAgE,KAAKZ,IAArE,CAAP;AACD,GAjDmC;AAkDpCmB,EAAAA,iBAAiB,EAAE,YAAY;AAC7B;AACA,WAAO,CAAC,CAAC,KAAK7B,cAAL,CAAoByB,UAAtB,IAAoC,CAAC,CAAC,KAAKzB,cAAL,CAAoB8B,MAAjE;AACD;AArDmC,CAAtC","sourcesContent":["/* global AutoForm */\n\nAutoForm.addFormType('method-update', {\n  onSubmit: function () {\n    var c = this;\n\n    // Prevent browser form submission\n    this.event.preventDefault();\n\n    if (!this.formAttributes.meteormethod) {\n      throw new Error('When form type is \"method-update\", you must also provide a \"meteormethod\" attribute');\n    }\n\n    // Run \"before.method\" hooks\n    this.runBeforeHooks(this.updateDoc, function (updateDoc) {\n      // Validate. If both schema and collection were provided, then we validate\n      // against the collection schema here. Otherwise we validate against whichever\n      // one was passed.\n      var valid = (c.formAttributes.validation === 'none') ||\n          c.formTypeDefinition.validateForm.call({\n            form: c.formAttributes,\n            formDoc: updateDoc,\n            useCollectionSchema: c.ssIsOverride\n          });\n\n      if (valid === false) {\n        c.failedValidation();\n      } else {\n        // Call the method. If a ddp connection was provided, use\n        // that instead of the default Meteor connection\n        var ddp = c.formAttributes.ddp;\n        ddp = (ddp && typeof ddp.call === 'function') ? ddp : Meteor;\n        ddp.call(c.formAttributes.meteormethod, {\n          _id: c.docId,\n          modifier: updateDoc,\n        }, c.result);\n      }\n    });\n  },\n  usesModifier: true,\n  validateForm: function () {\n    // Get SimpleSchema\n    var ss = AutoForm.getFormSchema(this.form.id);\n\n    var collection = AutoForm.getFormCollection(this.form.id);\n    // If there is a `schema` attribute but you want to force validation against the\n    // collection's schema instead, pass useCollectionSchema=true\n    ss = (this.useCollectionSchema && collection) ? collection.simpleSchema() : ss;\n\n    // We validate the modifier. We don't want to throw errors about missing required fields, etc.\n    return AutoForm._validateFormDoc(this.formDoc, true, this.form.id, ss, this.form);\n  },\n  shouldPrevalidate: function () {\n    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute\n    return !!this.formAttributes.collection && !!this.formAttributes.schema;\n  }\n});\n"]},"sourceType":"script","hash":"0d5a9df17d336e41174b73bcaf5f0e2c34fd54a7"}
