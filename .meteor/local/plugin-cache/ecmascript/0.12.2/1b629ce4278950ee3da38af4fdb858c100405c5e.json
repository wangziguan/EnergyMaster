{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:tabular/client/util.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/aldeed:tabular/client/util.js","filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:tabular/client/util.js","passPerPreset":false,"envName":"development","cwd":"/home/wangziguan/wzg/EnergyMaster","root":"/home/wangziguan/wzg/EnergyMaster","generatorOpts":{"filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:tabular/client/util.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:tabular/client/util.js"}},"code":"module.export({\n  cleanFieldName: function () {\n    return cleanFieldName;\n  },\n  cleanFieldNameForSearch: function () {\n    return cleanFieldNameForSearch;\n  },\n  sortsAreEqual: function () {\n    return sortsAreEqual;\n  },\n  objectsAreEqual: function () {\n    return objectsAreEqual;\n  },\n  getMongoSort: function () {\n    return getMongoSort;\n  }\n});\n\nvar _;\n\nmodule.link(\"meteor/underscore\", {\n  _: function (v) {\n    _ = v;\n  }\n}, 0);\n\nfunction cleanFieldName(field) {\n  // for field names with a dot, we just need\n  // the top level field name\n  var dot = field.indexOf('.');\n  if (dot !== -1) field = field.slice(0, dot); // If it's referencing an array, strip off the brackets\n\n  field = field.split('[')[0];\n  return field;\n}\n\nfunction cleanFieldNameForSearch(field) {\n  // Check if object has [\"foo\"]\n  if (field.indexOf('\\\"') !== -1) {\n    console.warn(\"The column data value '\" + field + \"' contains a \\\" character and will not be properly parsed for enabling search\");\n  } // If it's referencing an array, replace the brackets\n  // This will only work with an object which doesn't have [\"foo\"]\n\n\n  return field.replace(/\\[\\w+\\]/, \"\");\n}\n\nfunction sortsAreEqual(oldVal, newVal) {\n  if (oldVal === newVal) return true;\n  var areSame = false;\n\n  if (_.isArray(oldVal) && _.isArray(newVal) && oldVal.length === newVal.length) {\n    areSame = _.every(newVal, function (innerArray, i) {\n      return innerArray[0] === oldVal[i][0] && innerArray[1] === oldVal[i][1];\n    });\n  }\n\n  return areSame;\n}\n\nfunction objectsAreEqual(oldVal, newVal) {\n  if (oldVal === newVal) return true;\n  return JSON.stringify(oldVal) === JSON.stringify(newVal);\n}\n\nfunction getMongoSort(order, columns) {\n  if (!order || !columns) return; // TODO support the nested arrays format for sort\n  // and ignore instance functions like \"foo()\"\n\n  var sort = [];\n\n  _.each(order, function (_ref) {\n    var colIndex = _ref.column,\n        dir = _ref.dir;\n    var column = columns[colIndex]; // Sometimes when swapping out new table columns/collection, this will be called once\n    // with the old `order` object but the new `columns`. We protect against that here.\n\n    if (!column) return;\n    var propName = column.data;\n    var orderable = column.orderable;\n\n    if (typeof propName === 'string' && orderable !== false) {\n      sort.push([propName, dir]);\n    }\n  });\n\n  return sort;\n}\n\n;","map":{"version":3,"sources":["packages/aldeed:tabular/client/util.js"],"names":["module","export","cleanFieldName","cleanFieldNameForSearch","sortsAreEqual","objectsAreEqual","getMongoSort","_","link","v","field","dot","indexOf","slice","split","console","warn","replace","oldVal","newVal","areSame","isArray","length","every","innerArray","i","JSON","stringify","order","columns","sort","each","colIndex","column","dir","propName","data","orderable","push"],"mappings":"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","sourcesContent":["import { _ } from 'meteor/underscore';\n\nexport function cleanFieldName(field) {\n  // for field names with a dot, we just need\n  // the top level field name\n  const dot = field.indexOf('.');\n  if (dot !== -1) field = field.slice(0, dot);\n\n  // If it's referencing an array, strip off the brackets\n  field = field.split('[')[0];\n\n  return field;\n}\n\nexport function cleanFieldNameForSearch(field) {\n  // Check if object has [\"foo\"]\n  if (field.indexOf('\\\"') !== -1) {\n    console.warn(`The column data value '${field}' contains a \" character and will not be properly parsed for enabling search`);\n  }\n  // If it's referencing an array, replace the brackets\n  // This will only work with an object which doesn't have [\"foo\"]\n  return field.replace(/\\[\\w+\\]/, \"\");\n}\n\nexport function sortsAreEqual(oldVal, newVal) {\n  if (oldVal === newVal) return true;\n  var areSame = false;\n  if (_.isArray(oldVal) && _.isArray(newVal) && oldVal.length === newVal.length) {\n    areSame = _.every(newVal, function (innerArray, i) {\n      return innerArray[0] === oldVal[i][0] && innerArray[1] === oldVal[i][1];\n    });\n  }\n  return areSame;\n}\n\nexport function objectsAreEqual(oldVal, newVal) {\n  if (oldVal === newVal) return true;\n  return JSON.stringify(oldVal) === JSON.stringify(newVal);\n}\n\n// Take the DataTables `order` format and column info\n// and convert it into a mongo sort array.\nexport function getMongoSort(order, columns) {\n  if (!order || !columns) return;\n\n  // TODO support the nested arrays format for sort\n  // and ignore instance functions like \"foo()\"\n  const sort = [];\n  _.each(order, ({ column: colIndex, dir }) => {\n    const column = columns[colIndex];\n\n    // Sometimes when swapping out new table columns/collection, this will be called once\n    // with the old `order` object but the new `columns`. We protect against that here.\n    if (!column) return;\n\n    const propName = column.data;\n    const orderable = column.orderable;\n    if (typeof propName === 'string' && orderable !== false) {\n      sort.push([propName, dir]);\n    }\n  });\n  return sort;\n};\n"]},"sourceType":"script","hash":"1b629ce4278950ee3da38af4fdb858c100405c5e"}
