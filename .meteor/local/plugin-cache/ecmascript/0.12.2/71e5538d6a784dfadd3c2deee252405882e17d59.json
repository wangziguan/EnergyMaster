{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:collection2-core/collection2.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/aldeed:collection2-core/collection2.js","filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:collection2-core/collection2.js","passPerPreset":false,"envName":"development","cwd":"/home/wangziguan/wzg/EnergyMaster","root":"/home/wangziguan/wzg/EnergyMaster","generatorOpts":{"filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:collection2-core/collection2.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:collection2-core/collection2.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar EventEmitter;\nmodule.link(\"meteor/raix:eventemitter\", {\n  EventEmitter: function (v) {\n    EventEmitter = v;\n  }\n}, 0);\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 2);\nvar checkNpmVersions;\nmodule.link(\"meteor/tmeasday:check-npm-versions\", {\n  checkNpmVersions: function (v) {\n    checkNpmVersions = v;\n  }\n}, 3);\nvar clone;\nmodule.link(\"clone\", {\n  \"default\": function (v) {\n    clone = v;\n  }\n}, 4);\nvar EJSON;\nmodule.link(\"ejson\", {\n  \"default\": function (v) {\n    EJSON = v;\n  }\n}, 5);\nvar isEmpty;\nmodule.link(\"lodash.isempty\", {\n  \"default\": function (v) {\n    isEmpty = v;\n  }\n}, 6);\nvar isEqual;\nmodule.link(\"lodash.isequal\", {\n  \"default\": function (v) {\n    isEqual = v;\n  }\n}, 7);\nvar isObject;\nmodule.link(\"lodash.isobject\", {\n  \"default\": function (v) {\n    isObject = v;\n  }\n}, 8);\ncheckNpmVersions({\n  'simpl-schema': '>=0.0.0'\n}, 'aldeed:meteor-collection2-core');\n\nvar SimpleSchema = require('simpl-schema').default; // Exported only for listening to events\n\n\nvar Collection2 = new EventEmitter();\nvar defaultCleanOptions = {\n  filter: true,\n  autoConvert: true,\n  removeEmptyStrings: true,\n  trimStrings: true,\n  removeNullsFromArrays: false\n};\n/**\n * Mongo.Collection.prototype.attachSchema\n * @param {SimpleSchema|Object} ss - SimpleSchema instance or a schema definition object\n *    from which to create a new SimpleSchema instance\n * @param {Object} [options]\n * @param {Boolean} [options.transform=false] Set to `true` if your document must be passed\n *    through the collection's transform to properly validate.\n * @param {Boolean} [options.replace=false] Set to `true` to replace any existing schema instead of combining\n * @return {undefined}\n *\n * Use this method to attach a schema to a collection created by another package,\n * such as Meteor.users. It is most likely unsafe to call this method more than\n * once for a single collection, or to call this for a collection that had a\n * schema object passed to its constructor.\n */\n\nMongo.Collection.prototype.attachSchema = function () {\n  function c2AttachSchema(ss, options) {\n    options = options || {}; // Allow passing just the schema object\n\n    if (!(ss instanceof SimpleSchema)) {\n      ss = new SimpleSchema(ss);\n    }\n\n    this._c2 = this._c2 || {}; // If we've already attached one schema, we combine both into a new schema unless options.replace is `true`\n\n    if (this._c2._simpleSchema && options.replace !== true) {\n      if (ss.version >= 2) {\n        var newSS = new SimpleSchema(this._c2._simpleSchema);\n        newSS.extend(ss);\n        ss = newSS;\n      } else {\n        ss = new SimpleSchema([this._c2._simpleSchema, ss]);\n      }\n    }\n\n    var selector = options.selector;\n\n    function attachTo(obj) {\n      if ((0, _typeof2.default)(selector) === \"object\") {\n        // Index of existing schema with identical selector\n        var schemaIndex = -1; // we need an array to hold multiple schemas\n\n        obj._c2._simpleSchemas = obj._c2._simpleSchemas || []; // Loop through existing schemas with selectors\n\n        obj._c2._simpleSchemas.forEach(function (schema, index) {\n          // if we find a schema with an identical selector, save it's index\n          if (isEqual(schema.selector, selector)) {\n            schemaIndex = index;\n          }\n        });\n\n        if (schemaIndex === -1) {\n          // We didn't find the schema in our array - push it into the array\n          obj._c2._simpleSchemas.push({\n            schema: new SimpleSchema(ss),\n            selector: selector\n          });\n        } else {\n          // We found a schema with an identical selector in our array,\n          if (options.replace !== true) {\n            // Merge with existing schema unless options.replace is `true`\n            if (obj._c2._simpleSchemas[schemaIndex].schema.version >= 2) {\n              obj._c2._simpleSchemas[schemaIndex].schema.extend(ss);\n            } else {\n              obj._c2._simpleSchemas[schemaIndex].schema = new SimpleSchema([obj._c2._simpleSchemas[schemaIndex].schema, ss]);\n            }\n          } else {\n            // If options.repalce is `true` replace existing schema with new schema\n            obj._c2._simpleSchemas[schemaIndex].schema = ss;\n          }\n        } // Remove existing schemas without selector\n\n\n        delete obj._c2._simpleSchema;\n      } else {\n        // Track the schema in the collection\n        obj._c2._simpleSchema = ss; // Remove existing schemas with selector\n\n        delete obj._c2._simpleSchemas;\n      }\n    }\n\n    attachTo(this); // Attach the schema to the underlying LocalCollection, too\n\n    if (this._collection instanceof LocalCollection) {\n      this._collection._c2 = this._collection._c2 || {};\n      attachTo(this._collection);\n    }\n\n    defineDeny(this, options);\n    keepInsecure(this);\n    Collection2.emit('schema.attached', this, ss, options);\n  }\n\n  return c2AttachSchema;\n}();\n\n[Mongo.Collection, LocalCollection].forEach(function (obj) {\n  /**\n   * simpleSchema\n   * @description function detect the correct schema by given params. If it\n   * detect multi-schema presence in the collection, then it made an attempt to find a\n   * `selector` in args\n   * @param {Object} doc - It could be <update> on update/upsert or document\n   * itself on insert/remove\n   * @param {Object} [options] - It could be <update> on update/upsert etc\n   * @param {Object} [query] - it could be <query> on update/upsert\n   * @return {Object} Schema\n   */\n  obj.prototype.simpleSchema = function (doc, options, query) {\n    if (!this._c2) return null;\n    if (this._c2._simpleSchema) return this._c2._simpleSchema;\n    var schemas = this._c2._simpleSchemas;\n\n    if (schemas && schemas.length > 0) {\n      if (!doc) throw new Error('collection.simpleSchema() requires doc argument when there are multiple schemas');\n      var schema, selector, target;\n\n      for (var i = 0; i < schemas.length; i++) {\n        schema = schemas[i];\n        selector = Object.keys(schema.selector)[0]; // We will set this to undefined because in theory you might want to select\n        // on a null value.\n\n        target = undefined; // here we are looking for selector in different places\n        // $set should have more priority here\n\n        if (doc.$set && typeof doc.$set[selector] !== 'undefined') {\n          target = doc.$set[selector];\n        } else if (typeof doc[selector] !== 'undefined') {\n          target = doc[selector];\n        } else if (options && options.selector) {\n          target = options.selector[selector];\n        } else if (query && query[selector]) {\n          // on upsert/update operations\n          target = query[selector];\n        } // we need to compare given selector with doc property or option to\n        // find right schema\n\n\n        if (target !== undefined && target === schema.selector[selector]) {\n          return schema.schema;\n        }\n      }\n    }\n\n    return null;\n  };\n}); // Wrap DB write operation methods\n\n['insert', 'update'].forEach(function (methodName) {\n  var _super = Mongo.Collection.prototype[methodName];\n\n  Mongo.Collection.prototype[methodName] = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var options = methodName === \"insert\" ? args[1] : args[2]; // Support missing options arg\n\n    if (!options || typeof options === \"function\") {\n      options = {};\n    }\n\n    if (this._c2 && options.bypassCollection2 !== true) {\n      var userId = null;\n\n      try {\n        // https://github.com/aldeed/meteor-collection2/issues/175\n        userId = Meteor.userId();\n      } catch (err) {}\n\n      args = doValidate(this, methodName, args, Meteor.isServer || this._connection === null, // getAutoValues\n      userId, Meteor.isServer // isFromTrustedCode\n      );\n\n      if (!args) {\n        // doValidate already called the callback or threw the error so we're done.\n        // But insert should always return an ID to match core behavior.\n        return methodName === \"insert\" ? this._makeNewID() : undefined;\n      }\n    } else {\n      // We still need to adjust args because insert does not take options\n      if (methodName === \"insert\" && typeof args[1] !== 'function') args.splice(1, 1);\n    }\n\n    return _super.apply(this, args);\n  };\n});\n/*\n * Private\n */\n\nfunction doValidate(collection, type, args, getAutoValues, userId, isFromTrustedCode) {\n  var doc, callback, error, options, isUpsert, selector, last, hasCallback;\n\n  if (!args.length) {\n    throw new Error(type + \" requires an argument\");\n  } // Gather arguments and cache the selector\n\n\n  if (type === \"insert\") {\n    doc = args[0];\n    options = args[1];\n    callback = args[2]; // The real insert doesn't take options\n\n    if (typeof options === \"function\") {\n      args = [doc, options];\n    } else if (typeof callback === \"function\") {\n      args = [doc, callback];\n    } else {\n      args = [doc];\n    }\n  } else if (type === \"update\") {\n    selector = args[0];\n    doc = args[1];\n    options = args[2];\n    callback = args[3];\n  } else {\n    throw new Error(\"invalid type argument\");\n  }\n\n  var validatedObjectWasInitiallyEmpty = isEmpty(doc); // Support missing options arg\n\n  if (!callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  last = args.length - 1;\n  hasCallback = typeof args[last] === 'function'; // If update was called with upsert:true, flag as an upsert\n\n  isUpsert = type === \"update\" && options.upsert === true; // we need to pass `doc` and `options` to `simpleSchema` method, that's why\n  // schema declaration moved here\n\n  var schema = collection.simpleSchema(doc, options, selector);\n  var isLocalCollection = collection._connection === null; // On the server and for local collections, we allow passing `getAutoValues: false` to disable autoValue functions\n\n  if ((Meteor.isServer || isLocalCollection) && options.getAutoValues === false) {\n    getAutoValues = false;\n  } // Determine validation context\n\n\n  var validationContext = options.validationContext;\n\n  if (validationContext) {\n    if (typeof validationContext === 'string') {\n      validationContext = schema.namedContext(validationContext);\n    }\n  } else {\n    validationContext = schema.namedContext();\n  } // Add a default callback function if we're on the client and no callback was given\n\n\n  if (Meteor.isClient && !callback) {\n    // Client can't block, so it can't report errors by exception,\n    // only by callback. If they forget the callback, give them a\n    // default one that logs the error, so they aren't totally\n    // baffled if their writes don't work because their database is\n    // down.\n    callback = function (err) {\n      if (err) {\n        Meteor._debug(type + \" failed: \" + (err.reason || err.stack));\n      }\n    };\n  } // If client validation is fine or is skipped but then something\n  // is found to be invalid on the server, we get that error back\n  // as a special Meteor.Error that we need to parse.\n\n\n  if (Meteor.isClient && hasCallback) {\n    callback = args[last] = wrapCallbackForParsingServerErrors(validationContext, callback);\n  }\n\n  var schemaAllowsId = schema.allowsKey(\"_id\");\n\n  if (type === \"insert\" && !doc._id && schemaAllowsId) {\n    doc._id = collection._makeNewID();\n  } // Get the docId for passing in the autoValue/custom context\n\n\n  var docId;\n\n  if (type === 'insert') {\n    docId = doc._id; // might be undefined\n  } else if (type === \"update\" && selector) {\n    docId = typeof selector === 'string' || selector instanceof Mongo.ObjectID ? selector : selector._id;\n  } // If _id has already been added, remove it temporarily if it's\n  // not explicitly defined in the schema.\n\n\n  var cachedId;\n\n  if (doc._id && !schemaAllowsId) {\n    cachedId = doc._id;\n    delete doc._id;\n  }\n\n  var autoValueContext = {\n    isInsert: type === \"insert\",\n    isUpdate: type === \"update\" && options.upsert !== true,\n    isUpsert: isUpsert,\n    userId: userId,\n    isFromTrustedCode: isFromTrustedCode,\n    docId: docId,\n    isLocalCollection: isLocalCollection\n  };\n  var extendAutoValueContext = (0, _objectSpread2.default)({}, (schema._cleanOptions || {}).extendAutoValueContext || {}, autoValueContext, options.extendAutoValueContext);\n  var cleanOptionsForThisOperation = {};\n  [\"autoConvert\", \"filter\", \"removeEmptyStrings\", \"removeNullsFromArrays\", \"trimStrings\"].forEach(function (prop) {\n    if (typeof options[prop] === \"boolean\") {\n      cleanOptionsForThisOperation[prop] = options[prop];\n    }\n  }); // Preliminary cleaning on both client and server. On the server and for local\n  // collections, automatic values will also be set at this point.\n\n  schema.clean(doc, (0, _objectSpread2.default)({\n    mutate: true,\n    // Clean the doc/modifier in place\n    isModifier: type !== \"insert\"\n  }, defaultCleanOptions, schema._cleanOptions || {}, cleanOptionsForThisOperation, {\n    extendAutoValueContext: extendAutoValueContext,\n    // This was extended separately above\n    getAutoValues: getAutoValues // Force this override\n\n  })); // We clone before validating because in some cases we need to adjust the\n  // object a bit before validating it. If we adjusted `doc` itself, our\n  // changes would persist into the database.\n\n  var docToValidate = {};\n\n  for (var prop in meteorBabelHelpers.sanitizeForInObject(doc)) {\n    // We omit prototype properties when cloning because they will not be valid\n    // and mongo omits them when saving to the database anyway.\n    if (Object.prototype.hasOwnProperty.call(doc, prop)) {\n      docToValidate[prop] = doc[prop];\n    }\n  } // On the server, upserts are possible; SimpleSchema handles upserts pretty\n  // well by default, but it will not know about the fields in the selector,\n  // which are also stored in the database if an insert is performed. So we\n  // will allow these fields to be considered for validation by adding them\n  // to the $set in the modifier. This is no doubt prone to errors, but there\n  // probably isn't any better way right now.\n\n\n  if (Meteor.isServer && isUpsert && isObject(selector)) {\n    var set = docToValidate.$set || {}; // If selector uses $and format, convert to plain object selector\n\n    if (Array.isArray(selector.$and)) {\n      var plainSelector = {};\n      selector.$and.forEach(function (sel) {\n        Object.assign(plainSelector, sel);\n      });\n      docToValidate.$set = plainSelector;\n    } else {\n      docToValidate.$set = clone(selector);\n    }\n\n    if (!schemaAllowsId) delete docToValidate.$set._id;\n    Object.assign(docToValidate.$set, set);\n  } // Set automatic values for validation on the client.\n  // On the server, we already updated doc with auto values, but on the client,\n  // we will add them to docToValidate for validation purposes only.\n  // This is because we want all actual values generated on the server.\n\n\n  if (Meteor.isClient && !isLocalCollection) {\n    schema.clean(docToValidate, {\n      autoConvert: false,\n      extendAutoValueContext: extendAutoValueContext,\n      filter: false,\n      getAutoValues: true,\n      isModifier: type !== \"insert\",\n      mutate: true,\n      // Clean the doc/modifier in place\n      removeEmptyStrings: false,\n      removeNullsFromArrays: false,\n      trimStrings: false\n    });\n  } // XXX Maybe move this into SimpleSchema\n\n\n  if (!validatedObjectWasInitiallyEmpty && isEmpty(docToValidate)) {\n    throw new Error('After filtering out keys not in the schema, your ' + (type === 'update' ? 'modifier' : 'object') + ' is now empty');\n  } // Validate doc\n\n\n  var isValid;\n\n  if (options.validate === false) {\n    isValid = true;\n  } else {\n    isValid = validationContext.validate(docToValidate, {\n      modifier: type === \"update\" || type === \"upsert\",\n      upsert: isUpsert,\n      extendedCustomContext: (0, _objectSpread2.default)({\n        isInsert: type === \"insert\",\n        isUpdate: type === \"update\" && options.upsert !== true,\n        isUpsert: isUpsert,\n        userId: userId,\n        isFromTrustedCode: isFromTrustedCode,\n        docId: docId,\n        isLocalCollection: isLocalCollection\n      }, options.extendedCustomContext || {})\n    });\n  }\n\n  if (isValid) {\n    // Add the ID back\n    if (cachedId) {\n      doc._id = cachedId;\n    } // Update the args to reflect the cleaned doc\n    // XXX not sure this is necessary since we mutate\n\n\n    if (type === \"insert\") {\n      args[0] = doc;\n    } else {\n      args[1] = doc;\n    } // If callback, set invalidKey when we get a mongo unique error\n\n\n    if (Meteor.isServer && hasCallback) {\n      args[last] = wrapCallbackForParsingMongoValidationErrors(validationContext, args[last]);\n    }\n\n    return args;\n  } else {\n    error = getErrorObject(validationContext, \"in \" + collection._name + \" \" + type);\n\n    if (callback) {\n      // insert/update/upsert pass `false` when there's an error, so we do that\n      callback(error, false);\n    } else {\n      throw error;\n    }\n  }\n}\n\nfunction getErrorObject(context) {\n  var appendToMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var message;\n  var invalidKeys = typeof context.validationErrors === 'function' ? context.validationErrors() : context.invalidKeys();\n\n  if (invalidKeys.length) {\n    var firstErrorKey = invalidKeys[0].name;\n    var firstErrorMessage = context.keyErrorMessage(firstErrorKey); // If the error is in a nested key, add the full key to the error message\n    // to be more helpful.\n\n    if (firstErrorKey.indexOf('.') === -1) {\n      message = firstErrorMessage;\n    } else {\n      message = firstErrorMessage + \" (\" + firstErrorKey + \")\";\n    }\n  } else {\n    message = \"Failed validation\";\n  }\n\n  message = (message + \" \" + appendToMessage).trim();\n  var error = new Error(message);\n  error.invalidKeys = invalidKeys;\n  error.validationContext = context; // If on the server, we add a sanitized error, too, in case we're\n  // called from a method.\n\n  if (Meteor.isServer) {\n    error.sanitizedError = new Meteor.Error(400, message, EJSON.stringify(error.invalidKeys));\n  }\n\n  return error;\n}\n\nfunction addUniqueError(context, errorMessage) {\n  var name = errorMessage.split('c2_')[1].split(' ')[0];\n  var val = errorMessage.split('dup key:')[1].split('\"')[1];\n  var addValidationErrorsPropName = typeof context.addValidationErrors === 'function' ? 'addValidationErrors' : 'addInvalidKeys';\n  context[addValidationErrorsPropName]([{\n    name: name,\n    type: 'notUnique',\n    value: val\n  }]);\n}\n\nfunction wrapCallbackForParsingMongoValidationErrors(validationContext, cb) {\n  return function () {\n    function wrappedCallbackForParsingMongoValidationErrors() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      var error = args[0];\n\n      if (error && (error.name === \"MongoError\" && error.code === 11001 || error.message.indexOf('MongoError: E11000' !== -1)) && error.message.indexOf('c2_') !== -1) {\n        addUniqueError(validationContext, error.message);\n        args[0] = getErrorObject(validationContext);\n      }\n\n      return cb.apply(this, args);\n    }\n\n    return wrappedCallbackForParsingMongoValidationErrors;\n  }();\n}\n\nfunction wrapCallbackForParsingServerErrors(validationContext, cb) {\n  var addValidationErrorsPropName = typeof validationContext.addValidationErrors === 'function' ? 'addValidationErrors' : 'addInvalidKeys';\n  return function () {\n    function wrappedCallbackForParsingServerErrors() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      var error = args[0]; // Handle our own validation errors\n\n      if (error instanceof Meteor.Error && error.error === 400 && error.reason === \"INVALID\" && typeof error.details === \"string\") {\n        var invalidKeysFromServer = EJSON.parse(error.details);\n        validationContext[addValidationErrorsPropName](invalidKeysFromServer);\n        args[0] = getErrorObject(validationContext);\n      } // Handle Mongo unique index errors, which are forwarded to the client as 409 errors\n      else if (error instanceof Meteor.Error && error.error === 409 && error.reason && error.reason.indexOf('E11000') !== -1 && error.reason.indexOf('c2_') !== -1) {\n          addUniqueError(validationContext, error.reason);\n          args[0] = getErrorObject(validationContext);\n        }\n\n      return cb.apply(this, args);\n    }\n\n    return wrappedCallbackForParsingServerErrors;\n  }();\n}\n\nvar alreadyInsecured = {};\n\nfunction keepInsecure(c) {\n  // If insecure package is in use, we need to add allow rules that return\n  // true. Otherwise, it would seemingly turn off insecure mode.\n  if (Package && Package.insecure && !alreadyInsecured[c._name]) {\n    c.allow({\n      insert: function () {\n        return true;\n      },\n      update: function () {\n        return true;\n      },\n      remove: function () {\n        return true;\n      },\n      fetch: [],\n      transform: null\n    });\n    alreadyInsecured[c._name] = true;\n  } // If insecure package is NOT in use, then adding the two deny functions\n  // does not have any effect on the main app's security paradigm. The\n  // user will still be required to add at least one allow function of her\n  // own for each operation for this collection. And the user may still add\n  // additional deny functions, but does not have to.\n\n}\n\nvar alreadyDefined = {};\n\nfunction defineDeny(c, options) {\n  if (!alreadyDefined[c._name]) {\n    var isLocalCollection = c._connection === null; // First define deny functions to extend doc with the results of clean\n    // and autovalues. This must be done with \"transform: null\" or we would be\n    // extending a clone of doc and therefore have no effect.\n\n    c.deny({\n      insert: function (userId, doc) {\n        // Referenced doc is cleaned in place\n        c.simpleSchema(doc).clean(doc, {\n          mutate: true,\n          isModifier: false,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: true,\n            isUpdate: false,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n        return false;\n      },\n      update: function (userId, doc, fields, modifier) {\n        // Referenced modifier is cleaned in place\n        c.simpleSchema(modifier).clean(modifier, {\n          mutate: true,\n          isModifier: true,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: false,\n            isUpdate: true,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc && doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n        return false;\n      },\n      fetch: ['_id'],\n      transform: null\n    }); // Second define deny functions to validate again on the server\n    // for client-initiated inserts and updates. These should be\n    // called after the clean/autovalue functions since we're adding\n    // them after. These must *not* have \"transform: null\" if options.transform is true because\n    // we need to pass the doc through any transforms to be sure\n    // that custom types are properly recognized for type validation.\n\n    c.deny((0, _objectSpread2.default)({\n      insert: function (userId, doc) {\n        // We pass the false options because we will have done them on client if desired\n        doValidate(c, \"insert\", [doc, {\n          trimStrings: false,\n          removeEmptyStrings: false,\n          filter: false,\n          autoConvert: false\n        }, function (error) {\n          if (error) {\n            throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n          }\n        }], false, // getAutoValues\n        userId, false // isFromTrustedCode\n        );\n        return false;\n      },\n      update: function (userId, doc, fields, modifier) {\n        // NOTE: This will never be an upsert because client-side upserts\n        // are not allowed once you define allow/deny functions.\n        // We pass the false options because we will have done them on client if desired\n        doValidate(c, \"update\", [{\n          _id: doc && doc._id\n        }, modifier, {\n          trimStrings: false,\n          removeEmptyStrings: false,\n          filter: false,\n          autoConvert: false\n        }, function (error) {\n          if (error) {\n            throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n          }\n        }], false, // getAutoValues\n        userId, false // isFromTrustedCode\n        );\n        return false;\n      },\n      fetch: ['_id']\n    }, options.transform === true ? {} : {\n      transform: null\n    })); // note that we've already done this collection so that we don't do it again\n    // if attachSchema is called again\n\n    alreadyDefined[c._name] = true;\n  }\n}\n\nmodule.exportDefault(Collection2);","map":{"version":3,"sources":["packages/aldeed:collection2-core/collection2.js"],"names":["EventEmitter","module","link","v","Meteor","Mongo","checkNpmVersions","clone","EJSON","isEmpty","isEqual","isObject","SimpleSchema","require","default","Collection2","defaultCleanOptions","filter","autoConvert","removeEmptyStrings","trimStrings","removeNullsFromArrays","Collection","prototype","attachSchema","c2AttachSchema","ss","options","_c2","_simpleSchema","replace","version","newSS","extend","selector","attachTo","obj","schemaIndex","_simpleSchemas","forEach","schema","index","push","_collection","LocalCollection","defineDeny","keepInsecure","emit","simpleSchema","doc","query","schemas","length","Error","target","i","Object","keys","undefined","$set","methodName","_super","args","bypassCollection2","userId","err","doValidate","isServer","_connection","_makeNewID","splice","apply","collection","type","getAutoValues","isFromTrustedCode","callback","error","isUpsert","last","hasCallback","validatedObjectWasInitiallyEmpty","upsert","isLocalCollection","validationContext","namedContext","isClient","_debug","reason","stack","wrapCallbackForParsingServerErrors","schemaAllowsId","allowsKey","_id","docId","ObjectID","cachedId","autoValueContext","isInsert","isUpdate","extendAutoValueContext","_cleanOptions","cleanOptionsForThisOperation","prop","clean","mutate","isModifier","docToValidate","hasOwnProperty","call","set","Array","isArray","$and","plainSelector","sel","assign","isValid","validate","modifier","extendedCustomContext","wrapCallbackForParsingMongoValidationErrors","getErrorObject","_name","context","appendToMessage","message","invalidKeys","validationErrors","firstErrorKey","name","firstErrorMessage","keyErrorMessage","indexOf","trim","sanitizedError","stringify","addUniqueError","errorMessage","split","val","addValidationErrorsPropName","addValidationErrors","value","cb","wrappedCallbackForParsingMongoValidationErrors","code","wrappedCallbackForParsingServerErrors","details","invalidKeysFromServer","parse","alreadyInsecured","c","Package","insecure","allow","insert","update","remove","fetch","transform","alreadyDefined","deny","fields","exportDefault"],"mappings":"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","sourcesContent":["import { EventEmitter } from 'meteor/raix:eventemitter';\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\nimport clone from 'clone';\nimport EJSON from 'ejson';\nimport isEmpty from 'lodash.isempty';\nimport isEqual from 'lodash.isequal';\nimport isObject from 'lodash.isobject';\n\ncheckNpmVersions({ 'simpl-schema': '>=0.0.0' }, 'aldeed:meteor-collection2-core');\n\nconst SimpleSchema = require('simpl-schema').default;\n\n// Exported only for listening to events\nconst Collection2 = new EventEmitter();\n\nconst defaultCleanOptions = {\n  filter: true,\n  autoConvert: true,\n  removeEmptyStrings: true,\n  trimStrings: true,\n  removeNullsFromArrays: false,\n};\n\n/**\n * Mongo.Collection.prototype.attachSchema\n * @param {SimpleSchema|Object} ss - SimpleSchema instance or a schema definition object\n *    from which to create a new SimpleSchema instance\n * @param {Object} [options]\n * @param {Boolean} [options.transform=false] Set to `true` if your document must be passed\n *    through the collection's transform to properly validate.\n * @param {Boolean} [options.replace=false] Set to `true` to replace any existing schema instead of combining\n * @return {undefined}\n *\n * Use this method to attach a schema to a collection created by another package,\n * such as Meteor.users. It is most likely unsafe to call this method more than\n * once for a single collection, or to call this for a collection that had a\n * schema object passed to its constructor.\n */\nMongo.Collection.prototype.attachSchema = function c2AttachSchema(ss, options) {\n  options = options || {};\n\n  // Allow passing just the schema object\n  if (!(ss instanceof SimpleSchema)) {\n    ss = new SimpleSchema(ss);\n  }\n\n  this._c2 = this._c2 || {};\n\n  // If we've already attached one schema, we combine both into a new schema unless options.replace is `true`\n  if (this._c2._simpleSchema && options.replace !== true) {\n    if (ss.version >= 2) {\n      var newSS = new SimpleSchema(this._c2._simpleSchema);\n      newSS.extend(ss);\n      ss = newSS;\n    } else {\n      ss = new SimpleSchema([this._c2._simpleSchema, ss]);\n    }\n  }\n\n  var selector = options.selector;\n\n  function attachTo(obj) {\n    if (typeof selector === \"object\") {\n      // Index of existing schema with identical selector\n      var schemaIndex = -1;\n\n      // we need an array to hold multiple schemas\n      obj._c2._simpleSchemas = obj._c2._simpleSchemas || [];\n\n      // Loop through existing schemas with selectors\n      obj._c2._simpleSchemas.forEach((schema, index) => {\n        // if we find a schema with an identical selector, save it's index\n        if(isEqual(schema.selector, selector)) {\n          schemaIndex = index;\n        }\n      });\n      if (schemaIndex === -1) {\n        // We didn't find the schema in our array - push it into the array\n        obj._c2._simpleSchemas.push({\n          schema: new SimpleSchema(ss),\n          selector: selector,\n        });\n      } else {\n        // We found a schema with an identical selector in our array,\n        if (options.replace !== true) {\n          // Merge with existing schema unless options.replace is `true`\n          if (obj._c2._simpleSchemas[schemaIndex].schema.version >= 2) {\n            obj._c2._simpleSchemas[schemaIndex].schema.extend(ss);\n          } else {\n            obj._c2._simpleSchemas[schemaIndex].schema = new SimpleSchema([obj._c2._simpleSchemas[schemaIndex].schema, ss]);\n          }\n        } else {\n          // If options.repalce is `true` replace existing schema with new schema\n          obj._c2._simpleSchemas[schemaIndex].schema = ss;\n        }\n\n      }\n\n      // Remove existing schemas without selector\n      delete obj._c2._simpleSchema;\n    } else {\n      // Track the schema in the collection\n      obj._c2._simpleSchema = ss;\n\n      // Remove existing schemas with selector\n      delete obj._c2._simpleSchemas;\n    }\n  }\n\n  attachTo(this);\n  // Attach the schema to the underlying LocalCollection, too\n  if (this._collection instanceof LocalCollection) {\n    this._collection._c2 = this._collection._c2 || {};\n    attachTo(this._collection);\n  }\n\n  defineDeny(this, options);\n  keepInsecure(this);\n\n  Collection2.emit('schema.attached', this, ss, options);\n};\n\n[Mongo.Collection, LocalCollection].forEach((obj) => {\n  /**\n   * simpleSchema\n   * @description function detect the correct schema by given params. If it\n   * detect multi-schema presence in the collection, then it made an attempt to find a\n   * `selector` in args\n   * @param {Object} doc - It could be <update> on update/upsert or document\n   * itself on insert/remove\n   * @param {Object} [options] - It could be <update> on update/upsert etc\n   * @param {Object} [query] - it could be <query> on update/upsert\n   * @return {Object} Schema\n   */\n  obj.prototype.simpleSchema = function (doc, options, query) {\n    if (!this._c2) return null;\n    if (this._c2._simpleSchema) return this._c2._simpleSchema;\n\n    var schemas = this._c2._simpleSchemas;\n    if (schemas && schemas.length > 0) {\n      if (!doc) throw new Error('collection.simpleSchema() requires doc argument when there are multiple schemas');\n\n      var schema, selector, target;\n      for (var i = 0; i < schemas.length; i++) {\n        schema = schemas[i];\n        selector = Object.keys(schema.selector)[0];\n\n        // We will set this to undefined because in theory you might want to select\n        // on a null value.\n        target = undefined;\n\n        // here we are looking for selector in different places\n        // $set should have more priority here\n        if (doc.$set && typeof doc.$set[selector] !== 'undefined') {\n          target = doc.$set[selector];\n        } else if (typeof doc[selector] !== 'undefined') {\n          target = doc[selector];\n        } else if (options && options.selector) {\n          target = options.selector[selector];\n        } else if (query && query[selector]) { // on upsert/update operations\n          target = query[selector];\n        }\n\n        // we need to compare given selector with doc property or option to\n        // find right schema\n        if (target !== undefined && target === schema.selector[selector]) {\n          return schema.schema;\n        }\n      }\n    }\n\n    return null;\n  };\n});\n\n// Wrap DB write operation methods\n['insert', 'update'].forEach((methodName) => {\n  const _super = Mongo.Collection.prototype[methodName];\n  Mongo.Collection.prototype[methodName] = function(...args) {\n    let options = (methodName === \"insert\") ? args[1] : args[2];\n\n    // Support missing options arg\n    if (!options || typeof options === \"function\") {\n      options = {};\n    }\n\n    if (this._c2 && options.bypassCollection2 !== true) {\n      var userId = null;\n      try { // https://github.com/aldeed/meteor-collection2/issues/175\n        userId = Meteor.userId();\n      } catch (err) {}\n\n      args = doValidate(\n        this,\n        methodName,\n        args,\n        Meteor.isServer || this._connection === null, // getAutoValues\n        userId,\n        Meteor.isServer // isFromTrustedCode\n      );\n      if (!args) {\n        // doValidate already called the callback or threw the error so we're done.\n        // But insert should always return an ID to match core behavior.\n        return methodName === \"insert\" ? this._makeNewID() : undefined;\n      }\n    } else {\n      // We still need to adjust args because insert does not take options\n      if (methodName === \"insert\" && typeof args[1] !== 'function') args.splice(1, 1);\n    }\n\n    return _super.apply(this, args);\n  };\n});\n\n/*\n * Private\n */\n\nfunction doValidate(collection, type, args, getAutoValues, userId, isFromTrustedCode) {\n  var doc, callback, error, options, isUpsert, selector, last, hasCallback;\n\n  if (!args.length) {\n    throw new Error(type + \" requires an argument\");\n  }\n\n  // Gather arguments and cache the selector\n  if (type === \"insert\") {\n    doc = args[0];\n    options = args[1];\n    callback = args[2];\n\n    // The real insert doesn't take options\n    if (typeof options === \"function\") {\n      args = [doc, options];\n    } else if (typeof callback === \"function\") {\n      args = [doc, callback];\n    } else {\n      args = [doc];\n    }\n  } else if (type === \"update\") {\n    selector = args[0];\n    doc = args[1];\n    options = args[2];\n    callback = args[3];\n  } else {\n    throw new Error(\"invalid type argument\");\n  }\n\n  var validatedObjectWasInitiallyEmpty = isEmpty(doc);\n\n  // Support missing options arg\n  if (!callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n\n  last = args.length - 1;\n\n  hasCallback = (typeof args[last] === 'function');\n\n  // If update was called with upsert:true, flag as an upsert\n  isUpsert = (type === \"update\" && options.upsert === true);\n\n  // we need to pass `doc` and `options` to `simpleSchema` method, that's why\n  // schema declaration moved here\n  var schema = collection.simpleSchema(doc, options, selector);\n  var isLocalCollection = (collection._connection === null);\n\n  // On the server and for local collections, we allow passing `getAutoValues: false` to disable autoValue functions\n  if ((Meteor.isServer || isLocalCollection) && options.getAutoValues === false) {\n    getAutoValues = false;\n  }\n\n  // Determine validation context\n  var validationContext = options.validationContext;\n  if (validationContext) {\n    if (typeof validationContext === 'string') {\n      validationContext = schema.namedContext(validationContext);\n    }\n  } else {\n    validationContext = schema.namedContext();\n  }\n\n  // Add a default callback function if we're on the client and no callback was given\n  if (Meteor.isClient && !callback) {\n    // Client can't block, so it can't report errors by exception,\n    // only by callback. If they forget the callback, give them a\n    // default one that logs the error, so they aren't totally\n    // baffled if their writes don't work because their database is\n    // down.\n    callback = function(err) {\n      if (err) {\n        Meteor._debug(type + \" failed: \" + (err.reason || err.stack));\n      }\n    };\n  }\n\n  // If client validation is fine or is skipped but then something\n  // is found to be invalid on the server, we get that error back\n  // as a special Meteor.Error that we need to parse.\n  if (Meteor.isClient && hasCallback) {\n    callback = args[last] = wrapCallbackForParsingServerErrors(validationContext, callback);\n  }\n\n  var schemaAllowsId = schema.allowsKey(\"_id\");\n  if (type === \"insert\" && !doc._id && schemaAllowsId) {\n    doc._id = collection._makeNewID();\n  }\n\n  // Get the docId for passing in the autoValue/custom context\n  var docId;\n  if (type === 'insert') {\n    docId = doc._id; // might be undefined\n  } else if (type === \"update\" && selector) {\n    docId = typeof selector === 'string' || selector instanceof Mongo.ObjectID ? selector : selector._id;\n  }\n\n  // If _id has already been added, remove it temporarily if it's\n  // not explicitly defined in the schema.\n  var cachedId;\n  if (doc._id && !schemaAllowsId) {\n    cachedId = doc._id;\n    delete doc._id;\n  }\n\n  const autoValueContext = {\n    isInsert: (type === \"insert\"),\n    isUpdate: (type === \"update\" && options.upsert !== true),\n    isUpsert,\n    userId,\n    isFromTrustedCode,\n    docId,\n    isLocalCollection\n  };\n\n  const extendAutoValueContext = {\n    ...((schema._cleanOptions || {}).extendAutoValueContext || {}),\n    ...autoValueContext,\n    ...options.extendAutoValueContext,\n  };\n\n  const cleanOptionsForThisOperation = {};\n  [\"autoConvert\", \"filter\", \"removeEmptyStrings\", \"removeNullsFromArrays\", \"trimStrings\"].forEach(prop => {\n    if (typeof options[prop] === \"boolean\") {\n      cleanOptionsForThisOperation[prop] = options[prop];\n    }\n  });\n\n  // Preliminary cleaning on both client and server. On the server and for local\n  // collections, automatic values will also be set at this point.\n  schema.clean(doc, {\n    mutate: true, // Clean the doc/modifier in place\n    isModifier: (type !== \"insert\"),\n    // Start with some Collection2 defaults, which will usually be overwritten\n    ...defaultCleanOptions,\n    // The extend with the schema-level defaults (from SimpleSchema constructor options)\n    ...(schema._cleanOptions || {}),\n    // Finally, options for this specific operation should take precedance\n    ...cleanOptionsForThisOperation,\n    extendAutoValueContext, // This was extended separately above\n    getAutoValues, // Force this override\n  });\n\n  // We clone before validating because in some cases we need to adjust the\n  // object a bit before validating it. If we adjusted `doc` itself, our\n  // changes would persist into the database.\n  var docToValidate = {};\n  for (var prop in doc) {\n    // We omit prototype properties when cloning because they will not be valid\n    // and mongo omits them when saving to the database anyway.\n    if (Object.prototype.hasOwnProperty.call(doc, prop)) {\n      docToValidate[prop] = doc[prop];\n    }\n  }\n\n  // On the server, upserts are possible; SimpleSchema handles upserts pretty\n  // well by default, but it will not know about the fields in the selector,\n  // which are also stored in the database if an insert is performed. So we\n  // will allow these fields to be considered for validation by adding them\n  // to the $set in the modifier. This is no doubt prone to errors, but there\n  // probably isn't any better way right now.\n  if (Meteor.isServer && isUpsert && isObject(selector)) {\n    var set = docToValidate.$set || {};\n\n    // If selector uses $and format, convert to plain object selector\n    if (Array.isArray(selector.$and)) {\n      const plainSelector = {};\n      selector.$and.forEach(sel => {\n        Object.assign(plainSelector, sel);\n      });\n      docToValidate.$set = plainSelector;\n    } else {\n      docToValidate.$set = clone(selector);\n    }\n\n    if (!schemaAllowsId) delete docToValidate.$set._id;\n    Object.assign(docToValidate.$set, set);\n  }\n\n  // Set automatic values for validation on the client.\n  // On the server, we already updated doc with auto values, but on the client,\n  // we will add them to docToValidate for validation purposes only.\n  // This is because we want all actual values generated on the server.\n  if (Meteor.isClient && !isLocalCollection) {\n    schema.clean(docToValidate, {\n      autoConvert: false,\n      extendAutoValueContext,\n      filter: false,\n      getAutoValues: true,\n      isModifier: (type !== \"insert\"),\n      mutate: true, // Clean the doc/modifier in place\n      removeEmptyStrings: false,\n      removeNullsFromArrays: false,\n      trimStrings: false,\n    });\n  }\n\n  // XXX Maybe move this into SimpleSchema\n  if (!validatedObjectWasInitiallyEmpty && isEmpty(docToValidate)) {\n    throw new Error('After filtering out keys not in the schema, your ' +\n      (type === 'update' ? 'modifier' : 'object') +\n      ' is now empty');\n  }\n\n  // Validate doc\n  var isValid;\n  if (options.validate === false) {\n    isValid = true;\n  } else {\n    isValid = validationContext.validate(docToValidate, {\n      modifier: (type === \"update\" || type === \"upsert\"),\n      upsert: isUpsert,\n      extendedCustomContext: {\n        isInsert: (type === \"insert\"),\n        isUpdate: (type === \"update\" && options.upsert !== true),\n        isUpsert,\n        userId,\n        isFromTrustedCode,\n        docId,\n        isLocalCollection,\n        ...(options.extendedCustomContext || {}),\n      },\n    });\n  }\n\n  if (isValid) {\n    // Add the ID back\n    if (cachedId) {\n      doc._id = cachedId;\n    }\n\n    // Update the args to reflect the cleaned doc\n    // XXX not sure this is necessary since we mutate\n    if (type === \"insert\") {\n      args[0] = doc;\n    } else {\n      args[1] = doc;\n    }\n\n    // If callback, set invalidKey when we get a mongo unique error\n    if (Meteor.isServer && hasCallback) {\n      args[last] = wrapCallbackForParsingMongoValidationErrors(validationContext, args[last]);\n    }\n\n    return args;\n  } else {\n    error = getErrorObject(validationContext, `in ${collection._name} ${type}`);\n    if (callback) {\n      // insert/update/upsert pass `false` when there's an error, so we do that\n      callback(error, false);\n    } else {\n      throw error;\n    }\n  }\n}\n\nfunction getErrorObject(context, appendToMessage = '') {\n  let message;\n  const invalidKeys = (typeof context.validationErrors === 'function') ? context.validationErrors() : context.invalidKeys();\n  if (invalidKeys.length) {\n    const firstErrorKey = invalidKeys[0].name;\n    const firstErrorMessage = context.keyErrorMessage(firstErrorKey);\n\n    // If the error is in a nested key, add the full key to the error message\n    // to be more helpful.\n    if (firstErrorKey.indexOf('.') === -1) {\n      message = firstErrorMessage;\n    } else {\n      message = `${firstErrorMessage} (${firstErrorKey})`;\n    }\n  } else {\n    message = \"Failed validation\";\n  }\n  message = `${message} ${appendToMessage}`.trim();\n  const error = new Error(message);\n  error.invalidKeys = invalidKeys;\n  error.validationContext = context;\n  // If on the server, we add a sanitized error, too, in case we're\n  // called from a method.\n  if (Meteor.isServer) {\n    error.sanitizedError = new Meteor.Error(400, message, EJSON.stringify(error.invalidKeys));\n  }\n  return error;\n}\n\nfunction addUniqueError(context, errorMessage) {\n  var name = errorMessage.split('c2_')[1].split(' ')[0];\n  var val = errorMessage.split('dup key:')[1].split('\"')[1];\n\n  var addValidationErrorsPropName = (typeof context.addValidationErrors === 'function') ? 'addValidationErrors' : 'addInvalidKeys';\n  context[addValidationErrorsPropName]([{\n    name: name,\n    type: 'notUnique',\n    value: val\n  }]);\n}\n\nfunction wrapCallbackForParsingMongoValidationErrors(validationContext, cb) {\n  return function wrappedCallbackForParsingMongoValidationErrors(...args) {\n    const error = args[0];\n    if (error &&\n        ((error.name === \"MongoError\" && error.code === 11001) || error.message.indexOf('MongoError: E11000' !== -1)) &&\n        error.message.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.message);\n      args[0] = getErrorObject(validationContext);\n    }\n    return cb.apply(this, args);\n  };\n}\n\nfunction wrapCallbackForParsingServerErrors(validationContext, cb) {\n  var addValidationErrorsPropName = (typeof validationContext.addValidationErrors === 'function') ? 'addValidationErrors' : 'addInvalidKeys';\n  return function wrappedCallbackForParsingServerErrors(...args) {\n    const error = args[0];\n    // Handle our own validation errors\n    if (error instanceof Meteor.Error &&\n        error.error === 400 &&\n        error.reason === \"INVALID\" &&\n        typeof error.details === \"string\") {\n      var invalidKeysFromServer = EJSON.parse(error.details);\n      validationContext[addValidationErrorsPropName](invalidKeysFromServer);\n      args[0] = getErrorObject(validationContext);\n    }\n    // Handle Mongo unique index errors, which are forwarded to the client as 409 errors\n    else if (error instanceof Meteor.Error &&\n             error.error === 409 &&\n             error.reason &&\n             error.reason.indexOf('E11000') !== -1 &&\n             error.reason.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.reason);\n      args[0] = getErrorObject(validationContext);\n    }\n    return cb.apply(this, args);\n  };\n}\n\nvar alreadyInsecured = {};\nfunction keepInsecure(c) {\n  // If insecure package is in use, we need to add allow rules that return\n  // true. Otherwise, it would seemingly turn off insecure mode.\n  if (Package && Package.insecure && !alreadyInsecured[c._name]) {\n    c.allow({\n      insert: function() {\n        return true;\n      },\n      update: function() {\n        return true;\n      },\n      remove: function () {\n        return true;\n      },\n      fetch: [],\n      transform: null\n    });\n    alreadyInsecured[c._name] = true;\n  }\n  // If insecure package is NOT in use, then adding the two deny functions\n  // does not have any effect on the main app's security paradigm. The\n  // user will still be required to add at least one allow function of her\n  // own for each operation for this collection. And the user may still add\n  // additional deny functions, but does not have to.\n}\n\nvar alreadyDefined = {};\nfunction defineDeny(c, options) {\n  if (!alreadyDefined[c._name]) {\n\n    var isLocalCollection = (c._connection === null);\n\n    // First define deny functions to extend doc with the results of clean\n    // and autovalues. This must be done with \"transform: null\" or we would be\n    // extending a clone of doc and therefore have no effect.\n    c.deny({\n      insert: function(userId, doc) {\n        // Referenced doc is cleaned in place\n        c.simpleSchema(doc).clean(doc, {\n          mutate: true,\n          isModifier: false,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: true,\n            isUpdate: false,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n\n        return false;\n      },\n      update: function(userId, doc, fields, modifier) {\n        // Referenced modifier is cleaned in place\n        c.simpleSchema(modifier).clean(modifier, {\n          mutate: true,\n          isModifier: true,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: false,\n            isUpdate: true,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc && doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n\n        return false;\n      },\n      fetch: ['_id'],\n      transform: null\n    });\n\n    // Second define deny functions to validate again on the server\n    // for client-initiated inserts and updates. These should be\n    // called after the clean/autovalue functions since we're adding\n    // them after. These must *not* have \"transform: null\" if options.transform is true because\n    // we need to pass the doc through any transforms to be sure\n    // that custom types are properly recognized for type validation.\n    c.deny({\n      insert: function(userId, doc) {\n        // We pass the false options because we will have done them on client if desired\n        doValidate(\n          c,\n          \"insert\",\n          [\n            doc,\n            {\n              trimStrings: false,\n              removeEmptyStrings: false,\n              filter: false,\n              autoConvert: false\n            },\n            function(error) {\n              if (error) {\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n              }\n            }\n          ],\n          false, // getAutoValues\n          userId,\n          false // isFromTrustedCode\n        );\n\n        return false;\n      },\n      update: function(userId, doc, fields, modifier) {\n        // NOTE: This will never be an upsert because client-side upserts\n        // are not allowed once you define allow/deny functions.\n        // We pass the false options because we will have done them on client if desired\n        doValidate(\n          c,\n          \"update\",\n          [\n            {_id: doc && doc._id},\n            modifier,\n            {\n              trimStrings: false,\n              removeEmptyStrings: false,\n              filter: false,\n              autoConvert: false\n            },\n            function(error) {\n              if (error) {\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n              }\n            }\n          ],\n          false, // getAutoValues\n          userId,\n          false // isFromTrustedCode\n        );\n\n        return false;\n      },\n      fetch: ['_id'],\n      ...(options.transform === true ? {} : {transform: null}),\n    });\n\n    // note that we've already done this collection so that we don't do it again\n    // if attachSchema is called again\n    alreadyDefined[c._name] = true;\n  }\n}\n\nexport default Collection2;\n"]},"sourceType":"script","hash":"71e5538d6a784dfadd3c2deee252405882e17d59"}
