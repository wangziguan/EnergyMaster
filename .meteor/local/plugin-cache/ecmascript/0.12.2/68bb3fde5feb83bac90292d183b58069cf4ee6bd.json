{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/autoform-hooks.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/aldeed:autoform/autoform-hooks.js","filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/autoform-hooks.js","passPerPreset":false,"envName":"development","cwd":"/home/wangziguan/wzg/EnergyMaster","root":"/home/wangziguan/wzg/EnergyMaster","generatorOpts":{"filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/autoform-hooks.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:autoform/autoform-hooks.js"}},"code":"// Manages all hooks, supporting append/replace, get\nHooks = {\n  form: {}\n}; // The names of all supported hooks, excluding \"before\" and \"after\".\n\nvar hookNames = ['formToDoc', 'formToModifier', 'docToForm', 'onSubmit', 'onSuccess', 'onError', 'beginSubmit', 'endSubmit'];\n\nHooks.getDefault = function () {\n  var hooks = {\n    before: {},\n    after: {}\n  };\n\n  _.each(hookNames, function (hookName) {\n    hooks[hookName] = [];\n  });\n\n  return hooks;\n};\n\nHooks.global = Hooks.getDefault();\n\nHooks.addHooksToList = function addHooksToList(hooksList, hooks, replace) {\n  // Add before hooks\n  hooks.before && _.each(hooks.before, function autoFormBeforeHooksEach(func, type) {\n    if (typeof func !== 'function') {\n      throw new Error('AutoForm before hook must be a function, not ' + typeof func);\n    }\n\n    hooksList.before[type] = !replace && hooksList.before[type] ? hooksList.before[type] : [];\n    hooksList.before[type].push(func);\n  }); // Add after hooks\n\n  hooks.after && _.each(hooks.after, function autoFormAfterHooksEach(func, type) {\n    if (typeof func !== 'function') {\n      throw new Error('AutoForm after hook must be a function, not ' + typeof func);\n    }\n\n    hooksList.after[type] = !replace && hooksList.after[type] ? hooksList.after[type] : [];\n    hooksList.after[type].push(func);\n  }); // Add all other hooks\n\n  _.each(hookNames, function autoFormHooksEach(name) {\n    if (hooks[name]) {\n      if (typeof hooks[name] !== 'function') {\n        throw new Error('AutoForm ' + name + ' hook must be a function, not ' + typeof hooks[name]);\n      }\n\n      if (replace) {\n        hooksList[name] = [];\n      }\n\n      hooksList[name].push(hooks[name]);\n    }\n  });\n};\n\nHooks.getHooks = function getHooks(formId, type, subtype) {\n  var f, g;\n\n  if (subtype) {\n    f = Hooks.form[formId] && Hooks.form[formId][type] && Hooks.form[formId][type][subtype] || [];\n    g = Hooks.global[type] && Hooks.global[type][subtype] || [];\n  } else {\n    f = Hooks.form[formId] && Hooks.form[formId][type] || [];\n    g = Hooks.global[type] || [];\n  }\n\n  return f.concat(g);\n};","map":{"version":3,"sources":["packages/aldeed:autoform/autoform-hooks.js"],"names":["Hooks","form","hookNames","getDefault","hooks","before","after","_","each","hookName","global","addHooksToList","hooksList","replace","autoFormBeforeHooksEach","func","type","Error","push","autoFormAfterHooksEach","autoFormHooksEach","name","getHooks","formId","subtype","f","g","concat"],"mappings":"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","sourcesContent":["// Manages all hooks, supporting append/replace, get\n\nHooks = {\n  form: {}\n};\n\n// The names of all supported hooks, excluding \"before\" and \"after\".\nvar hookNames = ['formToDoc', 'formToModifier', 'docToForm', 'onSubmit', 'onSuccess', 'onError',\n    'beginSubmit', 'endSubmit'];\n\nHooks.getDefault = function() {\n  var hooks = {\n    before: {},\n    after: {}\n  };\n  _.each(hookNames, function(hookName) {\n    hooks[hookName] = [];\n  });\n  return hooks;\n};\n\nHooks.global = Hooks.getDefault();\n\nHooks.addHooksToList = function addHooksToList(hooksList, hooks, replace) {\n  // Add before hooks\n  hooks.before && _.each(hooks.before, function autoFormBeforeHooksEach(func, type) {\n    if (typeof func !== 'function') {\n      throw new Error('AutoForm before hook must be a function, not ' + typeof func);\n    }\n    hooksList.before[type] = (!replace && hooksList.before[type]) ? hooksList.before[type] : [];\n    hooksList.before[type].push(func);\n  });\n\n  // Add after hooks\n  hooks.after && _.each(hooks.after, function autoFormAfterHooksEach(func, type) {\n    if (typeof func !== 'function') {\n      throw new Error('AutoForm after hook must be a function, not ' + typeof func);\n    }\n    hooksList.after[type] = (!replace && hooksList.after[type]) ? hooksList.after[type] : [];\n    hooksList.after[type].push(func);\n  });\n\n  // Add all other hooks\n  _.each(hookNames, function autoFormHooksEach(name) {\n    if (hooks[name]) {\n      if (typeof hooks[name] !== 'function') {\n        throw new Error('AutoForm ' + name + ' hook must be a function, not ' + typeof hooks[name]);\n      }\n\n      if (replace) {\n        hooksList[name] = [];\n      }\n\n      hooksList[name].push(hooks[name]);\n    }\n  });\n};\n\nHooks.getHooks = function getHooks(formId, type, subtype) {\n  var f, g;\n  if (subtype) {\n    f = Hooks.form[formId] && Hooks.form[formId][type] && Hooks.form[formId][type][subtype] || [];\n    g = Hooks.global[type] && Hooks.global[type][subtype] || [];\n  } else {\n    f = Hooks.form[formId] && Hooks.form[formId][type] || [];\n    g = Hooks.global[type] || [];\n  }\n  return f.concat(g);\n};\n"]},"sourceType":"script","hash":"68bb3fde5feb83bac90292d183b58069cf4ee6bd"}
