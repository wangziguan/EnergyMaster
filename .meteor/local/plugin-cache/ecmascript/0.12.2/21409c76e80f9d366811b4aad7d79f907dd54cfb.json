{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:tabular/client/getPubSelector.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/aldeed:tabular/client/getPubSelector.js","filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:tabular/client/getPubSelector.js","passPerPreset":false,"envName":"development","cwd":"/home/wangziguan/wzg/EnergyMaster","root":"/home/wangziguan/wzg/EnergyMaster","generatorOpts":{"filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:tabular/client/getPubSelector.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:tabular/client/getPubSelector.js"}},"code":"let _;\n\nmodule.link(\"meteor/underscore\", {\n  _(v) {\n    _ = v;\n  }\n\n}, 0);\n\nfunction getPubSelector(selector, searchString, searchFields, searchCaseInsensitive, splitSearchByWhitespace, columns, tableColumns) {\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // if search was invoked via .columns().search(), build a query off that\n  // https://datatables.net/reference/api/columns().search()\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  let searchColumns = _.filter(columns, column => {\n    return column.search && column.search.value !== '';\n  }); // required args\n\n\n  if (!searchString && searchColumns.length === 0 || !searchFields || searchFields.length === 0) {\n    return selector;\n  }\n\n  if (searchColumns.length === 0) {\n    // normalize search fields array to mirror the structure\n    // as passed by the datatables ajax.data function\n    searchColumns = _.map(searchFields, field => {\n      return {\n        data: field,\n        search: {\n          value: searchString\n        }\n      };\n    });\n  }\n\n  return createMongoSearchQuery(selector, searchString, searchColumns, searchCaseInsensitive, splitSearchByWhitespace, columns, tableColumns);\n}\n\nfunction createMongoSearchQuery(selector, searchString, searchColumns, searchCaseInsensitive, splitSearchByWhitespace, columns, tableColumns) {\n  // See if we can resolve the search string to a number,\n  // in which case we use an extra query because $regex\n  // matches string fields only.\n  const searches = [];\n\n  _.each(searchColumns, field => {\n    // Get the column options from the Tabular.Table so we can check search options\n    const column = _.findWhere(tableColumns, {\n      data: field.data\n    });\n\n    const exactSearch = column && column.search && column.search.exact;\n    const numberSearch = column && column.search && column.search.isNumber;\n    let searchValue = field.search.value || ''; // Split and OR by whitespace, as per default DataTables search behavior\n\n    if (splitSearchByWhitespace && !exactSearch) {\n      searchValue = searchValue.match(/\\S+/g);\n    } else {\n      searchValue = [searchValue];\n    }\n\n    _.each(searchValue, searchTerm => {\n      const m1 = {}; // String search\n\n      if (exactSearch) {\n        if (numberSearch) {\n          const searchTermAsNumber = Number(searchTerm);\n\n          if (!isNaN(searchTermAsNumber)) {\n            searches.push({\n              [field.data]: searchTermAsNumber\n            });\n          } else {\n            searches.push({\n              [field.data]: searchTerm\n            });\n          }\n        } else {\n          searches.push({\n            [field.data]: searchTerm\n          });\n        }\n      } else {\n        const searchObj = {\n          $regex: searchTerm\n        }; // DataTables searches are case insensitive by default\n\n        if (searchCaseInsensitive !== false) searchObj.$options = 'i';\n        searches.push({\n          [field.data]: searchObj\n        }); // For backwards compatibility, we do non-exact searches as a number, too,\n        // even if isNumber isn't true\n\n        const searchTermAsNumber = Number(searchTerm);\n\n        if (!isNaN(searchTermAsNumber)) {\n          searches.push({\n            [field.data]: searchTermAsNumber\n          });\n        }\n      }\n    });\n  });\n\n  let result;\n\n  if (typeof selector === 'object' && selector !== null) {\n    result = {\n      $and: [selector, {\n        $or: searches\n      }]\n    };\n  } else if (searches.length > 1) {\n    result = {\n      $or: searches\n    };\n  } else {\n    result = searches[0] || {};\n  }\n\n  return result;\n}\n\nmodule.exportDefault(getPubSelector);","map":{"version":3,"sources":["packages/aldeed:tabular/client/getPubSelector.js"],"names":["_","module","link","v","getPubSelector","selector","searchString","searchFields","searchCaseInsensitive","splitSearchByWhitespace","columns","tableColumns","searchColumns","filter","column","search","value","length","map","field","data","createMongoSearchQuery","searches","each","findWhere","exactSearch","exact","numberSearch","isNumber","searchValue","match","searchTerm","m1","searchTermAsNumber","Number","isNaN","push","searchObj","$regex","$options","result","$and","$or","exportDefault"],"mappings":"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","sourcesContent":["import { _ } from 'meteor/underscore';\n\nfunction getPubSelector(\n    selector,\n    searchString,\n    searchFields,\n    searchCaseInsensitive,\n    splitSearchByWhitespace,\n    columns,\n    tableColumns,\n  ) {\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // if search was invoked via .columns().search(), build a query off that\n  // https://datatables.net/reference/api/columns().search()\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  let searchColumns = _.filter(columns, column => {\n    return column.search && column.search.value !== '';\n  });\n\n  // required args\n  if ((!searchString && searchColumns.length === 0) || !searchFields || searchFields.length === 0) {\n    return selector;\n  }\n\n  if (searchColumns.length === 0) {\n    // normalize search fields array to mirror the structure\n    // as passed by the datatables ajax.data function\n    searchColumns = _.map(searchFields, field => {\n      return {\n        data: field,\n        search: {\n          value: searchString\n        }\n      };\n    });\n  }\n\n  return createMongoSearchQuery(\n    selector,\n    searchString,\n    searchColumns,\n    searchCaseInsensitive,\n    splitSearchByWhitespace,\n    columns,\n    tableColumns,\n  );\n}\n\nfunction createMongoSearchQuery(\n  selector,\n  searchString,\n  searchColumns,\n  searchCaseInsensitive,\n  splitSearchByWhitespace,\n  columns,\n  tableColumns,\n) {\n  // See if we can resolve the search string to a number,\n  // in which case we use an extra query because $regex\n  // matches string fields only.\n  const searches = [];\n\n  _.each(searchColumns, field => {\n    // Get the column options from the Tabular.Table so we can check search options\n    const column = _.findWhere(tableColumns, { data: field.data });\n    const exactSearch = column && column.search && column.search.exact;\n    const numberSearch = column && column.search && column.search.isNumber;\n\n    let searchValue = field.search.value || '';\n\n    // Split and OR by whitespace, as per default DataTables search behavior\n    if (splitSearchByWhitespace && !exactSearch) {\n      searchValue = searchValue.match(/\\S+/g);\n    } else {\n      searchValue = [searchValue];\n    }\n\n    _.each(searchValue, searchTerm => {\n      const m1 = {};\n\n      // String search\n      if (exactSearch) {\n        if (numberSearch) {\n          const searchTermAsNumber = Number(searchTerm);\n          if (!isNaN(searchTermAsNumber)) {\n            searches.push({ [field.data]: searchTermAsNumber });\n          } else {\n            searches.push({ [field.data]: searchTerm });\n          }\n        } else {\n          searches.push({ [field.data]: searchTerm });\n        }\n      } else {\n        const searchObj = { $regex: searchTerm };\n\n        // DataTables searches are case insensitive by default\n        if (searchCaseInsensitive !== false) searchObj.$options = 'i';\n\n        searches.push({ [field.data]: searchObj });\n\n        // For backwards compatibility, we do non-exact searches as a number, too,\n        // even if isNumber isn't true\n        const searchTermAsNumber = Number(searchTerm);\n        if (!isNaN(searchTermAsNumber)) {\n          searches.push({ [field.data]: searchTermAsNumber });\n        }\n      }\n    });\n  });\n\n  let result;\n  if (typeof selector === 'object' && selector !== null) {\n    result = {$and: [selector, {$or: searches}]};\n  } else if (searches.length > 1) {\n    result = {$or: searches};\n  } else {\n    result = searches[0] || {};\n  }\n\n  return result;\n}\n\nexport default getPubSelector;\n"]},"sourceType":"script","hash":"21409c76e80f9d366811b4aad7d79f907dd54cfb"}
