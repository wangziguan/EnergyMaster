{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:tabular/client/tableInit.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/aldeed:tabular/client/tableInit.js","filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:tabular/client/tableInit.js","passPerPreset":false,"envName":"development","cwd":"/home/wangziguan/wzg/EnergyMaster","root":"/home/wangziguan/wzg/EnergyMaster","generatorOpts":{"filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:tabular/client/tableInit.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:tabular/client/tableInit.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nlet Blaze;\nmodule.link(\"meteor/blaze\", {\n  Blaze(v) {\n    Blaze = v;\n  }\n\n}, 0);\n\nlet _;\n\nmodule.link(\"meteor/underscore\", {\n  _(v) {\n    _ = v;\n  }\n\n}, 1);\nlet cleanFieldName, cleanFieldNameForSearch;\nmodule.link(\"./util\", {\n  cleanFieldName(v) {\n    cleanFieldName = v;\n  },\n\n  cleanFieldNameForSearch(v) {\n    cleanFieldNameForSearch = v;\n  }\n\n}, 2);\n\n/**\n * Uses the Tabular.Table instance to get the columns, fields, and searchFields\n * @param {Tabular.Table} tabularTable The Tabular.Table instance\n * @param {Template}      template     The Template instance\n */\nfunction tableInit(tabularTable, template) {\n  const fields = {};\n  const searchFields = []; // Loop through the provided columns object\n\n  let columns = tabularTable.options.columns || [];\n  columns = columns.map(column => {\n    let options = (0, _objectSpread2.default)({}, column);\n\n    _.extend(options, templateColumnOptions(column)); // `templateColumnOptions` might have set defaultContent option. If not, we need it set\n    // to something to protect against errors from null and undefined values.\n\n\n    if (!options.defaultContent) {\n      options.defaultContent = column.defaultContent || '';\n    }\n\n    _.extend(options, searchAndOrderOptions(column)); // Build the list of field names we want included in the publication and in the searching\n\n\n    const data = column.data;\n\n    if (typeof data === 'string') {\n      fields[cleanFieldName(data)] = 1; // DataTables says default value for col.searchable is `true`,\n      // so we will search on all columns that haven't been set to\n      // `false`.\n\n      if (options.searchable !== false) searchFields.push(cleanFieldNameForSearch(data));\n    } // If `titleFn` option is provided, we set `title` option to the string\n    // result of that function. This is done for any extensions that might\n    // use the title, such as the colvis button. However `Blaze.toHTML` is\n    // not reactive, so in the `headerCallback` in main.js, we will set the\n    // actual column header with Blaze.render so that it is reactive.\n\n\n    const titleFunction = options.titleFn;\n\n    if (typeof titleFunction === 'function') {\n      options.title = Blaze.toHTML(new Blaze.View(titleFunction));\n    }\n\n    return options;\n  });\n  template.tabular.columns = columns;\n  template.tabular.fields = fields;\n  template.tabular.searchFields = searchFields;\n  return columns;\n}\n\n; // The `tmpl` column option is special for this package. We parse it into other column options\n// and then remove it.\n\nfunction templateColumnOptions(_ref) {\n  let {\n    data,\n    render,\n    tmpl,\n    tmplContext\n  } = _ref;\n  if (!tmpl) return {};\n  const options = {}; // Cell should be initially blank\n\n  options.defaultContent = ''; // When the cell is created, render its content from\n  // the provided template with row data.\n\n  options.createdCell = (cell, cellData, rowData) => {\n    // Allow the table to adjust the template context if desired\n    if (typeof tmplContext === 'function') {\n      rowData = tmplContext(rowData);\n    }\n\n    Blaze.renderWithData(tmpl, rowData, cell);\n  }; // If we're displaying a template for this field and we've also provided data, we want to\n  // pass the data prop along to DataTables to enable sorting and filtering.\n  // However, DataTables will then add that data to the displayed cell, which we don't want since\n  // we're rendering a template there with Blaze. We can prevent this issue by having the \"render\"\n  // function return an empty string for display content.\n\n\n  if (data && !render) {\n    options.render = (data, type) => type === 'display' ? '' : data;\n  }\n\n  return options;\n} // If it's referencing an instance function, don't\n// include it. Prevent sorting and searching because\n// our pub function won't be able to do it.\n\n\nfunction searchAndOrderOptions(column) {\n  const data = column.data;\n\n  if (typeof data === 'string' && data.indexOf('()') !== -1) {\n    return {\n      orderable: false,\n      searchable: false\n    };\n  } // If there's a Blaze template but not data, then we shouldn't try to allow sorting. It won't work\n\n\n  if (column.tmpl && !data) {\n    return {\n      orderable: false,\n      searchable: column.searchable\n    };\n  }\n\n  return {\n    orderable: column.orderable,\n    searchable: column.searchable\n  };\n}\n\nmodule.exportDefault(tableInit);","map":{"version":3,"sources":["packages/aldeed:tabular/client/tableInit.js"],"names":["Blaze","module","link","v","_","cleanFieldName","cleanFieldNameForSearch","tableInit","tabularTable","template","fields","searchFields","columns","options","map","column","extend","templateColumnOptions","defaultContent","searchAndOrderOptions","data","searchable","push","titleFunction","titleFn","title","toHTML","View","tabular","render","tmpl","tmplContext","createdCell","cell","cellData","rowData","renderWithData","type","indexOf","orderable","exportDefault"],"mappings":"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","sourcesContent":["import { Blaze } from 'meteor/blaze';\nimport { _ } from 'meteor/underscore';\nimport { cleanFieldName, cleanFieldNameForSearch } from './util';\n\n/**\n * Uses the Tabular.Table instance to get the columns, fields, and searchFields\n * @param {Tabular.Table} tabularTable The Tabular.Table instance\n * @param {Template}      template     The Template instance\n */\nfunction tableInit(tabularTable, template) {\n  const fields = {};\n  const searchFields = [];\n\n  // Loop through the provided columns object\n  let columns = tabularTable.options.columns || [];\n  columns = columns.map(column => {\n    let options = { ...column };\n\n    _.extend(options, templateColumnOptions(column));\n\n    // `templateColumnOptions` might have set defaultContent option. If not, we need it set\n    // to something to protect against errors from null and undefined values.\n    if (!options.defaultContent) {\n      options.defaultContent = column.defaultContent || '';\n    }\n\n    _.extend(options, searchAndOrderOptions(column));\n\n    // Build the list of field names we want included in the publication and in the searching\n    const data = column.data;\n    if (typeof data === 'string') {\n      fields[cleanFieldName(data)] = 1;\n\n      // DataTables says default value for col.searchable is `true`,\n      // so we will search on all columns that haven't been set to\n      // `false`.\n      if (options.searchable !== false) searchFields.push(cleanFieldNameForSearch(data));\n    }\n\n    // If `titleFn` option is provided, we set `title` option to the string\n    // result of that function. This is done for any extensions that might\n    // use the title, such as the colvis button. However `Blaze.toHTML` is\n    // not reactive, so in the `headerCallback` in main.js, we will set the\n    // actual column header with Blaze.render so that it is reactive.\n    const titleFunction = options.titleFn;\n    if (typeof titleFunction === 'function') {\n      options.title = Blaze.toHTML(new Blaze.View(titleFunction));\n    }\n\n    return options;\n  });\n\n  template.tabular.columns = columns;\n  template.tabular.fields = fields;\n  template.tabular.searchFields = searchFields;\n\n  return columns;\n};\n\n// The `tmpl` column option is special for this package. We parse it into other column options\n// and then remove it.\nfunction templateColumnOptions({ data, render, tmpl, tmplContext }) {\n  if (!tmpl) return {};\n\n  const options = {};\n\n  // Cell should be initially blank\n  options.defaultContent = '';\n\n  // When the cell is created, render its content from\n  // the provided template with row data.\n  options.createdCell = (cell, cellData, rowData) => {\n    // Allow the table to adjust the template context if desired\n    if (typeof tmplContext === 'function') {\n      rowData = tmplContext(rowData);\n    }\n\n    Blaze.renderWithData(tmpl, rowData, cell);\n  };\n\n  // If we're displaying a template for this field and we've also provided data, we want to\n  // pass the data prop along to DataTables to enable sorting and filtering.\n  // However, DataTables will then add that data to the displayed cell, which we don't want since\n  // we're rendering a template there with Blaze. We can prevent this issue by having the \"render\"\n  // function return an empty string for display content.\n  if (data && !render) {\n    options.render = (data, type) => (type === 'display') ? '' : data;\n  }\n\n  return options;\n}\n\n// If it's referencing an instance function, don't\n// include it. Prevent sorting and searching because\n// our pub function won't be able to do it.\nfunction searchAndOrderOptions(column) {\n  const data = column.data;\n  if (typeof data === 'string' && data.indexOf('()') !== -1) {\n    return { orderable: false, searchable: false };\n  }\n  // If there's a Blaze template but not data, then we shouldn't try to allow sorting. It won't work\n  if (column.tmpl && !data) {\n    return { orderable: false, searchable: column.searchable };\n  }\n  return { orderable: column.orderable, searchable: column.searchable };\n}\n\nexport default tableInit;\n"]},"sourceType":"script","hash":"3fdc2415a9c3517bef24d354a651d5cc7406fe76"}
