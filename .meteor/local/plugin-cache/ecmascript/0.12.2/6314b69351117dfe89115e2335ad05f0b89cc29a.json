{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/components/afFieldInput/afFieldInput.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/aldeed:autoform/components/afFieldInput/afFieldInput.js","filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/components/afFieldInput/afFieldInput.js","passPerPreset":false,"envName":"development","cwd":"/home/wangziguan/wzg/EnergyMaster","root":"/home/wangziguan/wzg/EnergyMaster","generatorOpts":{"filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/components/afFieldInput/afFieldInput.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:autoform/components/afFieldInput/afFieldInput.js"}},"code":"/* global AutoForm, getInputValue, getInputData, updateTrackedFieldValue */\nTemplate.afFieldInput.helpers({\n  // similar to AutoForm.getTemplateName, but we have fewer layers of fallback, and we fall back\n  // lastly to a template without an _ piece at the end\n  getTemplateName: function getTemplateName() {\n    var self = this; // Determine what `type` attribute should be if not set\n\n    var inputType = AutoForm.getInputType(this);\n    var componentDef = AutoForm._inputTypeDefinitions[inputType];\n\n    if (!componentDef) {\n      throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');\n    }\n\n    var inputTemplateName = componentDef.template;\n    var styleTemplateName = this.template; // We skip the check for existence here so that we can get the `_plain` string\n    // even though they don't exist.\n\n    var templateName = AutoForm.getTemplateName(inputTemplateName, styleTemplateName, self.name, true); // Special case: the built-in \"plain\" template uses the basic input templates for\n    // everything, so if we found _plain, we use inputTemplateName instead\n\n    if (templateName.indexOf('_plain') !== -1) {\n      templateName = null;\n    } // If no override templateName found, use the exact name from the input type definition\n\n\n    if (!templateName || !Template[templateName]) {\n      templateName = inputTemplateName;\n    }\n\n    return templateName;\n  },\n  innerContext: function afFieldInputContext() {\n    var c = AutoForm.Utility.getComponentContext(this, \"afFieldInput\");\n    var form = AutoForm.getCurrentDataForForm();\n    var formId = form.id;\n    var ss = AutoForm.getFormSchema();\n    var defs = c.defs; // Get schema default value.\n    // We must do this before adjusting defs for arrays.\n\n    var schemaDefaultValue = defs.defaultValue; // Adjust for array fields if necessary\n\n    if (defs.type === Array) {\n      defs = AutoForm.Utility.getFieldDefinition(ss, c.atts.name + \".$\");\n    } // Determine what `type` attribute should be if not set\n\n\n    var inputType = AutoForm.getInputType(this);\n    var componentDef = AutoForm._inputTypeDefinitions[inputType];\n\n    if (!componentDef) {\n      throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');\n    } // Get reactive mDoc\n\n\n    var mDoc = AutoForm.reactiveFormData.sourceDoc(formId); // Get input value\n\n    var value = getInputValue(c.atts, c.atts.value, mDoc, schemaDefaultValue, c.atts.defaultValue, componentDef); // Mark field value as changed for reactive updates\n    // We need to defer this until the element will be\n    // added to the DOM. Otherwise, AutoForm.getFieldValue\n    // will not pick up the new value when there are #if etc.\n    // blocks involved.\n    // See https://github.com/aldeed/meteor-autoform/issues/461\n\n    var template = AutoForm.templateInstanceForForm();\n\n    if (template.view.isRendered) {\n      // No need to do this on first run because we'll rerun the value functions\n      // once the form is rendered anyway\n      updateTrackedFieldValue(template, c.atts.name);\n    } // Build input data context\n\n\n    var iData = getInputData(defs, c.atts, value, ss.label(c.atts.name), form.type); // Adjust and return context\n\n    return typeof componentDef.contextAdjust === \"function\" ? componentDef.contextAdjust(iData) : iData;\n  }\n});","map":{"version":3,"sources":["packages/aldeed:autoform/components/afFieldInput/afFieldInput.js"],"names":["Template","afFieldInput","helpers","getTemplateName","self","inputType","AutoForm","getInputType","componentDef","_inputTypeDefinitions","Error","inputTemplateName","template","styleTemplateName","templateName","name","indexOf","innerContext","afFieldInputContext","c","Utility","getComponentContext","form","getCurrentDataForForm","formId","id","ss","getFormSchema","defs","schemaDefaultValue","defaultValue","type","Array","getFieldDefinition","atts","mDoc","reactiveFormData","sourceDoc","value","getInputValue","templateInstanceForForm","view","isRendered","updateTrackedFieldValue","iData","getInputData","label","contextAdjust"],"mappings":"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","sourcesContent":["/* global AutoForm, getInputValue, getInputData, updateTrackedFieldValue */\n\nTemplate.afFieldInput.helpers({\n  // similar to AutoForm.getTemplateName, but we have fewer layers of fallback, and we fall back\n  // lastly to a template without an _ piece at the end\n  getTemplateName: function getTemplateName() {\n    var self = this;\n\n    // Determine what `type` attribute should be if not set\n    var inputType = AutoForm.getInputType(this);\n    var componentDef = AutoForm._inputTypeDefinitions[inputType];\n    if (!componentDef) {\n      throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');\n    }\n\n    var inputTemplateName = componentDef.template;\n    var styleTemplateName = this.template;\n\n    // We skip the check for existence here so that we can get the `_plain` string\n    // even though they don't exist.\n    var templateName = AutoForm.getTemplateName(inputTemplateName, styleTemplateName, self.name, true);\n\n    // Special case: the built-in \"plain\" template uses the basic input templates for\n    // everything, so if we found _plain, we use inputTemplateName instead\n    if (templateName.indexOf('_plain') !== -1) {\n      templateName = null;\n    }\n\n    // If no override templateName found, use the exact name from the input type definition\n    if (!templateName || !Template[templateName]) {\n      templateName = inputTemplateName;\n    }\n\n    return templateName;\n  },\n  innerContext: function afFieldInputContext() {\n    var c = AutoForm.Utility.getComponentContext(this, \"afFieldInput\");\n    var form = AutoForm.getCurrentDataForForm();\n    var formId = form.id;\n    var ss = AutoForm.getFormSchema();\n    var defs = c.defs;\n\n    // Get schema default value.\n    // We must do this before adjusting defs for arrays.\n    var schemaDefaultValue = defs.defaultValue;\n\n    // Adjust for array fields if necessary\n    if (defs.type === Array) {\n      defs = AutoForm.Utility.getFieldDefinition(ss, c.atts.name + \".$\");\n    }\n\n    // Determine what `type` attribute should be if not set\n    var inputType = AutoForm.getInputType(this);\n    var componentDef = AutoForm._inputTypeDefinitions[inputType];\n    if (!componentDef) {\n      throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');\n    }\n\n    // Get reactive mDoc\n    var mDoc = AutoForm.reactiveFormData.sourceDoc(formId);\n\n    // Get input value\n    var value = getInputValue(c.atts, c.atts.value, mDoc, schemaDefaultValue, c.atts.defaultValue, componentDef);\n\n    // Mark field value as changed for reactive updates\n    // We need to defer this until the element will be\n    // added to the DOM. Otherwise, AutoForm.getFieldValue\n    // will not pick up the new value when there are #if etc.\n    // blocks involved.\n    // See https://github.com/aldeed/meteor-autoform/issues/461\n    var template = AutoForm.templateInstanceForForm();\n    if (template.view.isRendered) {\n      // No need to do this on first run because we'll rerun the value functions\n      // once the form is rendered anyway\n      updateTrackedFieldValue(template, c.atts.name);\n    }\n\n    // Build input data context\n    var iData = getInputData(defs, c.atts, value, ss.label(c.atts.name), form.type);\n\n    // Adjust and return context\n    return (typeof componentDef.contextAdjust === \"function\") ? componentDef.contextAdjust(iData) : iData;\n  }\n});\n"]},"sourceType":"script","hash":"6314b69351117dfe89115e2335ad05f0b89cc29a"}
