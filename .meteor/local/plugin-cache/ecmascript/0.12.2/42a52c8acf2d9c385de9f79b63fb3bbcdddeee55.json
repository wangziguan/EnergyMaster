{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/components/quickForm/quickForm.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/aldeed:autoform/components/quickForm/quickForm.js","filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/components/quickForm/quickForm.js","passPerPreset":false,"envName":"development","cwd":"/home/wangziguan/wzg/EnergyMaster","root":"/home/wangziguan/wzg/EnergyMaster","generatorOpts":{"filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/components/quickForm/quickForm.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:autoform/components/quickForm/quickForm.js"}},"code":"/* global AutoForm */\nTemplate.quickForm.helpers({\n  getTemplateName: function () {\n    return AutoForm.getTemplateName('quickForm', this.template);\n  },\n  innerContext: function quickFormContext() {\n    var atts = this;\n    var adjustedData = AutoForm.parseData(_.clone(this));\n    var simpleSchema = adjustedData._resolvedSchema;\n    var sortedSchema = {};\n    var fieldGroups = [];\n    var grouplessFieldContext; // --------------- A. Schema --------------- //\n\n    var fieldList = atts.fields;\n\n    if (fieldList) {\n      fieldList = AutoForm.Utility.stringToArray(fieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');\n    } else {\n      const fullSchema = simpleSchema.mergedSchema();\n      fieldList = _.keys(fullSchema);\n    } // get the schema object, but sorted into the same order as the field list\n\n\n    fieldList.forEach(fieldName => {\n      sortedSchema[fieldName] = AutoForm.Utility.getFieldDefinition(simpleSchema, fieldName);\n    }); // --------------- B. Field With No Groups --------------- //\n\n    var grouplessFields = getFieldsWithNoGroup(sortedSchema);\n\n    if (grouplessFields.length > 0) {\n      grouplessFieldContext = {\n        atts: _.extend({}, atts, {\n          fields: grouplessFields\n        }),\n        fields: grouplessFields\n      };\n    } // --------------- C. Field With Groups --------------- //\n    // get sorted list of field groups\n\n\n    var fieldGroupNames = getSortedFieldGroupNames(sortedSchema); // Loop through the list and make a field group context for each\n\n    _.each(fieldGroupNames, function (fieldGroupName) {\n      var fieldsForGroup = getFieldsForGroup(fieldGroupName, sortedSchema);\n\n      if (fieldsForGroup.length > 0) {\n        fieldGroups.push({\n          name: fieldGroupName,\n          atts: _.extend({}, atts, {\n            fields: fieldsForGroup\n          }),\n          fields: fieldsForGroup\n        });\n      }\n    }); // --------------- D. Context --------------- //\n    // Pass along quickForm context to autoForm context, minus a few\n    // properties that are specific to quickForms.\n\n\n    var qfAutoFormContext = _.omit(atts, 'buttonContent', 'buttonClasses', 'fields', 'omitFields', 'id-prefix'); // Determine whether we want to render a submit button\n\n\n    var qfShouldRenderButton = atts.buttonContent !== false && atts.type !== 'readonly' && atts.type !== 'disabled';\n    var context = {\n      qfAutoFormContext: qfAutoFormContext,\n      atts: atts,\n      qfShouldRenderButton: qfShouldRenderButton,\n      fieldGroups: fieldGroups,\n      grouplessFields: grouplessFieldContext\n    };\n    return context;\n  }\n});\n/* Private Functions */\n\n/**\n * Takes a schema object and returns a sorted array of field group names for it\n *\n * @param   {Object}   schemaObj Like from mySimpleSchema.schema()\n * @returns {String[]} Array of field group names\n */\n\nfunction getSortedFieldGroupNames(schemaObj) {\n  var names = _.map(schemaObj, function (field) {\n    return field.autoform && field.autoform.group;\n  }); // Remove undefined\n\n\n  names = _.compact(names); // Remove duplicate names\n\n  names = _.unique(names);\n  return names.sort();\n}\n/**\n * Returns the schema field names that belong in the group.\n *\n * @param   {String}   groupName The group name\n * @param   {Object}   schemaObj Like from mySimpleSchema.schema()\n * @returns {String[]} Array of field names (schema keys)\n */\n\n\nfunction getFieldsForGroup(groupName, schemaObj) {\n  var fields = _.map(schemaObj, function (field, fieldName) {\n    return fieldName.slice(-2) !== '.$' && field.autoform && field.autoform.group === groupName && fieldName;\n  }); // Remove undefined\n\n\n  fields = _.compact(fields);\n  return fields;\n}\n/**\n * Returns the schema field names that don't belong to a group\n *\n * @param   {Object}   schemaObj Like from mySimpleSchema.schema()\n * @returns {String[]} Array of field names (schema keys)\n */\n\n\nfunction getFieldsWithNoGroup(schemaObj) {\n  var fields = _.map(schemaObj, function (field, fieldName) {\n    return fieldName.slice(-2) !== '.$' && (!field.autoform || !field.autoform.group) && fieldName;\n  }); // Remove undefined\n\n\n  fields = _.compact(fields);\n  return fields;\n}","map":{"version":3,"sources":["packages/aldeed:autoform/components/quickForm/quickForm.js"],"names":["Template","quickForm","helpers","getTemplateName","AutoForm","template","innerContext","quickFormContext","atts","adjustedData","parseData","_","clone","simpleSchema","_resolvedSchema","sortedSchema","fieldGroups","grouplessFieldContext","fieldList","fields","Utility","stringToArray","fullSchema","mergedSchema","keys","forEach","fieldName","getFieldDefinition","grouplessFields","getFieldsWithNoGroup","length","extend","fieldGroupNames","getSortedFieldGroupNames","each","fieldGroupName","fieldsForGroup","getFieldsForGroup","push","name","qfAutoFormContext","omit","qfShouldRenderButton","buttonContent","type","context","schemaObj","names","map","field","autoform","group","compact","unique","sort","groupName","slice"],"mappings":"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","sourcesContent":["/* global AutoForm */\n\nTemplate.quickForm.helpers({\n  getTemplateName: function () {\n    return AutoForm.getTemplateName('quickForm', this.template);\n  },\n  innerContext: function quickFormContext() {\n    var atts = this;\n    var adjustedData = AutoForm.parseData(_.clone(this));\n    var simpleSchema = adjustedData._resolvedSchema;\n    var sortedSchema = {};\n    var fieldGroups = [];\n    var grouplessFieldContext;\n\n    // --------------- A. Schema --------------- //\n\n    var fieldList = atts.fields;\n    if (fieldList) {\n      fieldList = AutoForm.Utility.stringToArray(fieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');\n    } else {\n      const fullSchema = simpleSchema.mergedSchema();\n      fieldList = _.keys(fullSchema);\n    }\n\n    // get the schema object, but sorted into the same order as the field list\n    fieldList.forEach(fieldName => {\n      sortedSchema[fieldName] = AutoForm.Utility.getFieldDefinition(simpleSchema, fieldName);\n    });\n\n    // --------------- B. Field With No Groups --------------- //\n\n    var grouplessFields = getFieldsWithNoGroup(sortedSchema);\n    if (grouplessFields.length > 0) {\n      grouplessFieldContext = {\n        atts: _.extend({}, atts, {fields: grouplessFields}),\n        fields: grouplessFields\n      };\n    }\n\n    // --------------- C. Field With Groups --------------- //\n\n    // get sorted list of field groups\n    var fieldGroupNames = getSortedFieldGroupNames(sortedSchema);\n\n    // Loop through the list and make a field group context for each\n    _.each(fieldGroupNames, function (fieldGroupName) {\n      var fieldsForGroup = getFieldsForGroup(fieldGroupName, sortedSchema);\n\n      if (fieldsForGroup.length > 0) {\n        fieldGroups.push({\n          name: fieldGroupName,\n          atts: _.extend({}, atts, {fields: fieldsForGroup}),\n          fields: fieldsForGroup\n        });\n      }\n    });\n\n    // --------------- D. Context --------------- //\n\n    // Pass along quickForm context to autoForm context, minus a few\n    // properties that are specific to quickForms.\n    var qfAutoFormContext = _.omit(atts,\n                                   'buttonContent',\n                                   'buttonClasses',\n                                   'fields',\n                                   'omitFields',\n                                   'id-prefix');\n\n    // Determine whether we want to render a submit button\n    var qfShouldRenderButton = (atts.buttonContent !== false && atts.type !== 'readonly' && atts.type !== 'disabled');\n\n    var context = {\n      qfAutoFormContext: qfAutoFormContext,\n      atts: atts,\n      qfShouldRenderButton: qfShouldRenderButton,\n      fieldGroups: fieldGroups,\n      grouplessFields: grouplessFieldContext\n    };\n    return context;\n  }\n});\n\n/* Private Functions */\n\n/**\n * Takes a schema object and returns a sorted array of field group names for it\n *\n * @param   {Object}   schemaObj Like from mySimpleSchema.schema()\n * @returns {String[]} Array of field group names\n */\nfunction getSortedFieldGroupNames(schemaObj) {\n  var names = _.map(schemaObj, function (field) {\n    return field.autoform && field.autoform.group;\n  });\n\n  // Remove undefined\n  names = _.compact(names);\n\n  // Remove duplicate names\n  names = _.unique(names);\n\n  return names.sort();\n}\n\n/**\n * Returns the schema field names that belong in the group.\n *\n * @param   {String}   groupName The group name\n * @param   {Object}   schemaObj Like from mySimpleSchema.schema()\n * @returns {String[]} Array of field names (schema keys)\n */\nfunction getFieldsForGroup(groupName, schemaObj) {\n  var fields = _.map(schemaObj, function (field, fieldName) {\n    return (fieldName.slice(-2) !== '.$') &&\n      field.autoform &&\n      field.autoform.group === groupName &&\n      fieldName;\n  });\n\n  // Remove undefined\n  fields = _.compact(fields);\n\n  return fields;\n}\n\n/**\n * Returns the schema field names that don't belong to a group\n *\n * @param   {Object}   schemaObj Like from mySimpleSchema.schema()\n * @returns {String[]} Array of field names (schema keys)\n */\nfunction getFieldsWithNoGroup(schemaObj) {\n  var fields = _.map(schemaObj, function (field, fieldName) {\n    return (fieldName.slice(-2) !== '.$') &&\n      (!field.autoform || !field.autoform.group) &&\n      fieldName;\n  });\n\n  // Remove undefined\n  fields = _.compact(fields);\n\n  return fields;\n}\n"]},"sourceType":"script","hash":"42a52c8acf2d9c385de9f79b63fb3bbcdddeee55"}
