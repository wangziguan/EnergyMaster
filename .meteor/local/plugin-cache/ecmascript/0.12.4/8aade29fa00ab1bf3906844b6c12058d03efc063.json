{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/formTypes/update.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/aldeed:autoform/formTypes/update.js","filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/formTypes/update.js","passPerPreset":false,"envName":"development","cwd":"/home/wangziguan/wzg/EnergyMaster","root":"/home/wangziguan/wzg/EnergyMaster","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/formTypes/update.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:autoform/formTypes/update.js"}},"code":"/* global AutoForm */\nAutoForm.addFormType('update', {\n  onSubmit: function () {\n    var c = this; // Prevent browser form submission\n\n    this.event.preventDefault(); // Make sure we have a collection\n\n    var collection = this.collection;\n\n    if (!collection) {\n      throw new Error(\"AutoForm: You must specify a collection when form type is update.\");\n    } // Run \"before.update\" hooks\n\n\n    this.runBeforeHooks(this.updateDoc, function (modifier) {\n      if (_.isEmpty(modifier)) {\n        // make sure this check stays after the before hooks\n        // Nothing to update. Just treat it as a successful update.\n        c.result(null, 0);\n      } else {\n        // Perform update\n        collection.update({\n          _id: c.docId\n        }, modifier, c.validationOptions, c.result);\n      }\n    });\n  },\n  usesModifier: true,\n  validateForm: function () {\n    // Get SimpleSchema\n    var ss = AutoForm.getFormSchema(this.form.id); // We validate the modifier. We don't want to throw errors about missing required fields, etc.\n\n    return AutoForm._validateFormDoc(this.formDoc, true, this.form.id, ss, this.form);\n  },\n  shouldPrevalidate: function () {\n    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute\n    return !!this.formAttributes.collection && !!this.formAttributes.schema;\n  }\n});","map":{"version":3,"sources":["packages/aldeed:autoform/formTypes/update.js"],"names":["AutoForm","addFormType","onSubmit","c","event","preventDefault","collection","Error","runBeforeHooks","updateDoc","modifier","_","isEmpty","result","update","_id","docId","validationOptions","usesModifier","validateForm","ss","getFormSchema","form","id","_validateFormDoc","formDoc","shouldPrevalidate","formAttributes","schema"],"mappings":"AAAA;AAEAA,QAAQ,CAACC,WAAT,CAAqB,QAArB,EAA+B;AAC7BC,EAAAA,QAAQ,EAAE,YAAY;AACpB,QAAIC,CAAC,GAAG,IAAR,CADoB,CAGpB;;AACA,SAAKC,KAAL,CAAWC,cAAX,GAJoB,CAMpB;;AACA,QAAIC,UAAU,GAAG,KAAKA,UAAtB;;AACA,QAAI,CAACA,UAAL,EAAiB;AACf,YAAM,IAAIC,KAAJ,CAAU,mEAAV,CAAN;AACD,KAVmB,CAYpB;;;AACA,SAAKC,cAAL,CAAoB,KAAKC,SAAzB,EAAoC,UAAUC,QAAV,EAAoB;AACtD,UAAIC,CAAC,CAACC,OAAF,CAAUF,QAAV,CAAJ,EAAyB;AAAE;AACzB;AACAP,QAAAA,CAAC,CAACU,MAAF,CAAS,IAAT,EAAe,CAAf;AACD,OAHD,MAGO;AACL;AACAP,QAAAA,UAAU,CAACQ,MAAX,CAAkB;AAACC,UAAAA,GAAG,EAAEZ,CAAC,CAACa;AAAR,SAAlB,EAAkCN,QAAlC,EAA4CP,CAAC,CAACc,iBAA9C,EAAiEd,CAAC,CAACU,MAAnE;AACD;AACF,KARD;AASD,GAvB4B;AAwB7BK,EAAAA,YAAY,EAAE,IAxBe;AAyB7BC,EAAAA,YAAY,EAAE,YAAY;AACxB;AACA,QAAIC,EAAE,GAAGpB,QAAQ,CAACqB,aAAT,CAAuB,KAAKC,IAAL,CAAUC,EAAjC,CAAT,CAFwB,CAGxB;;AACA,WAAOvB,QAAQ,CAACwB,gBAAT,CAA0B,KAAKC,OAA/B,EAAwC,IAAxC,EAA8C,KAAKH,IAAL,CAAUC,EAAxD,EAA4DH,EAA5D,EAAgE,KAAKE,IAArE,CAAP;AACD,GA9B4B;AA+B7BI,EAAAA,iBAAiB,EAAE,YAAY;AAC7B;AACA,WAAO,CAAC,CAAC,KAAKC,cAAL,CAAoBrB,UAAtB,IAAoC,CAAC,CAAC,KAAKqB,cAAL,CAAoBC,MAAjE;AACD;AAlC4B,CAA/B","sourcesContent":["/* global AutoForm */\n\nAutoForm.addFormType('update', {\n  onSubmit: function () {\n    var c = this;\n\n    // Prevent browser form submission\n    this.event.preventDefault();\n\n    // Make sure we have a collection\n    var collection = this.collection;\n    if (!collection) {\n      throw new Error(\"AutoForm: You must specify a collection when form type is update.\");\n    }\n\n    // Run \"before.update\" hooks\n    this.runBeforeHooks(this.updateDoc, function (modifier) {\n      if (_.isEmpty(modifier)) { // make sure this check stays after the before hooks\n        // Nothing to update. Just treat it as a successful update.\n        c.result(null, 0);\n      } else {\n        // Perform update\n        collection.update({_id: c.docId}, modifier, c.validationOptions, c.result);\n      }\n    });\n  },\n  usesModifier: true,\n  validateForm: function () {\n    // Get SimpleSchema\n    var ss = AutoForm.getFormSchema(this.form.id);\n    // We validate the modifier. We don't want to throw errors about missing required fields, etc.\n    return AutoForm._validateFormDoc(this.formDoc, true, this.form.id, ss, this.form);\n  },\n  shouldPrevalidate: function () {\n    // Prevalidate only if there is both a `schema` attribute and a `collection` attribute\n    return !!this.formAttributes.collection && !!this.formAttributes.schema;\n  }\n});\n"]},"sourceType":"script","hash":"8aade29fa00ab1bf3906844b6c12058d03efc063"}
