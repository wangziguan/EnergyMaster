{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/autoform-helpers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/aldeed:autoform/autoform-helpers.js","filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/autoform-helpers.js","passPerPreset":false,"envName":"development","cwd":"/home/wangziguan/wzg/EnergyMaster","root":"/home/wangziguan/wzg/EnergyMaster","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/autoform-helpers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:autoform/autoform-helpers.js"}},"code":"/* global arrayTracker, AutoForm */\nfunction parseOptions(options) {\n  var hash = (options || {}).hash || {}; // Find the form's schema\n\n  var ss = AutoForm.getFormSchema();\n  return _.extend({}, hash, {\n    ss: ss\n  });\n}\n/*\n * Global template helpers (exported to app)\n */\n\n/*\n * afFieldMessage\n */\n\n\nTemplate.registerHelper('afFieldMessage', function () {\n  function autoFormFieldMessage(options) {\n    options = parseOptions(options, 'afFieldMessage');\n    var formId = AutoForm.getFormId();\n    return options.ss.namedContext(formId).keyErrorMessage(options.name);\n  }\n\n  return autoFormFieldMessage;\n}());\n/*\n * afFieldIsInvalid\n */\n\nTemplate.registerHelper('afFieldIsInvalid', function () {\n  function autoFormFieldIsInvalid(options) {\n    options = parseOptions(options, 'afFieldIsInvalid');\n    var formId = AutoForm.getFormId();\n    return options.ss.namedContext(formId).keyIsInvalid(options.name);\n  }\n\n  return autoFormFieldIsInvalid;\n}());\n/*\n * afArrayFieldHasMoreThanMinimum\n */\n\nTemplate.registerHelper('afArrayFieldHasMoreThanMinimum', function () {\n  function autoFormArrayFieldHasMoreThanMinimum(options) {\n    options = parseOptions(options, 'afArrayFieldHasMoreThanMinimum');\n    var form = AutoForm.getCurrentDataPlusExtrasForForm(); // Registered form types can disable adding/removing array items\n\n    if (form.formTypeDef.hideArrayItemButtons) {\n      return false;\n    }\n\n    var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);\n    var visibleCount = arrayTracker.getVisibleCount(form.id, options.name);\n    return visibleCount > range.minCount;\n  }\n\n  return autoFormArrayFieldHasMoreThanMinimum;\n}());\n/*\n * afArrayFieldHasLessThanMaximum\n */\n\nTemplate.registerHelper('afArrayFieldHasLessThanMaximum', function () {\n  function autoFormArrayFieldHasLessThanMaximum(options) {\n    options = parseOptions(options, 'afArrayFieldHasLessThanMaximum');\n    var form = AutoForm.getCurrentDataPlusExtrasForForm(); // Registered form types can disable adding/removing array items\n\n    if (form.formTypeDef.hideArrayItemButtons) {\n      return false;\n    }\n\n    var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);\n    var visibleCount = arrayTracker.getVisibleCount(form.id, options.name);\n    return visibleCount < range.maxCount;\n  }\n\n  return autoFormArrayFieldHasLessThanMaximum;\n}());\n/*\n * afFieldValueIs\n */\n\nTemplate.registerHelper('afFieldValueIs', function () {\n  function autoFormFieldValueIs(options) {\n    options = parseOptions(options, 'afFieldValueIs');\n    var currentValue = AutoForm.getFieldValue(options.name, options.formId);\n    return currentValue === options.value;\n  }\n\n  return autoFormFieldValueIs;\n}());\n/*\n * afFieldValue\n */\n\nTemplate.registerHelper('afFieldValue', function () {\n  function autoFormFieldValue(options) {\n    options = parseOptions(options, 'afFieldValue');\n    return AutoForm.getFieldValue(options.name, options.formId || AutoForm.getFormId());\n  }\n\n  return autoFormFieldValue;\n}());\n/*\n * afArrayFieldIsFirstVisible\n */\n\nTemplate.registerHelper('afArrayFieldIsFirstVisible', function () {\n  function autoFormArrayFieldIsFirstVisible() {\n    var context = this;\n    return arrayTracker.isFirstFieldlVisible(context.formId, context.arrayFieldName, context.index);\n  }\n\n  return autoFormArrayFieldIsFirstVisible;\n}());\n/*\n * afArrayFieldIsLastVisible\n */\n\nTemplate.registerHelper('afArrayFieldIsLastVisible', function () {\n  function autoFormArrayFieldIsLastVisible() {\n    var context = this;\n    return arrayTracker.isLastFieldlVisible(context.formId, context.arrayFieldName, context.index);\n  }\n\n  return autoFormArrayFieldIsLastVisible;\n}());\n/*\n * afFieldValueContains\n */\n\nTemplate.registerHelper('afFieldValueContains', function () {\n  function autoFormFieldValueContains(options) {\n    options = parseOptions(options, 'afFieldValueContains');\n    var currentValue = AutoForm.getFieldValue(options.name, options.formId);\n    return _.isArray(currentValue) && (_.contains(currentValue, options.value) || options.values && _.intersection(currentValue, options.values.split(',')));\n  }\n\n  return autoFormFieldValueContains;\n}());\n/*\n * afFieldLabelText\n */\n\nTemplate.registerHelper('afFieldLabelText', function () {\n  function autoFormFieldLabelText(options) {\n    options = parseOptions(options, 'afFieldLabelText');\n    return AutoForm.getLabelForField(options.name);\n  }\n\n  return autoFormFieldLabelText;\n}());\n/*\n * afFieldNames\n */\n\nTemplate.registerHelper('afFieldNames', function () {\n  function autoFormFieldNames(options) {\n    options = parseOptions(options, 'afFieldNames');\n    var ss = options.ss,\n        name = options.name,\n        namePlusDot,\n        genericName,\n        genericNamePlusDot;\n    var form = AutoForm.getCurrentDataForForm();\n\n    if (name) {\n      namePlusDot = name + '.';\n      genericName = AutoForm.Utility.makeKeyGeneric(name);\n      genericNamePlusDot = genericName + '.';\n    } // Get the list of fields we want included\n\n\n    var fieldList = options.fields,\n        usedAncestorFieldList = false;\n\n    if (fieldList) {\n      fieldList = AutoForm.Utility.stringToArray(fieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');\n    }\n\n    var ancestorFieldList = AutoForm.findAttribute('fields');\n\n    if (ancestorFieldList) {\n      ancestorFieldList = AutoForm.Utility.stringToArray(ancestorFieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields'); // Use the ancestor field list as backup, unless there is\n      // a name and that name is listed in the ancestor field list\n\n      if (!fieldList) {\n        fieldList = ancestorFieldList;\n        usedAncestorFieldList = true;\n      }\n    }\n\n    if (fieldList) {\n      // Take only those fields in the fieldList that are descendants of the `name` field\n      if (name) {\n        // Replace generic name with real name. We assume that field names\n        // with $ apply to all array items. Field list will now have the\n        // correct array field item number instead of $.\n        if (genericName !== name) {\n          fieldList = _.map(fieldList, function (field) {\n            if (field.indexOf(genericNamePlusDot) === 0) {\n              return namePlusDot + field.slice(genericNamePlusDot.length);\n            }\n\n            return field;\n          });\n        }\n\n        fieldList = _.filter(fieldList, function () {\n          function filterFieldsByName(field) {\n            return field.indexOf(namePlusDot) === 0;\n          }\n\n          return filterFieldsByName;\n        }());\n      } // If top level fields, be sure to remove any with $ in them\n      else {\n          fieldList = _.filter(fieldList, function () {\n            function filterArrayFields(field) {\n              return field.slice(-2) !== '.$' && field.indexOf('.$.') === -1;\n            }\n\n            return filterArrayFields;\n          }());\n        } // First we filter out any fields that are subobjects where the\n      // parent object is also in the fieldList and is NOT the current\n      // field name.\n      // This means that if you do `fields=\"address,address.city\"` we\n      // will use an afObjectField for address and include only the\n      // \"city\" field within that, but if you instead do `fields=\"address.city\"`\n      // we will use a single field for the city, with no afObjectField\n      // template around it.\n\n\n      fieldList = _.reject(fieldList, function (field) {\n        var lastDotPos = field.lastIndexOf('.');\n\n        if (lastDotPos === -1) {\n          return false; // keep\n        }\n\n        var parentField = field.slice(0, lastDotPos);\n\n        if (parentField.slice(-2) === '.$') {\n          parentField = parentField.slice(0, -2);\n        }\n\n        return _.contains(fieldList, parentField) && parentField !== name && parentField !== genericName;\n      });\n    }\n\n    if (!fieldList || fieldList.length === 0 && usedAncestorFieldList) {\n      // Get list of field names that are descendants of this field's name.\n      // If name/genericName is undefined, this will return top-level\n      // schema keys.\n      fieldList = ss.objectKeys(genericName);\n\n      if (name) {\n        // Tack child field name on to end of parent field name. This\n        // ensures that we keep the desired array index for array items.\n        fieldList = _.map(fieldList, function (field) {\n          return name + '.' + field;\n        });\n      }\n    } // If user wants to omit some fields, remove those from the array\n\n\n    var omitFields = options.omitFields || AutoForm.findAttribute('omitFields');\n\n    if (omitFields) {\n      omitFields = AutoForm.Utility.stringToArray(omitFields, 'AutoForm: omitFields attribute must be an array or a string containing a comma-delimited list of fields');\n      fieldList = _.difference(fieldList, omitFields); // If omitFields contains generic field names (with $) we omit those too\n\n      fieldList = _.reject(fieldList, function (f) {\n        return _.contains(omitFields, AutoForm.Utility.makeKeyGeneric(f));\n      });\n    } // Filter out fields we never want\n\n\n    fieldList = _.filter(fieldList, function () {\n      function shouldIncludeField(field) {\n        var fieldDefs = AutoForm.Utility.getFieldDefinition(ss, field); // Don't include fields that are not in the schema\n\n        if (!fieldDefs) {\n          return false;\n        } // Don't include fields with autoform.omit=true\n\n\n        if (fieldDefs.autoform && fieldDefs.autoform.omit === true) {\n          return false;\n        } // Don't include fields with denyInsert=true when it's an insert form\n\n\n        if (fieldDefs.denyInsert && form.type === 'insert') {\n          return false;\n        } // Don't include fields with denyUpdate=true when it's an update form\n\n\n        if (fieldDefs.denyUpdate && form.type === 'update') {\n          return false;\n        }\n\n        return true;\n      }\n\n      return shouldIncludeField;\n    }()); // Ensure fields are not added more than once\n\n    fieldList = _.unique(fieldList); // We return it as an array of objects because that\n    // works better with Blaze contexts\n\n    fieldList = _.map(fieldList, function (name) {\n      return {\n        name: name\n      };\n    });\n    return fieldList;\n  }\n\n  return autoFormFieldNames;\n}());\n/*\n * afSelectOptionAtts\n */\n\nTemplate.registerHelper('afSelectOptionAtts', function () {\n  function afSelectOptionAtts() {\n    var atts = _.pick(this, 'value');\n\n    if (this.selected) {\n      atts.selected = '';\n    }\n\n    if (this.htmlAtts) {\n      _.extend(atts, this.htmlAtts);\n    }\n\n    return atts;\n  }\n\n  return afSelectOptionAtts;\n}()); // Expects to be called with this.name available\n\nTemplate.registerHelper('afOptionsFromSchema', function () {\n  function afOptionsFromSchema() {\n    return AutoForm._getOptionsForField(this.name);\n  }\n\n  return afOptionsFromSchema;\n}());","map":{"version":3,"sources":["packages/aldeed:autoform/autoform-helpers.js"],"names":["parseOptions","options","hash","ss","AutoForm","getFormSchema","_","extend","Template","registerHelper","autoFormFieldMessage","formId","getFormId","namedContext","keyErrorMessage","name","autoFormFieldIsInvalid","keyIsInvalid","autoFormArrayFieldHasMoreThanMinimum","form","getCurrentDataPlusExtrasForForm","formTypeDef","hideArrayItemButtons","range","arrayTracker","getMinMax","minCount","maxCount","visibleCount","getVisibleCount","id","autoFormArrayFieldHasLessThanMaximum","autoFormFieldValueIs","currentValue","getFieldValue","value","autoFormFieldValue","autoFormArrayFieldIsFirstVisible","context","isFirstFieldlVisible","arrayFieldName","index","autoFormArrayFieldIsLastVisible","isLastFieldlVisible","autoFormFieldValueContains","isArray","contains","values","intersection","split","autoFormFieldLabelText","getLabelForField","autoFormFieldNames","namePlusDot","genericName","genericNamePlusDot","getCurrentDataForForm","Utility","makeKeyGeneric","fieldList","fields","usedAncestorFieldList","stringToArray","ancestorFieldList","findAttribute","map","field","indexOf","slice","length","filter","filterFieldsByName","filterArrayFields","reject","lastDotPos","lastIndexOf","parentField","objectKeys","omitFields","difference","f","shouldIncludeField","fieldDefs","getFieldDefinition","autoform","omit","denyInsert","type","denyUpdate","unique","afSelectOptionAtts","atts","pick","selected","htmlAtts","afOptionsFromSchema","_getOptionsForField"],"mappings":"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","sourcesContent":["/* global arrayTracker, AutoForm */\n\nfunction parseOptions(options) {\n  var hash = (options || {}).hash || {};\n  // Find the form's schema\n  var ss = AutoForm.getFormSchema();\n  return _.extend({}, hash, { ss: ss });\n}\n\n/*\n * Global template helpers (exported to app)\n */\n\n/*\n * afFieldMessage\n */\nTemplate.registerHelper('afFieldMessage', function autoFormFieldMessage(options) {\n  options = parseOptions(options, 'afFieldMessage');\n  var formId = AutoForm.getFormId();\n\n  return options.ss.namedContext(formId).keyErrorMessage(options.name);\n});\n\n/*\n * afFieldIsInvalid\n */\nTemplate.registerHelper('afFieldIsInvalid', function autoFormFieldIsInvalid(options) {\n  options = parseOptions(options, 'afFieldIsInvalid');\n  var formId = AutoForm.getFormId();\n\n  return options.ss.namedContext(formId).keyIsInvalid(options.name);\n});\n\n/*\n * afArrayFieldHasMoreThanMinimum\n */\nTemplate.registerHelper('afArrayFieldHasMoreThanMinimum', function autoFormArrayFieldHasMoreThanMinimum(options) {\n  options = parseOptions(options, 'afArrayFieldHasMoreThanMinimum');\n  var form = AutoForm.getCurrentDataPlusExtrasForForm();\n\n  // Registered form types can disable adding/removing array items\n  if (form.formTypeDef.hideArrayItemButtons) {\n    return false;\n  }\n\n  var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);\n  var visibleCount = arrayTracker.getVisibleCount(form.id, options.name);\n  return (visibleCount > range.minCount);\n});\n\n/*\n * afArrayFieldHasLessThanMaximum\n */\nTemplate.registerHelper('afArrayFieldHasLessThanMaximum', function autoFormArrayFieldHasLessThanMaximum(options) {\n  options = parseOptions(options, 'afArrayFieldHasLessThanMaximum');\n  var form = AutoForm.getCurrentDataPlusExtrasForForm();\n\n  // Registered form types can disable adding/removing array items\n  if (form.formTypeDef.hideArrayItemButtons) {\n    return false;\n  }\n\n  var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);\n  var visibleCount = arrayTracker.getVisibleCount(form.id, options.name);\n  return (visibleCount < range.maxCount);\n});\n\n/*\n * afFieldValueIs\n */\nTemplate.registerHelper('afFieldValueIs', function autoFormFieldValueIs(options) {\n  options = parseOptions(options, 'afFieldValueIs');\n\n  var currentValue = AutoForm.getFieldValue(options.name, options.formId);\n  return currentValue === options.value;\n});\n\n/*\n * afFieldValue\n */\nTemplate.registerHelper('afFieldValue', function autoFormFieldValue(options) {\n  options = parseOptions(options, 'afFieldValue');\n\n  return AutoForm.getFieldValue(options.name, options.formId || AutoForm.getFormId());\n});\n\n/*\n * afArrayFieldIsFirstVisible\n */\nTemplate.registerHelper('afArrayFieldIsFirstVisible', function autoFormArrayFieldIsFirstVisible() {\n  var context = this;\n  return arrayTracker.isFirstFieldlVisible(context.formId, context.arrayFieldName, context.index);\n});\n\n/*\n * afArrayFieldIsLastVisible\n */\nTemplate.registerHelper('afArrayFieldIsLastVisible', function autoFormArrayFieldIsLastVisible() {\n  var context = this;\n  return arrayTracker.isLastFieldlVisible(context.formId, context.arrayFieldName, context.index);\n});\n\n/*\n * afFieldValueContains\n */\nTemplate.registerHelper('afFieldValueContains', function autoFormFieldValueContains(options) {\n  options = parseOptions(options, 'afFieldValueContains');\n\n  var currentValue = AutoForm.getFieldValue(options.name, options.formId);\n  return _.isArray(currentValue) && (_.contains(currentValue, options.value) || options.values && _.intersection(currentValue, options.values.split(',')));\n});\n\n/*\n * afFieldLabelText\n */\nTemplate.registerHelper('afFieldLabelText', function autoFormFieldLabelText(options) {\n  options = parseOptions(options, 'afFieldLabelText');\n  return AutoForm.getLabelForField(options.name);\n});\n\n/*\n * afFieldNames\n */\nTemplate.registerHelper('afFieldNames', function autoFormFieldNames(options) {\n  options = parseOptions(options, 'afFieldNames');\n  var ss = options.ss, name = options.name, namePlusDot, genericName, genericNamePlusDot;\n  var form = AutoForm.getCurrentDataForForm();\n\n  if (name) {\n    namePlusDot = name + '.';\n    genericName = AutoForm.Utility.makeKeyGeneric(name);\n    genericNamePlusDot = genericName + '.';\n  }\n\n  // Get the list of fields we want included\n  var fieldList = options.fields, usedAncestorFieldList = false;\n  if (fieldList) {\n    fieldList = AutoForm.Utility.stringToArray(fieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');\n  }\n\n  var ancestorFieldList = AutoForm.findAttribute('fields');\n  if (ancestorFieldList) {\n    ancestorFieldList = AutoForm.Utility.stringToArray(ancestorFieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');\n\n    // Use the ancestor field list as backup, unless there is\n    // a name and that name is listed in the ancestor field list\n    if (!fieldList) {\n      fieldList = ancestorFieldList;\n      usedAncestorFieldList = true;\n    }\n  }\n\n  if (fieldList) {\n\n    // Take only those fields in the fieldList that are descendants of the `name` field\n    if (name) {\n      // Replace generic name with real name. We assume that field names\n      // with $ apply to all array items. Field list will now have the\n      // correct array field item number instead of $.\n      if (genericName !== name) {\n        fieldList = _.map(fieldList, function (field) {\n          if (field.indexOf(genericNamePlusDot) === 0) {\n            return namePlusDot + field.slice(genericNamePlusDot.length);\n          }\n          return field;\n        });\n      }\n\n      fieldList = _.filter(fieldList, function filterFieldsByName(field) {\n        return field.indexOf(namePlusDot) === 0;\n      });\n    }\n\n    // If top level fields, be sure to remove any with $ in them\n    else {\n      fieldList = _.filter(fieldList, function filterArrayFields(field) {\n        return (field.slice(-2) !== '.$' && field.indexOf('.$.') === -1);\n      });\n    }\n\n    // First we filter out any fields that are subobjects where the\n    // parent object is also in the fieldList and is NOT the current\n    // field name.\n    // This means that if you do `fields=\"address,address.city\"` we\n    // will use an afObjectField for address and include only the\n    // \"city\" field within that, but if you instead do `fields=\"address.city\"`\n    // we will use a single field for the city, with no afObjectField\n    // template around it.\n    fieldList = _.reject(fieldList, function (field) {\n      var lastDotPos = field.lastIndexOf('.');\n      if (lastDotPos === -1) {\n        return false; // keep\n      }\n\n      var parentField = field.slice(0, lastDotPos);\n      if (parentField.slice(-2) === '.$') {\n        parentField = parentField.slice(0, -2);\n      }\n      return _.contains(fieldList, parentField) && parentField !== name && parentField !== genericName;\n    });\n  }\n\n  if (!fieldList || (fieldList.length === 0 && usedAncestorFieldList)) {\n    // Get list of field names that are descendants of this field's name.\n    // If name/genericName is undefined, this will return top-level\n    // schema keys.\n    fieldList = ss.objectKeys(genericName);\n\n    if (name) {\n      // Tack child field name on to end of parent field name. This\n      // ensures that we keep the desired array index for array items.\n      fieldList = _.map(fieldList, function (field) {\n        return name + '.' + field;\n      });\n    }\n  }\n\n  // If user wants to omit some fields, remove those from the array\n  var omitFields = options.omitFields || AutoForm.findAttribute('omitFields');\n  if (omitFields) {\n    omitFields = AutoForm.Utility.stringToArray(omitFields, 'AutoForm: omitFields attribute must be an array or a string containing a comma-delimited list of fields');\n    fieldList = _.difference(fieldList, omitFields);\n    // If omitFields contains generic field names (with $) we omit those too\n    fieldList = _.reject(fieldList, function (f) {\n      return _.contains(omitFields, AutoForm.Utility.makeKeyGeneric(f));\n    });\n  }\n\n  // Filter out fields we never want\n  fieldList = _.filter(fieldList, function shouldIncludeField(field) {\n    var fieldDefs = AutoForm.Utility.getFieldDefinition(ss, field);\n\n    // Don't include fields that are not in the schema\n    if (!fieldDefs) {\n      return false;\n    }\n\n    // Don't include fields with autoform.omit=true\n    if (fieldDefs.autoform && fieldDefs.autoform.omit === true) {\n      return false;\n    }\n\n    // Don't include fields with denyInsert=true when it's an insert form\n    if (fieldDefs.denyInsert && form.type === 'insert') {\n      return false;\n    }\n\n    // Don't include fields with denyUpdate=true when it's an update form\n    if (fieldDefs.denyUpdate && form.type === 'update') {\n      return false;\n    }\n\n    return true;\n  });\n\n  // Ensure fields are not added more than once\n  fieldList = _.unique(fieldList);\n\n  // We return it as an array of objects because that\n  // works better with Blaze contexts\n  fieldList = _.map(fieldList, function (name) {\n    return { name: name };\n  });\n\n  return fieldList;\n});\n\n\n/*\n * afSelectOptionAtts\n */\nTemplate.registerHelper('afSelectOptionAtts', function afSelectOptionAtts() {\n  var atts = _.pick(this, 'value');\n  if (this.selected) {\n    atts.selected = '';\n  }\n  if (this.htmlAtts) {\n    _.extend(atts, this.htmlAtts);\n  }\n  return atts;\n});\n\n// Expects to be called with this.name available\nTemplate.registerHelper('afOptionsFromSchema', function afOptionsFromSchema() {\n  return AutoForm._getOptionsForField(this.name);\n});\n"]},"sourceType":"script","hash":"0c0cdddbe19c8836fa3ae6a55ed9298bbd279a20"}
