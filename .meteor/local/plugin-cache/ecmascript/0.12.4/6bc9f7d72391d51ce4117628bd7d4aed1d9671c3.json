{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/components/afQuickField/afQuickField.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/aldeed:autoform/components/afQuickField/afQuickField.js","filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/components/afQuickField/afQuickField.js","passPerPreset":false,"envName":"development","cwd":"/home/wangziguan/wzg/EnergyMaster","root":"/home/wangziguan/wzg/EnergyMaster","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/wangziguan/wzg/EnergyMaster/packages/aldeed:autoform/components/afQuickField/afQuickField.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:autoform/components/afQuickField/afQuickField.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\n/* global AutoForm */\nTemplate.afQuickField.helpers({\n  isGroup: function () {\n    function afQuickFieldIsGroup() {\n      var c = AutoForm.Utility.getComponentContext(this, \"afQuickField\"); // Render a group of fields if we expect an Object and we don't have options\n      // and we have not overridden the type\n\n      var isSubschema = (0, _typeof2.default)(c.defs.type) === 'object' && c.defs.type._schema;\n\n      return (c.defs.type === Object || isSubschema) && !c.atts.options && !c.atts.type;\n    }\n\n    return afQuickFieldIsGroup;\n  }(),\n  isFieldArray: function () {\n    function afQuickFieldIsFieldArray() {\n      var c = AutoForm.Utility.getComponentContext(this, \"afQuickField\"); // Render an array of fields if we expect an Array and we don't have options\n      // and we have not overridden the type\n\n      return c.defs.type === Array && !c.atts.options && !c.atts.type;\n    }\n\n    return afQuickFieldIsFieldArray;\n  }(),\n  groupAtts: function () {\n    function afQuickFieldGroupAtts() {\n      // afQuickField passes `fields` and `omitFields` on to `afObjectField`\n      // and `afArrayField`, but not to `afFormGroup`\n      return _.omit(this, 'fields', 'omitFields');\n    }\n\n    return afQuickFieldGroupAtts;\n  }(),\n  isHiddenInput: function () {\n    function afQuickFieldIsHiddenInput() {\n      var c = AutoForm.Utility.getComponentContext(this, \"afQuickField\");\n      var inputType = c.atts.type;\n\n      if (inputType) {\n        var componentDef = AutoForm._inputTypeDefinitions[inputType];\n\n        if (!componentDef) {\n          throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');\n        }\n\n        return componentDef.isHidden;\n      }\n\n      return false;\n    }\n\n    return afQuickFieldIsHiddenInput;\n  }()\n});","map":{"version":3,"sources":["packages/aldeed:autoform/components/afQuickField/afQuickField.js"],"names":["Template","afQuickField","helpers","isGroup","afQuickFieldIsGroup","c","AutoForm","Utility","getComponentContext","isSubschema","defs","type","_schema","Object","atts","options","isFieldArray","afQuickFieldIsFieldArray","Array","groupAtts","afQuickFieldGroupAtts","_","omit","isHiddenInput","afQuickFieldIsHiddenInput","inputType","componentDef","_inputTypeDefinitions","Error","isHidden"],"mappings":";;;;AAAA;AAEAA,QAAQ,CAACC,YAAT,CAAsBC,OAAtB,CAA8B;AAC5BC,EAAAA,OAAO;AAAE,aAASC,mBAAT,GAA+B;AACtC,UAAIC,CAAC,GAAGC,QAAQ,CAACC,OAAT,CAAiBC,mBAAjB,CAAqC,IAArC,EAA2C,cAA3C,CAAR,CADsC,CAEtC;AACA;;AACA,UAAMC,WAAW,GAAG,sBAAOJ,CAAC,CAACK,IAAF,CAAOC,IAAd,MAAuB,QAAvB,IAAmCN,CAAC,CAACK,IAAF,CAAOC,IAAP,CAAYC,OAAnE;;AACA,aAAQ,CAACP,CAAC,CAACK,IAAF,CAAOC,IAAP,KAAgBE,MAAhB,IAA0BJ,WAA3B,KAA2C,CAACJ,CAAC,CAACS,IAAF,CAAOC,OAAnD,IAA8D,CAACV,CAAC,CAACS,IAAF,CAAOH,IAA9E;AACD;;AANM,WAAWP,mBAAX;AAAA,KADqB;AAQ5BY,EAAAA,YAAY;AAAE,aAASC,wBAAT,GAAoC;AAChD,UAAIZ,CAAC,GAAGC,QAAQ,CAACC,OAAT,CAAiBC,mBAAjB,CAAqC,IAArC,EAA2C,cAA3C,CAAR,CADgD,CAEhD;AACA;;AACA,aAAQH,CAAC,CAACK,IAAF,CAAOC,IAAP,KAAgBO,KAAhB,IAAyB,CAACb,CAAC,CAACS,IAAF,CAAOC,OAAjC,IAA4C,CAACV,CAAC,CAACS,IAAF,CAAOH,IAA5D;AACD;;AALW,WAAWM,wBAAX;AAAA,KARgB;AAc5BE,EAAAA,SAAS;AAAE,aAASC,qBAAT,GAAiC;AAC1C;AACA;AACA,aAAOC,CAAC,CAACC,IAAF,CAAO,IAAP,EAAa,QAAb,EAAuB,YAAvB,CAAP;AACD;;AAJQ,WAAWF,qBAAX;AAAA,KAdmB;AAmB5BG,EAAAA,aAAa;AAAE,aAASC,yBAAT,GAAqC;AAClD,UAAInB,CAAC,GAAGC,QAAQ,CAACC,OAAT,CAAiBC,mBAAjB,CAAqC,IAArC,EAA2C,cAA3C,CAAR;AACA,UAAIiB,SAAS,GAAGpB,CAAC,CAACS,IAAF,CAAOH,IAAvB;;AACA,UAAIc,SAAJ,EAAe;AACb,YAAIC,YAAY,GAAGpB,QAAQ,CAACqB,qBAAT,CAA+BF,SAA/B,CAAnB;;AACA,YAAI,CAACC,YAAL,EAAmB;AACjB,gBAAM,IAAIE,KAAJ,CAAU,iEAAiEH,SAAjE,GAA6E,GAAvF,CAAN;AACD;;AACD,eAAOC,YAAY,CAACG,QAApB;AACD;;AAED,aAAO,KAAP;AACD;;AAZY,WAAWL,yBAAX;AAAA;AAnBe,CAA9B","sourcesContent":["/* global AutoForm */\n\nTemplate.afQuickField.helpers({\n  isGroup: function afQuickFieldIsGroup() {\n    var c = AutoForm.Utility.getComponentContext(this, \"afQuickField\");\n    // Render a group of fields if we expect an Object and we don't have options\n    // and we have not overridden the type\n    const isSubschema = typeof c.defs.type === 'object' && c.defs.type._schema;\n    return ((c.defs.type === Object || isSubschema) && !c.atts.options && !c.atts.type);\n  },\n  isFieldArray: function afQuickFieldIsFieldArray() {\n    var c = AutoForm.Utility.getComponentContext(this, \"afQuickField\");\n    // Render an array of fields if we expect an Array and we don't have options\n    // and we have not overridden the type\n    return (c.defs.type === Array && !c.atts.options && !c.atts.type);\n  },\n  groupAtts: function afQuickFieldGroupAtts() {\n    // afQuickField passes `fields` and `omitFields` on to `afObjectField`\n    // and `afArrayField`, but not to `afFormGroup`\n    return _.omit(this, 'fields', 'omitFields');\n  },\n  isHiddenInput: function afQuickFieldIsHiddenInput() {\n    var c = AutoForm.Utility.getComponentContext(this, \"afQuickField\");\n    var inputType = c.atts.type;\n    if (inputType) {\n      var componentDef = AutoForm._inputTypeDefinitions[inputType];\n      if (!componentDef) {\n        throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');\n      }\n      return componentDef.isHidden;\n    }\n\n    return false;\n  }\n});\n"]},"sourceType":"script","hash":"6bc9f7d72391d51ce4117628bd7d4aed1d9671c3"}
